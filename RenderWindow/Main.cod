//
// FX Version: fx_5_0
//
// 4 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorldMatrix;              // Offset:    0, size:   64
    float4x4 gWorldInvTransposeMatrix;  // Offset:   64, size:   64
}

cbuffer cbPerFrame
{
    float4x4 gViewMatrix;               // Offset:    0, size:   64
    N_DirectionalLight gDirectionalLight_Dynamic[10];// Offset:   64, size:  640
    N_PointLight gPointLight_Dynamic[10];// Offset:  704, size:  640
    N_SpotLight gSpotLight_Dynamic[10]; // Offset: 1344, size:  800
    int     gDirectionalLightCount_Dynamic;// Offset: 2144, size:    4
    int     gPointLightCount_Dynamic;   // Offset: 2148, size:    4
    int     gSpotLightCount_Dynamic;    // Offset: 2152, size:    4
    int     gIsLightingEnabled_Dynamic; // Offset: 2156, size:    4
    float3  gCamPos;                    // Offset: 2160, size:   12
    float   mPad1;                      // Offset: 2172, size:    4
}

cbuffer cbPerSubset
{
    N_Material gMaterial;               // Offset:    0, size:   48
}

cbuffer cbRarely
{
    float4x4 gProjMatrix;               // Offset:    0, size:   64
    N_DirectionalLight gDirectionalLight_Static[50];// Offset:   64, size: 3200
    N_PointLight gPointLight_Static[50];// Offset: 3264, size: 3200
    N_SpotLight gSpotLight_Static[50];  // Offset: 6464, size: 4000
    int     gDirectionalLightCount_Static;// Offset: 10464, size:    4
    int     gPointLightCount_Static;    // Offset: 10468, size:    4
    int     gSpotLightCount_Static;     // Offset: 10472, size:    4
    int     gIsLightingEnabled_Static;  // Offset: 10476, size:    4
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 BasicTech
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewMatrix;              // Offset:    0 Size:    64
                //   
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:   64
                //       float mSpecularIntensity;      // Offset:   76
                //       float3 mDiffuseColor;          // Offset:   80
                //       float mDiffuseIntensity;       // Offset:   92
                //       float3 mSpecularColor;         // Offset:   96
                //       float mPad2;                   // Offset:  108
                //       float3 mDirection;             // Offset:  112
                //       float mPad3;                   // Offset:  124
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:   64 Size:   640 [unused]
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  704
                //       float mSpecularIntensity;      // Offset:  716
                //       float3 mDiffuseColor;          // Offset:  720
                //       float mLightingRange;          // Offset:  732
                //       float3 mSpecularColor;         // Offset:  736
                //       float mAttenuationFactor;      // Offset:  748
                //       float3 mPosition;              // Offset:  752
                //       float mDiffuseIntensity;       // Offset:  764
                //
                //   } gPointLight_Dynamic[10];         // Offset:  704 Size:   640 [unused]
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1344
                //       float mSpecularIntensity;      // Offset: 1356
                //       float3 mDiffuseColor;          // Offset: 1360
                //       float mLightingRange;          // Offset: 1372
                //       float3 mSpecularColor;         // Offset: 1376
                //       float mAttenuationFactor;      // Offset: 1388
                //       float3 mLitAt;                 // Offset: 1392
                //       float mLightingAngle;          // Offset: 1404
                //       float3 mPosition;              // Offset: 1408
                //       float mDiffuseIntensity;       // Offset: 1420
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1344 Size:   800 [unused]
                //   int gDirectionalLightCount_Dynamic;// Offset: 2144 Size:     4 [unused]
                //   int gPointLightCount_Dynamic;      // Offset: 2148 Size:     4 [unused]
                //   int gSpotLightCount_Dynamic;       // Offset: 2152 Size:     4 [unused]
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2156 Size:     4 [unused]
                //   float3 gCamPos;                    // Offset: 2160 Size:    12 [unused]
                //   float mPad1;                       // Offset: 2172 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbRarely
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:   64
                //       float mSpecularIntensity;      // Offset:   76
                //       float3 mDiffuseColor;          // Offset:   80
                //       float mDiffuseIntensity;       // Offset:   92
                //       float3 mSpecularColor;         // Offset:   96
                //       float mPad2;                   // Offset:  108
                //       float3 mDirection;             // Offset:  112
                //       float mPad3;                   // Offset:  124
                //
                //   } gDirectionalLight_Static[50];    // Offset:   64 Size:  3200 [unused]
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 3264
                //       float mSpecularIntensity;      // Offset: 3276
                //       float3 mDiffuseColor;          // Offset: 3280
                //       float mLightingRange;          // Offset: 3292
                //       float3 mSpecularColor;         // Offset: 3296
                //       float mAttenuationFactor;      // Offset: 3308
                //       float3 mPosition;              // Offset: 3312
                //       float mDiffuseIntensity;       // Offset: 3324
                //
                //   } gPointLight_Static[50];          // Offset: 3264 Size:  3200 [unused]
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 6464
                //       float mSpecularIntensity;      // Offset: 6476
                //       float3 mDiffuseColor;          // Offset: 6480
                //       float mLightingRange;          // Offset: 6492
                //       float3 mSpecularColor;         // Offset: 6496
                //       float mAttenuationFactor;      // Offset: 6508
                //       float3 mLitAt;                 // Offset: 6512
                //       float mLightingAngle;          // Offset: 6524
                //       float3 mPosition;              // Offset: 6528
                //       float mDiffuseIntensity;       // Offset: 6540
                //
                //   } gSpotLight_Static[50];           // Offset: 6464 Size:  4000 [unused]
                //   int gDirectionalLightCount_Static; // Offset: 10464 Size:     4 [unused]
                //   int gPointLightCount_Static;       // Offset: 10468 Size:     4 [unused]
                //   int gSpotLightCount_Static;        // Offset: 10472 Size:     4 [unused]
                //   int gIsLightingEnabled_Static;     // Offset: 10476 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbRarely                          cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                
                #line 78 "F:\1VS PROJECT\3D\Noise 3D-DX11 - (9)\RenderWindow\Main.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[0].xyzw
                dp4 r2.y, r1.xyzw, cb1[1].xyzw
                dp4 r2.z, r1.xyzw, cb1[2].xyzw
                dp4 r2.w, r1.xyzw, cb1[3].xyzw
                dp4 r1.x, r2.xyzw, cb2[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb2[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb2[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb2[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov o0.xyzw, r1.xyzw  // VS0<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS0<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS0<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS0<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o4.xy, l(0,0,0,0)  // VS0<14: 0f,15: 0f>
                ret 
                // Approximately 29 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewMatrix;              // Offset:    0 Size:    64 [unused]
                //   
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:   64
                //       float mSpecularIntensity;      // Offset:   76
                //       float3 mDiffuseColor;          // Offset:   80
                //       float mDiffuseIntensity;       // Offset:   92
                //       float3 mSpecularColor;         // Offset:   96
                //       float mPad2;                   // Offset:  108
                //       float3 mDirection;             // Offset:  112
                //       float mPad3;                   // Offset:  124
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:   64 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  704
                //       float mSpecularIntensity;      // Offset:  716
                //       float3 mDiffuseColor;          // Offset:  720
                //       float mLightingRange;          // Offset:  732
                //       float3 mSpecularColor;         // Offset:  736
                //       float mAttenuationFactor;      // Offset:  748
                //       float3 mPosition;              // Offset:  752
                //       float mDiffuseIntensity;       // Offset:  764
                //
                //   } gPointLight_Dynamic[10];         // Offset:  704 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1344
                //       float mSpecularIntensity;      // Offset: 1356
                //       float3 mDiffuseColor;          // Offset: 1360
                //       float mLightingRange;          // Offset: 1372
                //       float3 mSpecularColor;         // Offset: 1376
                //       float mAttenuationFactor;      // Offset: 1388
                //       float3 mLitAt;                 // Offset: 1392
                //       float mLightingAngle;          // Offset: 1404
                //       float3 mPosition;              // Offset: 1408
                //       float mDiffuseIntensity;       // Offset: 1420
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1344 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2144 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2148 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2152 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2156 Size:     4
                //   float3 gCamPos;                    // Offset: 2160 Size:    12
                //   float mPad1;                       // Offset: 2172 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mPad1;                   // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //
                //   } gMaterial;                       // Offset:    0 Size:    48
                //
                // }
                //
                // cbuffer cbRarely
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:   64
                //       float mSpecularIntensity;      // Offset:   76
                //       float3 mDiffuseColor;          // Offset:   80
                //       float mDiffuseIntensity;       // Offset:   92
                //       float3 mSpecularColor;         // Offset:   96
                //       float mPad2;                   // Offset:  108
                //       float3 mDirection;             // Offset:  112
                //       float mPad3;                   // Offset:  124
                //
                //   } gDirectionalLight_Static[50];    // Offset:   64 Size:  3200
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 3264
                //       float mSpecularIntensity;      // Offset: 3276
                //       float3 mDiffuseColor;          // Offset: 3280
                //       float mLightingRange;          // Offset: 3292
                //       float3 mSpecularColor;         // Offset: 3296
                //       float mAttenuationFactor;      // Offset: 3308
                //       float3 mPosition;              // Offset: 3312
                //       float mDiffuseIntensity;       // Offset: 3324
                //
                //   } gPointLight_Static[50];          // Offset: 3264 Size:  3200
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 6464
                //       float mSpecularIntensity;      // Offset: 6476
                //       float3 mDiffuseColor;          // Offset: 6480
                //       float mLightingRange;          // Offset: 6492
                //       float3 mSpecularColor;         // Offset: 6496
                //       float mAttenuationFactor;      // Offset: 6508
                //       float3 mLitAt;                 // Offset: 6512
                //       float mLightingAngle;          // Offset: 6524
                //       float3 mPosition;              // Offset: 6528
                //       float mDiffuseIntensity;       // Offset: 6540
                //
                //   } gSpotLight_Static[50];           // Offset: 6464 Size:  4000
                //   int gDirectionalLightCount_Static; // Offset: 10464 Size:     4
                //   int gPointLightCount_Static;       // Offset: 10468 Size:     4
                //   int gSpotLightCount_Static;        // Offset: 10472 Size:     4
                //   int gIsLightingEnabled_Static;     // Offset: 10476 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerSubset                       cbuffer      NA          NA    1        1
                // cbRarely                          cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[136], dynamicIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_constantbuffer cb2[655], dynamicIndexed
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_output o0.xyzw
                dcl_temps 22
                
                #line 100 "F:\1VS PROJECT\3D\Noise 3D-DX11 - (9)\RenderWindow\Main.fx"
                ine r0.x, l(0, 0, 0, 0), cb0[134].w
                not r0.y, r0.x
                ine r0.z, l(0, 0, 0, 0), cb2[654].w
                not r0.w, r0.z
                and r0.y, r0.w, r0.y
                if_nz r0.y
                  mov o0.xyzw, v1.xyzw  // PS0<0,1,2,3>
                  ret 
                endif 
                
                #line 106
                dp3 r0.y, v3.xyzx, v3.xyzx
                rsq r0.y, r0.y
                mul r1.xyz, r0.yyyy, v3.xyzx  // input<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                
                #line 109
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[135].xyzx  // Vec_ToCam<0:Inf,1:Inf,2:Inf>
                
                #line 112
                mov r3.xyzw, l(0,0,0,0)  // outAmbient<0: -0f,1: -0f,2: -0f,3: -0f>
                
                #line 118
                if_nz r0.x
                  mov r0.x, l(0)  // i<0: 0>
                  mov r4.xyzw, r3.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r5.xyzw, r3.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r6.xyzw, r3.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                  mov r0.y, r0.x  // i<0>
                  loop 
                    ilt r0.w, r0.y, cb0[134].x
                    breakc_z r0.w
                    nop 
                    mov r7.xyz, cb1[0].xyzx  // Mat<0,1,2>
                    mov r8.xyz, cb1[1].xyzx  // Mat<4,5,6>
                    mov r0.w, cb1[0].w  // Mat<3>
                    mov r9.xyz, cb1[2].xyzx  // Mat<8,9,10>
                    imul null, r1.w, r0.y, l(4)
                    mov r10.xyz, cb0[r1.w + 4].xyzx  // Light<0,1,2>
                    mov r11.xyz, cb0[r1.w + 5].xyzx  // Light<4,5,6>
                    mov r12.xyz, cb0[r1.w + 6].xyzx  // Light<8,9,10>
                    mov r13.xyz, cb0[r1.w + 7].xyzx  // Light<12,13,14>
                    mov r2.w, cb0[r1.w + 4].w  // Light<3>
                    mov r1.w, cb0[r1.w + 5].w  // Light<7>
                    mov r14.xyz, r1.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r15.xyz, r2.xyzx  // Vec_toEye<0:Inf,1:Inf,2:Inf>
                
                #line 49 "Lighting.fx"
                    mul r7.xyz, r7.xyzx, r10.xyzx  // outAmbient<0:Inf,1:Inf,2:Inf>
                    mov r7.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 52
                    dp3 r8.w, r13.xyzx, r13.xyzx
                    rsq r8.w, r8.w
                    mul r10.xyz, r8.wwww, r13.xyzx  // LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 55
                    mov r13.xyz, -r10.xyzx
                    dp3 r8.w, r13.xyzx, r14.xyzx
                    mul r1.w, r1.w, r8.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 59
                    lt r8.w, l(0.000000), r1.w
                
                #line 62
                    mul r11.xyz, r8.xyzx, r11.xyzx
                    mov r11.w, l(1.000000)
                    mul r11.xyzw, r1.wwww, r11.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 65
                    dp3 r1.w, r10.xyzx, r14.xyzx
                    add r1.w, r1.w, r1.w
                    mov r1.w, -r1.w
                    mul r8.xyz, r1.wwww, r14.xyzx
                    add r8.xyz, r10.xyzx, r8.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    dp3 r1.w, r15.xyzx, r15.xyzx
                    rsq r1.w, r1.w
                    mul r10.xyz, r1.wwww, r15.xyzx  // Vec_toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 71
                    dp3 r1.w, r8.xyzx, r10.xyzx
                    max r1.w, r1.w, l(0.000000)
                    itof r0.w, r0.w
                    log r1.w, r1.w
                    mul r0.w, r0.w, r1.w
                    exp r0.w, r0.w
                    mul r0.w, r0.w, r2.w  // SpecFactor<0:NaN:Inf>
                
                #line 74
                    mul r8.xyz, r9.xyzx, r12.xyzx
                    mul r9.xyz, r0.wwww, r8.xyzx  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.w, l(0)  // outSpec<3: 0f>
                
                #line 59
                    movc r10.xyzw, r8.wwww, r11.xyzw, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r8.xyzw, r8.wwww, r9.xyzw, l(0,0,0,0)  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 122 "F:\1VS PROJECT\3D\Noise 3D-DX11 - (9)\RenderWindow\Main.fx"
                    mov r7.xyzw, r7.xyzw  // tmpA<0:Inf,1:Inf,2:Inf,3: 1f>
                    mov r10.xyzw, r10.xyzw  // tmpD<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mov r8.xyzw, r8.xyzw  // tmpS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                    add r4.xyzw, r4.xyzw, r7.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>
                    add r5.xyzw, r5.xyzw, r10.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r6.xyzw, r6.xyzw, r8.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 120
                    iadd r0.y, r0.y, l(1)  // i<0>
                  endloop 
                
                #line 125
                  mov r3.xyzw, r4.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r7.xyzw, r5.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r8.xyzw, r6.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                  mov r0.y, r0.x  // i<0>
                  loop 
                    ilt r0.w, r0.y, cb0[134].y
                    breakc_z r0.w
                    nop 
                    mov r9.xyz, cb1[0].xyzx  // Mat<0,1,2>
                    mov r10.xyz, cb1[1].xyzx  // Mat<4,5,6>
                    mov r0.w, cb1[0].w  // Mat<3>
                    mov r11.xyz, cb1[2].xyzx  // Mat<8,9,10>
                    imul null, r1.w, r0.y, l(4)
                    mov r12.xyz, cb0[r1.w + 44].xyzx  // Light<0,1,2>
                    mov r13.xyz, cb0[r1.w + 45].xyzx  // Light<4,5,6>
                    mov r14.xyz, cb0[r1.w + 46].xyzx  // Light<8,9,10>
                    mov r15.xyz, cb0[r1.w + 47].xyzx  // Light<12,13,14>
                    mov r2.w, cb0[r1.w + 44].w  // Light<3>
                    mov r9.w, cb0[r1.w + 45].w  // Light<7>
                    mov r10.w, cb0[r1.w + 46].w  // Light<11>
                    mov r1.w, cb0[r1.w + 47].w  // Light<15>
                    mov r16.xyz, r1.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r17.xyz, r2.xyzx  // Vec_toEye<0:Inf,1:Inf,2:Inf>
                    mov r18.xyz, v2.xyzx  // thisPoint<0,1,2>
                
                #line 88 "Lighting.fx"
                    mul r12.xyz, r9.xyzx, r12.xyzx  // outAmbient<0:Inf,1:Inf,2:Inf>
                    mov r12.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 91
                    mov r9.xyz, -r15.xyzx
                    add r9.xyz, r9.xyzx, r18.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                    dp3 r11.w, r9.xyzx, r9.xyzx
                    rsq r13.w, r11.w
                    mul r9.xyz, r9.xyzx, r13.wwww  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 95
                    sqrt r11.w, r11.w  // disFromLight<0:NaN:Inf>
                    mul r10.w, r10.w, r11.w
                    mul r10.w, r11.w, r10.w
                    add r10.w, r10.w, l(1.000000)
                    div r10.w, l(1.000000), r10.w  // Attenuation<0:NaN:Inf>
                
                #line 100
                    lt r9.w, r9.w, r11.w
                
                #line 106
                    if_z r9.w
                      mov r15.xyz, -r9.xyzx
                      dp3 r9.w, r15.xyzx, r16.xyzx
                      mul r1.w, r1.w, r9.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 110
                      lt r9.w, l(0.000000), r1.w
                
                #line 113
                      mul r1.w, r1.w, r10.w
                      mul r13.xyz, r10.xyzx, r13.xyzx
                      mov r13.w, l(1.000000)
                      mul r13.xyzw, r1.wwww, r13.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 116
                      dp3 r1.w, r9.xyzx, r16.xyzx
                      add r1.w, r1.w, r1.w
                      mov r1.w, -r1.w
                      mul r10.xyz, r1.wwww, r16.xyzx
                      add r9.xyz, r9.xyzx, r10.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119
                      dp3 r1.w, r17.xyzx, r17.xyzx
                      rsq r1.w, r1.w
                      mul r10.xyz, r1.wwww, r17.xyzx  // Vec_toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 123
                      dp3 r1.w, r9.xyzx, r10.xyzx
                      max r1.w, r1.w, l(0.000000)
                      itof r0.w, r0.w
                      log r1.w, r1.w
                      mul r0.w, r0.w, r1.w
                      exp r0.w, r0.w
                      mul r0.w, r0.w, r2.w  // SpecFactor<0:NaN:Inf>
                
                #line 126
                      mul r0.w, r0.w, r10.w
                      mul r9.xyz, r11.xyzx, r14.xyzx
                      mul r10.xyz, r0.wwww, r9.xyzx  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r10.w, l(0)  // outSpec<3: 0f>
                
                #line 110
                      movc r11.xyzw, r9.wwww, r13.xyzw, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      movc r9.xyzw, r9.wwww, r10.xyzw, l(0,0,0,0)  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 106
                    else 
                      mov r11.xyzw, l(0,0,0,0)  // outDiffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                      mov r9.xyzw, l(0,0,0,0)  // outSpec<0: 0f,1: 0f,2: 0f,3: 0f>
                    endif 
                
                #line 127 "F:\1VS PROJECT\3D\Noise 3D-DX11 - (9)\RenderWindow\Main.fx"
                    mov r12.xyzw, r12.xyzw  // tmpA<0:Inf,1:Inf,2:Inf,3: 1f>
                    mov r11.xyzw, r11.xyzw  // tmpD<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mov r9.xyzw, r9.xyzw  // tmpS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                    add r3.xyzw, r3.xyzw, r12.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>
                    add r7.xyzw, r7.xyzw, r11.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r8.xyzw, r8.xyzw, r9.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 125
                    iadd r0.y, r0.y, l(1)  // i<0>
                  endloop 
                
                #line 130
                  mov r4.xyzw, r3.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r5.xyzw, r7.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r6.xyzw, r8.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                  mov r0.y, r0.x  // i<0>
                  loop 
                    ilt r0.w, r0.y, cb0[134].z
                    breakc_z r0.w
                    nop 
                    mov r9.xyz, cb1[0].xyzx  // Mat<0,1,2>
                    mov r10.xyz, cb1[1].xyzx  // Mat<4,5,6>
                    mov r0.w, cb1[0].w  // Mat<3>
                    mov r11.xyz, cb1[2].xyzx  // Mat<8,9,10>
                    imul null, r1.w, r0.y, l(5)
                    mov r12.xyz, cb0[r1.w + 84].xyzx  // Light<0,1,2>
                    mov r13.xyz, cb0[r1.w + 85].xyzx  // Light<4,5,6>
                    mov r14.xyz, cb0[r1.w + 86].xyzx  // Light<8,9,10>
                    mov r15.xyz, cb0[r1.w + 87].xyzx  // Light<12,13,14>
                    mov r16.xyz, cb0[r1.w + 88].xyzx  // Light<16,17,18>
                    mov r2.w, cb0[r1.w + 84].w  // Light<3>
                    mov r9.w, cb0[r1.w + 85].w  // Light<7>
                    mov r10.w, cb0[r1.w + 86].w  // Light<11>
                    mov r11.w, cb0[r1.w + 87].w  // Light<15>
                    mov r1.w, cb0[r1.w + 88].w  // Light<19>
                    mov r17.xyz, r1.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r18.xyz, r2.xyzx  // Vec_toEye<0:Inf,1:Inf,2:Inf>
                    mov r19.xyz, v2.xyzx  // thisPoint<0,1,2>
                
                #line 139 "Lighting.fx"
                    mul r12.xyz, r9.xyzx, r12.xyzx  // outAmbient<0:Inf,1:Inf,2:Inf>
                    mov r12.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 142
                    mov r9.xyz, -r16.xyzx
                    add r16.xyz, r9.xyzx, r19.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                    dp3 r13.w, r16.xyzx, r16.xyzx
                    rsq r14.w, r13.w
                    mul r16.xyz, r14.wwww, r16.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                    sqrt r13.w, r13.w  // disFromLight<0:NaN:Inf>
                    mul r10.w, r10.w, r13.w
                    mul r10.w, r13.w, r10.w
                    add r10.w, r10.w, l(1.000000)
                    div r10.w, l(1.000000), r10.w  // Attenuation<0:NaN:Inf>
                
                #line 151
                    add r9.xyz, r9.xyzx, r15.xyzx
                    dp3 r14.w, r9.xyzx, r9.xyzx
                    rsq r14.w, r14.w
                    mul r9.xyz, r9.xyzx, r14.wwww
                    dp3 r9.x, r16.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                
                #line 154
                    lt r9.y, r9.w, r13.w
                    sincos null, r9.z, r11.w
                    lt r9.x, r9.x, r9.z
                    or r9.x, r9.x, r9.y
                
                #line 160
                    if_z r9.x
                      mov r9.xyz, -r16.xyzx
                      dp3 r9.x, r9.xyzx, r17.xyzx
                      mul r1.w, r1.w, r9.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 164
                      lt r9.x, l(0.000000), r1.w
                
                #line 167
                      mul r1.w, r1.w, r10.w
                      mul r13.xyz, r10.xyzx, r13.xyzx
                      mov r13.w, l(1.000000)
                      mul r13.xyzw, r1.wwww, r13.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 170
                      dp3 r1.w, r16.xyzx, r17.xyzx
                      add r1.w, r1.w, r1.w
                      mov r1.w, -r1.w
                      mul r9.yzw, r1.wwww, r17.xxyz
                      add r9.yzw, r16.xxyz, r9.yyzw  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 173
                      dp3 r1.w, r18.xyzx, r18.xyzx
                      rsq r1.w, r1.w
                      mul r10.xyz, r1.wwww, r18.xyzx  // Vec_toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 176
                      dp3 r1.w, r9.yzwy, r10.xyzx
                      max r1.w, r1.w, l(0.000000)
                      itof r0.w, r0.w
                      log r1.w, r1.w
                      mul r0.w, r0.w, r1.w
                      exp r0.w, r0.w
                      mul r0.w, r0.w, r2.w  // SpecFactor<0:NaN:Inf>
                
                #line 179
                      mul r0.w, r0.w, r10.w
                      mul r9.yzw, r11.xxyz, r14.xxyz
                      mul r10.xyz, r0.wwww, r9.yzwy  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r10.w, l(0)  // outSpec<3: 0f>
                
                #line 164
                      movc r11.xyzw, r9.xxxx, r13.xyzw, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      movc r9.xyzw, r9.xxxx, r10.xyzw, l(0,0,0,0)  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 160
                    else 
                      mov r11.xyzw, l(0,0,0,0)  // outDiffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                      mov r9.xyzw, l(0,0,0,0)  // outSpec<0: 0f,1: 0f,2: 0f,3: 0f>
                    endif 
                
                #line 132 "F:\1VS PROJECT\3D\Noise 3D-DX11 - (9)\RenderWindow\Main.fx"
                    mov r12.xyzw, r12.xyzw  // tmpA<0:Inf,1:Inf,2:Inf,3: 1f>
                    mov r11.xyzw, r11.xyzw  // tmpD<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mov r9.xyzw, r9.xyzw  // tmpS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                    add r4.xyzw, r4.xyzw, r12.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>
                    add r5.xyzw, r5.xyzw, r11.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r6.xyzw, r6.xyzw, r9.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 130
                    iadd r0.y, r0.y, l(1)  // i<0>
                  endloop 
                
                #line 118
                else 
                  mov r4.xyzw, l(0,0,0,0)  // outAmbient<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r5.xyzw, l(0,0,0,0)  // outDiffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                  mov r6.xyzw, l(0,0,0,0)  // outSpecular<0: 0f,1: 0f,2: 0f,3: 0f>
                endif 
                
                #line 138
                if_nz r0.z
                  mov r0.x, l(0)  // i<0: 0>
                  mov r3.xyzw, r4.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r7.xyzw, r5.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r8.xyzw, r6.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                  mov r0.y, r0.x  // i<0>
                  loop 
                    ilt r0.z, r0.y, cb2[654].x
                    breakc_z r0.z
                    nop 
                    mov r9.xyz, cb1[0].xyzx  // Mat<0,1,2>
                    mov r10.xyz, cb1[1].xyzx  // Mat<4,5,6>
                    mov r0.z, cb1[0].w  // Mat<3>
                    mov r11.xyz, cb1[2].xyzx  // Mat<8,9,10>
                    imul null, r0.w, r0.y, l(4)
                    mov r12.xyz, cb2[r0.w + 4].xyzx  // Light<0,1,2>
                    mov r13.xyz, cb2[r0.w + 5].xyzx  // Light<4,5,6>
                    mov r14.xyz, cb2[r0.w + 6].xyzx  // Light<8,9,10>
                    mov r15.xyz, cb2[r0.w + 7].xyzx  // Light<12,13,14>
                    mov r1.w, cb2[r0.w + 4].w  // Light<3>
                    mov r0.w, cb2[r0.w + 5].w  // Light<7>
                    mov r16.xyz, r1.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r17.xyz, r2.xyzx  // Vec_toEye<0:Inf,1:Inf,2:Inf>
                
                #line 49 "Lighting.fx"
                    mul r9.xyz, r9.xyzx, r12.xyzx  // outAmbient<0:Inf,1:Inf,2:Inf>
                    mov r9.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 52
                    dp3 r2.w, r15.xyzx, r15.xyzx
                    rsq r2.w, r2.w
                    mul r12.xyz, r2.wwww, r15.xyzx  // LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 55
                    mov r15.xyz, -r12.xyzx
                    dp3 r2.w, r15.xyzx, r16.xyzx
                    mul r0.w, r0.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 59
                    lt r2.w, l(0.000000), r0.w
                
                #line 62
                    mul r10.xyz, r10.xyzx, r13.xyzx
                    mov r10.w, l(1.000000)
                    mul r10.xyzw, r0.wwww, r10.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 65
                    dp3 r0.w, r12.xyzx, r16.xyzx
                    add r0.w, r0.w, r0.w
                    mov r0.w, -r0.w
                    mul r13.xyz, r0.wwww, r16.xyzx
                    add r12.xyz, r12.xyzx, r13.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    dp3 r0.w, r17.xyzx, r17.xyzx
                    rsq r0.w, r0.w
                    mul r13.xyz, r0.wwww, r17.xyzx  // Vec_toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 71
                    dp3 r0.w, r12.xyzx, r13.xyzx
                    max r0.w, r0.w, l(0.000000)
                    itof r0.z, r0.z
                    log r0.w, r0.w
                    mul r0.z, r0.w, r0.z
                    exp r0.z, r0.z
                    mul r0.z, r0.z, r1.w  // SpecFactor<0:NaN:Inf>
                
                #line 74
                    mul r11.xyz, r11.xyzx, r14.xyzx
                    mul r11.xyz, r0.zzzz, r11.xyzx  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.w, l(0)  // outSpec<3: 0f>
                
                #line 59
                    movc r10.xyzw, r2.wwww, r10.xyzw, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r11.xyzw, r2.wwww, r11.xyzw, l(0,0,0,0)  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 142 "F:\1VS PROJECT\3D\Noise 3D-DX11 - (9)\RenderWindow\Main.fx"
                    mov r9.xyzw, r9.xyzw  // tmpA<0:Inf,1:Inf,2:Inf,3: 1f>
                    mov r10.xyzw, r10.xyzw  // tmpD<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mov r11.xyzw, r11.xyzw  // tmpS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                    add r3.xyzw, r3.xyzw, r9.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>
                    add r7.xyzw, r7.xyzw, r10.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r8.xyzw, r8.xyzw, r11.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 140
                    iadd r0.y, r0.y, l(1)  // i<0>
                  endloop 
                
                #line 145
                  mov r9.xyzw, r3.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r10.xyzw, r7.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r11.xyzw, r8.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                  mov r0.y, r0.x  // i<0>
                  loop 
                    ilt r0.z, r0.y, cb2[654].y
                    breakc_z r0.z
                    nop 
                    mov r12.xyz, cb1[0].xyzx  // Mat<0,1,2>
                    mov r13.xyz, cb1[1].xyzx  // Mat<4,5,6>
                    mov r0.z, cb1[0].w  // Mat<3>
                    mov r14.xyz, cb1[2].xyzx  // Mat<8,9,10>
                    imul null, r0.w, r0.y, l(4)
                    mov r15.xyz, cb2[r0.w + 204].xyzx  // Light<0,1,2>
                    mov r16.xyz, cb2[r0.w + 205].xyzx  // Light<4,5,6>
                    mov r17.xyz, cb2[r0.w + 206].xyzx  // Light<8,9,10>
                    mov r18.xyz, cb2[r0.w + 207].xyzx  // Light<12,13,14>
                    mov r1.w, cb2[r0.w + 204].w  // Light<3>
                    mov r2.w, cb2[r0.w + 205].w  // Light<7>
                    mov r12.w, cb2[r0.w + 206].w  // Light<11>
                    mov r0.w, cb2[r0.w + 207].w  // Light<15>
                    mov r19.xyz, r1.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r20.xyz, r2.xyzx  // Vec_toEye<0:Inf,1:Inf,2:Inf>
                    mov r21.xyz, v2.xyzx  // thisPoint<0,1,2>
                
                #line 88 "Lighting.fx"
                    mul r15.xyz, r12.xyzx, r15.xyzx  // outAmbient<0:Inf,1:Inf,2:Inf>
                    mov r15.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 91
                    mov r12.xyz, -r18.xyzx
                    add r12.xyz, r12.xyzx, r21.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                    dp3 r13.w, r12.xyzx, r12.xyzx
                    rsq r14.w, r13.w
                    mul r12.xyz, r12.xyzx, r14.wwww  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 95
                    sqrt r13.w, r13.w  // disFromLight<0:NaN:Inf>
                    mul r12.w, r12.w, r13.w
                    mul r12.w, r13.w, r12.w
                    add r12.w, r12.w, l(1.000000)
                    div r12.w, l(1.000000), r12.w  // Attenuation<0:NaN:Inf>
                
                #line 100
                    lt r2.w, r2.w, r13.w
                
                #line 106
                    if_z r2.w
                      mov r18.xyz, -r12.xyzx
                      dp3 r2.w, r18.xyzx, r19.xyzx
                      mul r0.w, r0.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 110
                      lt r2.w, l(0.000000), r0.w
                
                #line 113
                      mul r0.w, r0.w, r12.w
                      mul r13.xyz, r13.xyzx, r16.xyzx
                      mov r13.w, l(1.000000)
                      mul r13.xyzw, r0.wwww, r13.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 116
                      dp3 r0.w, r12.xyzx, r19.xyzx
                      add r0.w, r0.w, r0.w
                      mov r0.w, -r0.w
                      mul r16.xyz, r0.wwww, r19.xyzx
                      add r12.xyz, r12.xyzx, r16.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 119
                      dp3 r0.w, r20.xyzx, r20.xyzx
                      rsq r0.w, r0.w
                      mul r16.xyz, r0.wwww, r20.xyzx  // Vec_toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 123
                      dp3 r0.w, r12.xyzx, r16.xyzx
                      max r0.w, r0.w, l(0.000000)
                      itof r0.z, r0.z
                      log r0.w, r0.w
                      mul r0.z, r0.w, r0.z
                      exp r0.z, r0.z
                      mul r0.z, r0.z, r1.w  // SpecFactor<0:NaN:Inf>
                
                #line 126
                      mul r0.z, r0.z, r12.w
                      mul r12.xyz, r14.xyzx, r17.xyzx
                      mul r12.xyz, r0.zzzz, r12.xyzx  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r12.w, l(0)  // outSpec<3: 0f>
                
                #line 110
                      movc r13.xyzw, r2.wwww, r13.xyzw, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      movc r12.xyzw, r2.wwww, r12.xyzw, l(0,0,0,0)  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 106
                    else 
                      mov r13.xyzw, l(0,0,0,0)  // outDiffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                      mov r12.xyzw, l(0,0,0,0)  // outSpec<0: 0f,1: 0f,2: 0f,3: 0f>
                    endif 
                
                #line 147 "F:\1VS PROJECT\3D\Noise 3D-DX11 - (9)\RenderWindow\Main.fx"
                    mov r15.xyzw, r15.xyzw  // tmpA<0:Inf,1:Inf,2:Inf,3: 1f>
                    mov r13.xyzw, r13.xyzw  // tmpD<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mov r12.xyzw, r12.xyzw  // tmpS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                    add r9.xyzw, r9.xyzw, r15.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>
                    add r10.xyzw, r10.xyzw, r13.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r11.xyzw, r11.xyzw, r12.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 145
                    iadd r0.y, r0.y, l(1)  // i<0>
                  endloop 
                
                #line 150
                  mov r4.xyzw, r9.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r5.xyzw, r10.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r6.xyzw, r11.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                  mov r0.y, r0.x  // i<0>
                  loop 
                    ilt r0.z, r0.y, cb2[654].z
                    breakc_z r0.z
                    nop 
                    mov r3.xyz, cb1[0].xyzx  // Mat<0,1,2>
                    mov r7.xyz, cb1[1].xyzx  // Mat<4,5,6>
                    mov r0.z, cb1[0].w  // Mat<3>
                    mov r8.xyz, cb1[2].xyzx  // Mat<8,9,10>
                    imul null, r0.w, r0.y, l(5)
                    mov r12.xyz, cb2[r0.w + 404].xyzx  // Light<0,1,2>
                    mov r13.xyz, cb2[r0.w + 405].xyzx  // Light<4,5,6>
                    mov r14.xyz, cb2[r0.w + 406].xyzx  // Light<8,9,10>
                    mov r15.xyz, cb2[r0.w + 407].xyzx  // Light<12,13,14>
                    mov r16.xyz, cb2[r0.w + 408].xyzx  // Light<16,17,18>
                    mov r1.w, cb2[r0.w + 404].w  // Light<3>
                    mov r2.w, cb2[r0.w + 405].w  // Light<7>
                    mov r3.w, cb2[r0.w + 406].w  // Light<11>
                    mov r7.w, cb2[r0.w + 407].w  // Light<15>
                    mov r0.w, cb2[r0.w + 408].w  // Light<19>
                    mov r17.xyz, r1.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r18.xyz, r2.xyzx  // Vec_toEye<0:Inf,1:Inf,2:Inf>
                    mov r19.xyz, v2.xyzx  // thisPoint<0,1,2>
                
                #line 139 "Lighting.fx"
                    mul r12.xyz, r3.xyzx, r12.xyzx  // outAmbient<0:Inf,1:Inf,2:Inf>
                    mov r12.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 142
                    mov r3.xyz, -r16.xyzx
                    add r16.xyz, r3.xyzx, r19.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                    dp3 r8.w, r16.xyzx, r16.xyzx
                    rsq r13.w, r8.w
                    mul r16.xyz, r13.wwww, r16.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                    sqrt r8.w, r8.w  // disFromLight<0:NaN:Inf>
                    mul r3.w, r3.w, r8.w
                    mul r3.w, r8.w, r3.w
                    add r3.w, r3.w, l(1.000000)
                    div r3.w, l(1.000000), r3.w  // Attenuation<0:NaN:Inf>
                
                #line 151
                    add r3.xyz, r3.xyzx, r15.xyzx
                    dp3 r13.w, r3.xyzx, r3.xyzx
                    rsq r13.w, r13.w
                    mul r3.xyz, r3.xyzx, r13.wwww
                    dp3 r3.x, r16.xyzx, r3.xyzx  // Cos_Theta<0:NaN:Inf>
                
                #line 154
                    lt r2.w, r2.w, r8.w
                    sincos null, r3.y, r7.w
                    lt r3.x, r3.x, r3.y
                    or r2.w, r2.w, r3.x
                
                #line 160
                    if_z r2.w
                      mov r3.xyz, -r16.xyzx
                      dp3 r2.w, r3.xyzx, r17.xyzx
                      mul r0.w, r0.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 164
                      lt r2.w, l(0.000000), r0.w
                
                #line 167
                      mul r0.w, r0.w, r3.w
                      mul r7.xyz, r7.xyzx, r13.xyzx
                      mov r7.w, l(1.000000)
                      mul r7.xyzw, r0.wwww, r7.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 170
                      dp3 r0.w, r16.xyzx, r17.xyzx
                      add r0.w, r0.w, r0.w
                      mov r0.w, -r0.w
                      mul r3.xyz, r0.wwww, r17.xyzx
                      add r3.xyz, r16.xyzx, r3.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 173
                      dp3 r0.w, r18.xyzx, r18.xyzx
                      rsq r0.w, r0.w
                      mul r13.xyz, r0.wwww, r18.xyzx  // Vec_toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 176
                      dp3 r0.w, r3.xyzx, r13.xyzx
                      max r0.w, r0.w, l(0.000000)
                      itof r0.z, r0.z
                      log r0.w, r0.w
                      mul r0.z, r0.w, r0.z
                      exp r0.z, r0.z
                      mul r0.z, r0.z, r1.w  // SpecFactor<0:NaN:Inf>
                
                #line 179
                      mul r0.z, r0.z, r3.w
                      mul r3.xyz, r8.xyzx, r14.xyzx
                      mul r3.xyz, r0.zzzz, r3.xyzx  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r3.w, l(0)  // outSpec<3: 0f>
                
                #line 164
                      movc r7.xyzw, r2.wwww, r7.xyzw, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      movc r3.xyzw, r2.wwww, r3.xyzw, l(0,0,0,0)  // outSpec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 160
                    else 
                      mov r7.xyzw, l(0,0,0,0)  // outDiffuse<0: 0f,1: 0f,2: 0f,3: 0f>
                      mov r3.xyzw, l(0,0,0,0)  // outSpec<0: 0f,1: 0f,2: 0f,3: 0f>
                    endif 
                
                #line 152 "F:\1VS PROJECT\3D\Noise 3D-DX11 - (9)\RenderWindow\Main.fx"
                    mov r12.xyzw, r12.xyzw  // tmpA<0:Inf,1:Inf,2:Inf,3: 1f>
                    mov r7.xyzw, r7.xyzw  // tmpD<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mov r3.xyzw, r3.xyzw  // tmpS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                    add r4.xyzw, r4.xyzw, r12.xyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:Inf>
                    add r5.xyzw, r5.xyzw, r7.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r6.xyzw, r3.xyzw, r6.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 0f>
                
                #line 150
                    iadd r0.y, r0.y, l(1)  // i<0>
                  endloop 
                
                #line 138
                endif 
                
                #line 157
                add r0.xyzw, r4.xyzw, r5.xyzw
                add r0.xyzw, r6.xyzw, r0.xyzw  // finalColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                max r0.xyzw, r0.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
                min r0.xyzw, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // finalColor<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
                mov o0.xyzw, r0.xyzw  // PS0<0:[0f,1f],1:[0f,1f],2:[0f,1f],3:[0f,1f]>
                ret 
                // Approximately 489 instruction slots used
                            
            };
        }

    }

}

