//
// FX Version: fx_5_0
//
// 6 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorldMatrix;              // Offset:    0, size:   64
    float4x4 gWorldInvTransposeMatrix;  // Offset:   64, size:   64
}

cbuffer cbPerFrame
{
    float4x4 gProjMatrix;               // Offset:    0, size:   64
    float4x4 gViewMatrix;               // Offset:   64, size:   64
    N_DirectionalLight gDirectionalLight_Dynamic[10];// Offset:  128, size:  640
    N_PointLight gPointLight_Dynamic[10];// Offset:  768, size:  640
    N_SpotLight gSpotLight_Dynamic[10]; // Offset: 1408, size:  800
    int     gDirectionalLightCount_Dynamic;// Offset: 2208, size:    4
    int     gPointLightCount_Dynamic;   // Offset: 2212, size:    4
    int     gSpotLightCount_Dynamic;    // Offset: 2216, size:    4
    int     gIsLightingEnabled_Dynamic; // Offset: 2220, size:    4
    float3  gCamPos;                    // Offset: 2224, size:   12
    float   mPad1;                      // Offset: 2236, size:    4
}

cbuffer cbPerSubset
{
    N_Material_Basic gMaterial;         // Offset:    0, size:   48
    int     gIsDiffuseMapValid;         // Offset:   48, size:    4
    int     gIsNormalMapValid;          // Offset:   52, size:    4
    int     gIsSpecularMapValid;        // Offset:   56, size:    4
    int     mPad2;                      // Offset:   60, size:    4
}

cbuffer cbRarely
{
    N_DirectionalLight gDirectionalLight_Static[50];// Offset:    0, size: 3200
    N_PointLight gPointLight_Static[50];// Offset: 3200, size: 3200
    N_SpotLight gSpotLight_Static[50];  // Offset: 6400, size: 4000
    int     gDirectionalLightCount_Static;// Offset: 10400, size:    4
    int     gPointLightCount_Static;    // Offset: 10404, size:    4
    int     gSpotLightCount_Static;     // Offset: 10408, size:    4
    int     gIsLightingEnabled_Static;  // Offset: 10412, size:    4
}

cbuffer cbSolid3D
{
    float4x4 gProjMatrix_Line3D;        // Offset:    0, size:   64
    float4x4 gViewMatrix_Line3D;        // Offset:   64, size:   64
}

cbuffer cbAtmosphere
{
    float3  gFogColor3;                 // Offset:    0, size:   12
    int     gFogEnabled;                // Offset:   12, size:    4
    float   gFogNear;                   // Offset:   16, size:    4
    float   gFogFar;                    // Offset:   20, size:    4
    float   gPad1;                      // Offset:   24, size:    4
    float   gPad2;                      // Offset:   28, size:    4
}

//
// 6 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gNormalMap;
Texture2D gSpecularMap;
SamplerState sampler_ANISOTROPIC
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
};
SamplerState sampler2D_ANISOTROPIC
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(2);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
};
Texture2D g2D_DiffuseMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 4 technique(s)
    //
    technique11 DefaultDraw
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  128
                //       float mSpecularIntensity;      // Offset:  140
                //       float3 mDiffuseColor;          // Offset:  144
                //       float mDiffuseIntensity;       // Offset:  156
                //       float3 mSpecularColor;         // Offset:  160
                //       float mPad2;                   // Offset:  172
                //       float3 mDirection;             // Offset:  176
                //       float mPad3;                   // Offset:  188
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:  128 Size:   640 [unused]
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  768
                //       float mSpecularIntensity;      // Offset:  780
                //       float3 mDiffuseColor;          // Offset:  784
                //       float mLightingRange;          // Offset:  796
                //       float3 mSpecularColor;         // Offset:  800
                //       float mAttenuationFactor;      // Offset:  812
                //       float3 mPosition;              // Offset:  816
                //       float mDiffuseIntensity;       // Offset:  828
                //
                //   } gPointLight_Dynamic[10];         // Offset:  768 Size:   640 [unused]
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1408
                //       float mSpecularIntensity;      // Offset: 1420
                //       float3 mDiffuseColor;          // Offset: 1424
                //       float mLightingRange;          // Offset: 1436
                //       float3 mSpecularColor;         // Offset: 1440
                //       float mAttenuationFactor;      // Offset: 1452
                //       float3 mLitAt;                 // Offset: 1456
                //       float mLightingAngle;          // Offset: 1468
                //       float3 mPosition;              // Offset: 1472
                //       float mDiffuseIntensity;       // Offset: 1484
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1408 Size:   800 [unused]
                //   int gDirectionalLightCount_Dynamic;// Offset: 2208 Size:     4 [unused]
                //   int gPointLightCount_Dynamic;      // Offset: 2212 Size:     4 [unused]
                //   int gSpotLightCount_Dynamic;       // Offset: 2216 Size:     4 [unused]
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2220 Size:     4 [unused]
                //   float3 gCamPos;                    // Offset: 2224 Size:    12 [unused]
                //   float mPad1;                       // Offset: 2236 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                
                #line 19 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                mov o0.xyzw, r1.xyzw  // VS_DefaultDraw<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DefaultDraw<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DefaultDraw<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DefaultDraw<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DefaultDraw<14,15>
                ret 
                // Approximately 30 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  128
                //       float mSpecularIntensity;      // Offset:  140
                //       float3 mDiffuseColor;          // Offset:  144
                //       float mDiffuseIntensity;       // Offset:  156
                //       float3 mSpecularColor;         // Offset:  160
                //       float mPad2;                   // Offset:  172
                //       float3 mDirection;             // Offset:  176
                //       float mPad3;                   // Offset:  188
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:  128 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  768
                //       float mSpecularIntensity;      // Offset:  780
                //       float3 mDiffuseColor;          // Offset:  784
                //       float mLightingRange;          // Offset:  796
                //       float3 mSpecularColor;         // Offset:  800
                //       float mAttenuationFactor;      // Offset:  812
                //       float3 mPosition;              // Offset:  816
                //       float mDiffuseIntensity;       // Offset:  828
                //
                //   } gPointLight_Dynamic[10];         // Offset:  768 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1408
                //       float mSpecularIntensity;      // Offset: 1420
                //       float3 mDiffuseColor;          // Offset: 1424
                //       float mLightingRange;          // Offset: 1436
                //       float3 mSpecularColor;         // Offset: 1440
                //       float mAttenuationFactor;      // Offset: 1452
                //       float3 mLitAt;                 // Offset: 1456
                //       float mLightingAngle;          // Offset: 1468
                //       float3 mPosition;              // Offset: 1472
                //       float mDiffuseIntensity;       // Offset: 1484
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1408 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2208 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2212 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2216 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2220 Size:     4
                //   float3 gCamPos;                    // Offset: 2224 Size:    12
                //   float mPad1;                       // Offset: 2236 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mPad1;                   // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //
                //   } gMaterial;                       // Offset:    0 Size:    48
                //   int gIsDiffuseMapValid;            // Offset:   48 Size:     4
                //   int gIsNormalMapValid;             // Offset:   52 Size:     4 [unused]
                //   int gIsSpecularMapValid;           // Offset:   56 Size:     4 [unused]
                //   int mPad2;                         // Offset:   60 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbRarely
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Static[50];    // Offset:    0 Size:  3200
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 3200
                //       float mSpecularIntensity;      // Offset: 3212
                //       float3 mDiffuseColor;          // Offset: 3216
                //       float mLightingRange;          // Offset: 3228
                //       float3 mSpecularColor;         // Offset: 3232
                //       float mAttenuationFactor;      // Offset: 3244
                //       float3 mPosition;              // Offset: 3248
                //       float mDiffuseIntensity;       // Offset: 3260
                //
                //   } gPointLight_Static[50];          // Offset: 3200 Size:  3200
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 6400
                //       float mSpecularIntensity;      // Offset: 6412
                //       float3 mDiffuseColor;          // Offset: 6416
                //       float mLightingRange;          // Offset: 6428
                //       float3 mSpecularColor;         // Offset: 6432
                //       float mAttenuationFactor;      // Offset: 6444
                //       float3 mLitAt;                 // Offset: 6448
                //       float mLightingAngle;          // Offset: 6460
                //       float3 mPosition;              // Offset: 6464
                //       float mDiffuseIntensity;       // Offset: 6476
                //
                //   } gSpotLight_Static[50];           // Offset: 6400 Size:  4000
                //   int gDirectionalLightCount_Static; // Offset: 10400 Size:     4
                //   int gPointLightCount_Static;       // Offset: 10404 Size:     4
                //   int gSpotLightCount_Static;        // Offset: 10408 Size:     4
                //   int gIsLightingEnabled_Static;     // Offset: 10412 Size:     4
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gPad1;                       // Offset:   24 Size:     4 [unused]
                //   float gPad2;                       // Offset:   28 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // sampler_ANISOTROPIC               sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerSubset                       cbuffer      NA          NA    1        1
                // cbRarely                          cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[140], dynamicIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[651], dynamicIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 15
                
                #line 35 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                mov r0.xyzw, l(0,0,0,0)  // finalColor4<0: 0f,1: 0f,2: 0f,3: 0f>
                
                #line 39
                ine r1.x, l(0, 0, 0, 0), cb0[138].w
                not r1.y, r1.x
                ine r1.z, l(0, 0, 0, 0), cb2[650].w
                not r1.w, r1.z
                and r1.y, r1.w, r1.y
                if_nz r1.y
                  mov o0.xyzw, v1.xyzw  // PS_DefaultDraw<0,1,2,3>
                  ret 
                endif 
                
                #line 45
                dp3 r1.y, v3.xyzx, v3.xyzx
                rsq r1.y, r1.y
                mul r2.xyz, r1.yyyy, v3.xyzx  // input<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                
                #line 48
                mov r3.xyz, -v2.xyzx
                add r3.xyz, r3.xyzx, cb0[139].xyzx  // Vec_ToCam<0:Inf,1:Inf,2:Inf>
                
                #line 53
                dp3 r1.y, r3.xyzx, r3.xyzx
                sqrt r1.y, r1.y  // Dist_CurrPointToCam<0:NaN:Inf>
                ieq r1.w, cb3[0].w, l(1)
                lt r2.w, cb3[1].y, r1.y
                and r1.w, r1.w, r2.w
                if_nz r1.w
                  mov o0.xyz, cb3[0].xyzx  // PS_DefaultDraw<0,1,2>
                  mov o0.w, l(1.000000)  // PS_DefaultDraw<3: 1f>
                  ret 
                endif 
                
                #line 62
                if_nz r1.x
                  mov r1.x, l(0)  // i<0: 0>
                  mov r4.xyzw, r0.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r1.w, r1.x  // i<0>
                  loop 
                    ilt r2.w, r1.w, cb0[138].x
                    breakc_z r2.w
                    nop 
                    imul null, r2.w, r1.w, l(4)
                    mov r5.xyz, cb0[r2.w + 8].xyzx  // Light<0,1,2>
                    mov r6.xyz, cb0[r2.w + 9].xyzx  // Light<4,5,6>
                    mov r7.xyz, cb0[r2.w + 10].xyzx  // Light<8,9,10>
                    mov r8.xyz, cb0[r2.w + 11].xyzx  // Light<12,13,14>
                    mov r3.w, cb0[r2.w + 8].w  // Light<3>
                    mov r2.w, cb0[r2.w + 9].w  // Light<7>
                    mov r9.xyz, r2.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r3.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                
                #line 213 "shading3D.fx"
                    dp3 r5.w, r8.xyzx, r8.xyzx
                    rsq r5.w, r5.w
                    mul r8.xyz, r5.wwww, r8.xyzx  // LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 216
                    mov r11.xyz, -r8.xyzx
                    dp3 r5.w, r11.xyzx, r9.xyzx
                    mul r2.w, r2.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 220
                    nop 
                
                #line 188
                    ine r5.w, l(0, 0, 0, 0), cb1[3].x
                    if_nz r5.w
                      sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                    else 
                
                #line 195
                      mov r11.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 188
                    endif 
                
                #line 220
                    mov r11.xyz, r11.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r2.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                    mov r3.w, r3.w  // lightSpecIntensity<0>
                    itof r5.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                    mov r12.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                    mov r5.xyz, r5.xyzx  // lightAmbientColor3<0,1,2>
                    mov r11.xyz, r11.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r6.xyz, r6.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r13.xyz, cb1[2].xyzx  // matSpecColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightSpecColor3<0,1,2>
                    mov r10.xyz, r10.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                    mov r8.xyz, r8.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 158
                    mul r5.xyz, r5.xyzx, r12.xyzx
                    mul r12.xyz, r11.xyzx, r5.xyzx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r12.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 163
                    lt r5.x, l(0.000000), r2.w
                
                #line 166
                    mul r2.w, r2.w, l(1.000000)
                    mul r6.xyz, r6.xyzx, r11.xyzx
                    mov r6.w, l(1.000000)
                    mul r6.xyzw, r2.wwww, r6.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 169
                    dp3 r2.w, r8.xyzx, r9.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r9.xyzx
                    add r8.xyz, r8.xyzx, r9.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 172
                    dp3 r2.w, r10.xyzx, r10.xyzx
                    rsq r2.w, r2.w
                    mul r9.xyz, r2.wwww, r10.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 175
                    dp3 r2.w, r8.xyzx, r9.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r2.w, r5.w
                    exp r2.w, r2.w
                    mul r2.w, r2.w, r3.w  // SpecFactor<0:NaN:Inf>
                
                #line 178
                    mul r2.w, r2.w, l(1.000000)
                    mul r7.xyz, r7.xyzx, r13.xyzx
                    mov r7.w, l(1.000000)
                    mul r7.xyzw, r2.wwww, r7.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 163
                    movc r6.xyzw, r5.xxxx, r6.xyzw, l(0,0,0,1.000000)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r5.xyzw, r5.xxxx, r7.xyzw, l(0,0,0,1.000000)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 222
                    mov r12.xyzw, r12.xyzw  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                    mov r6.xyzw, r6.xyzw  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mov r5.xyzw, r5.xyzw  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 230
                    add r6.xyzw, r6.xyzw, r12.xyzw
                    add r5.xyzw, r5.xyzw, r6.xyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 66 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                    mov r5.xyzw, r5.xyzw  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r4.xyzw, r4.xyzw, r5.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 64
                    iadd r1.w, r1.w, l(1)  // i<0>
                  endloop 
                
                #line 69
                  mov r0.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r1.w, r1.x  // i<0>
                  loop 
                    ilt r2.w, r1.w, cb0[138].y
                    breakc_z r2.w
                    nop 
                    imul null, r2.w, r1.w, l(4)
                    mov r5.xyz, cb0[r2.w + 48].xyzx  // Light<0,1,2>
                    mov r6.xyz, cb0[r2.w + 49].xyzx  // Light<4,5,6>
                    mov r7.xyz, cb0[r2.w + 50].xyzx  // Light<8,9,10>
                    mov r8.xyz, cb0[r2.w + 51].xyzx  // Light<12,13,14>
                    mov r3.w, cb0[r2.w + 48].w  // Light<3>
                    mov r5.w, cb0[r2.w + 49].w  // Light<7>
                    mov r6.w, cb0[r2.w + 50].w  // Light<11>
                    mov r2.w, cb0[r2.w + 51].w  // Light<15>
                    mov r9.xyz, r2.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r3.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                    mov r11.xyz, v2.xyzx  // thisPoint<0,1,2>
                
                #line 246 "shading3D.fx"
                    mov r8.xyz, -r8.xyzx
                    add r8.xyz, r8.xyzx, r11.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                    dp3 r7.w, r8.xyzx, r8.xyzx
                    rsq r8.w, r7.w
                    mul r8.xyz, r8.wwww, r8.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 250
                    sqrt r7.w, r7.w  // disFromLight<0:NaN:Inf>
                    mul r6.w, r6.w, r7.w
                    mul r6.w, r7.w, r6.w
                    add r6.w, r6.w, l(1.000000)
                    div r6.w, l(1.000000), r6.w  // Attenuation<0:NaN:Inf>
                
                #line 255
                    lt r5.w, r5.w, r7.w
                
                #line 262
                    if_z r5.w
                      mov r11.xyz, -r8.xyzx
                      dp3 r5.w, r11.xyzx, r9.xyzx
                      mul r2.w, r2.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 267
                      nop 
                
                #line 188
                      ine r5.w, l(0, 0, 0, 0), cb1[3].x
                      if_nz r5.w
                        sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                      else 
                
                #line 195
                        mov r11.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 188
                      endif 
                
                #line 267
                      mov r11.xyz, r11.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                
                #line 273
                      nop 
                      mov r2.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                      mov r3.w, r3.w  // lightSpecIntensity<0>
                      itof r5.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                      mov r6.w, r6.w  // Attenuation<0:NaN:Inf>
                      mov r12.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                      mov r5.xyz, r5.xyzx  // lightAmbientColor3<0,1,2>
                      mov r11.xyz, r11.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                      mov r6.xyz, r6.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r13.xyz, cb1[2].xyzx  // matSpecColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightSpecColor3<0,1,2>
                      mov r10.xyz, r10.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                      mov r8.xyz, r8.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r9.xyz, r9.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 158
                      mul r5.xyz, r5.xyzx, r12.xyzx
                      mul r12.xyz, r11.xyzx, r5.xyzx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r12.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 163
                      lt r5.x, l(0.000000), r2.w
                
                #line 166
                      mul r2.w, r2.w, r6.w
                      mul r11.xyz, r6.xyzx, r11.xyzx
                      mov r11.w, l(1.000000)
                      mul r11.xyzw, r2.wwww, r11.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 169
                      dp3 r2.w, r8.xyzx, r9.xyzx
                      add r2.w, r2.w, r2.w
                      mov r2.w, -r2.w
                      mul r6.xyz, r2.wwww, r9.xyzx
                      add r6.xyz, r8.xyzx, r6.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 172
                      dp3 r2.w, r10.xyzx, r10.xyzx
                      rsq r2.w, r2.w
                      mul r8.xyz, r2.wwww, r10.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 175
                      dp3 r2.w, r6.xyzx, r8.xyzx
                      max r2.w, r2.w, l(0.000000)
                      log r2.w, r2.w
                      mul r2.w, r2.w, r5.w
                      exp r2.w, r2.w
                      mul r2.w, r2.w, r3.w  // SpecFactor<0:NaN:Inf>
                
                #line 178
                      mul r2.w, r2.w, r6.w
                      mul r6.xyz, r7.xyzx, r13.xyzx
                      mov r6.w, l(1.000000)
                      mul r6.xyzw, r2.wwww, r6.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 163
                      movc r7.xyzw, r5.xxxx, r11.xyzw, l(0,0,0,1.000000)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      movc r5.xyzw, r5.xxxx, r6.xyzw, l(0,0,0,1.000000)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 273
                      mov r12.xyzw, r12.xyzw  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                      mov r7.xyzw, r7.xyzw  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      mov r5.xyzw, r5.xyzw  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 280
                      add r6.xyzw, r7.xyzw, r12.xyzw
                      add r5.xyzw, r5.xyzw, r6.xyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 262
                    else 
                      mov r5.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                    endif 
                
                #line 71 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                    mov r5.xyzw, r5.xyzw  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r0.xyzw, r0.xyzw, r5.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 69
                    iadd r1.w, r1.w, l(1)  // i<0>
                  endloop 
                
                #line 74
                  mov r4.xyzw, r0.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r1.w, r1.x  // i<0>
                  loop 
                    ilt r2.w, r1.w, cb0[138].z
                    breakc_z r2.w
                
                #line 77
                    nop 
                    imul null, r2.w, r1.w, l(5)
                    mov r5.xyz, cb0[r2.w + 88].xyzx  // Light<0,1,2>
                    mov r6.xyz, cb0[r2.w + 89].xyzx  // Light<4,5,6>
                    mov r7.xyz, cb0[r2.w + 90].xyzx  // Light<8,9,10>
                    mov r8.xyz, cb0[r2.w + 91].xyzx  // Light<12,13,14>
                    mov r9.xyz, cb0[r2.w + 92].xyzx  // Light<16,17,18>
                    mov r3.w, cb0[r2.w + 88].w  // Light<3>
                    mov r5.w, cb0[r2.w + 89].w  // Light<7>
                    mov r6.w, cb0[r2.w + 90].w  // Light<11>
                    mov r7.w, cb0[r2.w + 91].w  // Light<15>
                    mov r2.w, cb0[r2.w + 92].w  // Light<19>
                    mov r10.xyz, r2.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r3.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                    mov r12.xyz, v2.xyzx  // thisPoint<0,1,2>
                
                #line 296 "shading3D.fx"
                    mov r9.xyz, -r9.xyzx
                    add r12.xyz, r9.xyzx, r12.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                    dp3 r8.w, r12.xyzx, r12.xyzx
                    rsq r9.w, r8.w
                    mul r12.xyz, r9.wwww, r12.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 300
                    sqrt r8.w, r8.w  // disFromLight<0:NaN:Inf>
                    mul r6.w, r6.w, r8.w
                    mul r6.w, r8.w, r6.w
                    add r6.w, r6.w, l(1.000000)
                    div r6.w, l(1.000000), r6.w  // Attenuation<0:NaN:Inf>
                
                #line 305
                    add r8.xyz, r8.xyzx, r9.xyzx
                    dp3 r9.x, r8.xyzx, r8.xyzx
                    rsq r9.x, r9.x
                    mul r8.xyz, r8.xyzx, r9.xxxx
                    dp3 r8.x, r12.xyzx, r8.xyzx  // Cos_Theta<0:NaN:Inf>
                
                #line 308
                    lt r5.w, r5.w, r8.w
                    sincos null, r7.w, r7.w
                    lt r7.w, r8.x, r7.w
                    or r5.w, r5.w, r7.w
                
                #line 315
                    if_z r5.w
                      mov r8.xyz, -r12.xyzx
                      dp3 r5.w, r8.xyzx, r10.xyzx
                      mul r2.w, r2.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 320
                      nop 
                
                #line 188
                      ine r5.w, l(0, 0, 0, 0), cb1[3].x
                      if_nz r5.w
                        sample_indexable(texture2d)(float,float,float,float) r8.xyz, v4.xyxx, t0.xyzw, s0  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                      else 
                
                #line 195
                        mov r8.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 188
                      endif 
                
                #line 320
                      mov r8.xyz, r8.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                      nop 
                      mov r2.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                      mov r3.w, r3.w  // lightSpecIntensity<0>
                      itof r5.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                      mov r6.w, r6.w  // Attenuation<0:NaN:Inf>
                      mov r9.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                      mov r5.xyz, r5.xyzx  // lightAmbientColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                      mov r6.xyz, r6.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r13.xyz, cb1[2].xyzx  // matSpecColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightSpecColor3<0,1,2>
                      mov r11.xyz, r11.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                      mov r12.xyz, r12.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r10.xyz, r10.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 158
                      mul r5.xyz, r5.xyzx, r9.xyzx
                      mul r9.xyz, r8.xyzx, r5.xyzx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r9.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 163
                      lt r5.x, l(0.000000), r2.w
                
                #line 166
                      mul r2.w, r2.w, r6.w
                      mul r8.xyz, r6.xyzx, r8.xyzx
                      mov r8.w, l(1.000000)
                      mul r8.xyzw, r2.wwww, r8.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 169
                      dp3 r2.w, r12.xyzx, r10.xyzx
                      add r2.w, r2.w, r2.w
                      mov r2.w, -r2.w
                      mul r6.xyz, r2.wwww, r10.xyzx
                      add r6.xyz, r12.xyzx, r6.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 172
                      dp3 r2.w, r11.xyzx, r11.xyzx
                      rsq r2.w, r2.w
                      mul r10.xyz, r2.wwww, r11.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 175
                      dp3 r2.w, r6.xyzx, r10.xyzx
                      max r2.w, r2.w, l(0.000000)
                      log r2.w, r2.w
                      mul r2.w, r2.w, r5.w
                      exp r2.w, r2.w
                      mul r2.w, r2.w, r3.w  // SpecFactor<0:NaN:Inf>
                
                #line 178
                      mul r2.w, r2.w, r6.w
                      mul r6.xyz, r7.xyzx, r13.xyzx
                      mov r6.w, l(1.000000)
                      mul r6.xyzw, r2.wwww, r6.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 163
                      movc r7.xyzw, r5.xxxx, r8.xyzw, l(0,0,0,1.000000)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      movc r5.xyzw, r5.xxxx, r6.xyzw, l(0,0,0,1.000000)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 322
                      mov r9.xyzw, r9.xyzw  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                      mov r7.xyzw, r7.xyzw  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      mov r5.xyzw, r5.xyzw  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 330
                      add r6.xyzw, r7.xyzw, r9.xyzw
                      add r5.xyzw, r5.xyzw, r6.xyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 315
                    else 
                      mov r5.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                    endif 
                
                #line 77 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                    mov r5.xyzw, r5.xyzw  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r4.xyzw, r4.xyzw, r5.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 74
                    iadd r1.w, r1.w, l(1)  // i<0>
                  endloop 
                
                #line 62
                else 
                  mov r4.xyzw, l(0,0,0,0)  // finalColor4<0: 0f,1: 0f,2: 0f,3: 0f>
                endif 
                
                #line 83
                if_nz r1.z
                  mov r0.x, l(0)  // i<0: 0>
                  mov r5.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r0.y, r0.x  // i<0>
                  loop 
                    ilt r0.z, r0.y, cb2[650].x
                    breakc_z r0.z
                    nop 
                    imul null, r0.z, r0.y, l(4)
                    mov r1.xzw, cb2[r0.z + 0].xxyz  // Light<0,1,2>
                    mov r6.xyz, cb2[r0.z + 1].xyzx  // Light<4,5,6>
                    mov r7.xyz, cb2[r0.z + 2].xyzx  // Light<8,9,10>
                    mov r8.xyz, cb2[r0.z + 3].xyzx  // Light<12,13,14>
                    mov r0.w, cb2[r0.z + 0].w  // Light<3>
                    mov r0.z, cb2[r0.z + 1].w  // Light<7>
                    mov r9.xyz, r2.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r3.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                
                #line 213 "shading3D.fx"
                    dp3 r2.w, r8.xyzx, r8.xyzx
                    rsq r2.w, r2.w
                    mul r8.xyz, r2.wwww, r8.xyzx  // LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 216
                    mov r11.xyz, -r8.xyzx
                    dp3 r2.w, r11.xyzx, r9.xyzx
                    mul r0.z, r0.z, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 220
                    nop 
                
                #line 188
                    ine r2.w, l(0, 0, 0, 0), cb1[3].x
                    if_nz r2.w
                      sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                    else 
                
                #line 195
                      mov r11.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 188
                    endif 
                
                #line 220
                    mov r11.xyz, r11.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r0.z, r0.z  // diffuseCosFactor<0:NaN:Inf>
                    mov r0.w, r0.w  // lightSpecIntensity<0>
                    itof r2.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                    mov r12.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                    mov r1.xzw, r1.xxzw  // lightAmbientColor3<0,1,2>
                    mov r11.xyz, r11.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r6.xyz, r6.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r13.xyz, cb1[2].xyzx  // matSpecColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightSpecColor3<0,1,2>
                    mov r10.xyz, r10.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                    mov r8.xyz, r8.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 158
                    mul r1.xzw, r1.xxzw, r12.xxyz
                    mul r12.xyz, r11.xyzx, r1.xzwx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r12.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 163
                    lt r1.x, l(0.000000), r0.z
                
                #line 166
                    mul r0.z, r0.z, l(1.000000)
                    mul r6.xyz, r6.xyzx, r11.xyzx
                    mov r6.w, l(1.000000)
                    mul r6.xyzw, r0.zzzz, r6.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 169
                    dp3 r0.z, r8.xyzx, r9.xyzx
                    add r0.z, r0.z, r0.z
                    mov r0.z, -r0.z
                    mul r9.xyz, r0.zzzz, r9.xyzx
                    add r8.xyz, r8.xyzx, r9.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 172
                    dp3 r0.z, r10.xyzx, r10.xyzx
                    rsq r0.z, r0.z
                    mul r9.xyz, r0.zzzz, r10.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 175
                    dp3 r0.z, r8.xyzx, r9.xyzx
                    max r0.z, r0.z, l(0.000000)
                    log r0.z, r0.z
                    mul r0.z, r0.z, r2.w
                    exp r0.z, r0.z
                    mul r0.z, r0.z, r0.w  // SpecFactor<0:NaN:Inf>
                
                #line 178
                    mul r0.z, r0.z, l(1.000000)
                    mul r7.xyz, r7.xyzx, r13.xyzx
                    mov r7.w, l(1.000000)
                    mul r7.xyzw, r0.zzzz, r7.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 163
                    movc r6.xyzw, r1.xxxx, r6.xyzw, l(0,0,0,1.000000)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    movc r7.xyzw, r1.xxxx, r7.xyzw, l(0,0,0,1.000000)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 222
                    mov r12.xyzw, r12.xyzw  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                    mov r6.xyzw, r6.xyzw  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    mov r7.xyzw, r7.xyzw  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 230
                    add r6.xyzw, r6.xyzw, r12.xyzw
                    add r6.xyzw, r7.xyzw, r6.xyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 87 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                    mov r6.xyzw, r6.xyzw  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r5.xyzw, r5.xyzw, r6.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 85
                    iadd r0.y, r0.y, l(1)  // i<0>
                  endloop 
                
                #line 90
                  mov r6.xyzw, r5.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r0.y, r0.x  // i<0>
                  loop 
                    ilt r0.z, r0.y, cb2[650].y
                    breakc_z r0.z
                    nop 
                    imul null, r0.z, r0.y, l(4)
                    mov r1.xzw, cb2[r0.z + 200].xxyz  // Light<0,1,2>
                    mov r7.xyz, cb2[r0.z + 201].xyzx  // Light<4,5,6>
                    mov r8.xyz, cb2[r0.z + 202].xyzx  // Light<8,9,10>
                    mov r9.xyz, cb2[r0.z + 203].xyzx  // Light<12,13,14>
                    mov r0.w, cb2[r0.z + 200].w  // Light<3>
                    mov r2.w, cb2[r0.z + 201].w  // Light<7>
                    mov r3.w, cb2[r0.z + 202].w  // Light<11>
                    mov r0.z, cb2[r0.z + 203].w  // Light<15>
                    mov r10.xyz, r2.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r3.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                    mov r12.xyz, v2.xyzx  // thisPoint<0,1,2>
                
                #line 246 "shading3D.fx"
                    mov r9.xyz, -r9.xyzx
                    add r9.xyz, r9.xyzx, r12.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                    dp3 r7.w, r9.xyzx, r9.xyzx
                    rsq r8.w, r7.w
                    mul r9.xyz, r8.wwww, r9.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 250
                    sqrt r7.w, r7.w  // disFromLight<0:NaN:Inf>
                    mul r3.w, r3.w, r7.w
                    mul r3.w, r7.w, r3.w
                    add r3.w, r3.w, l(1.000000)
                    div r3.w, l(1.000000), r3.w  // Attenuation<0:NaN:Inf>
                
                #line 255
                    lt r2.w, r2.w, r7.w
                
                #line 262
                    if_z r2.w
                      mov r12.xyz, -r9.xyzx
                      dp3 r2.w, r12.xyzx, r10.xyzx
                      mul r0.z, r0.z, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 267
                      nop 
                
                #line 188
                      ine r2.w, l(0, 0, 0, 0), cb1[3].x
                      if_nz r2.w
                        sample_indexable(texture2d)(float,float,float,float) r12.xyz, v4.xyxx, t0.xyzw, s0  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                      else 
                
                #line 195
                        mov r12.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 188
                      endif 
                
                #line 267
                      mov r12.xyz, r12.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                
                #line 273
                      nop 
                      mov r0.z, r0.z  // diffuseCosFactor<0:NaN:Inf>
                      mov r0.w, r0.w  // lightSpecIntensity<0>
                      itof r2.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                      mov r3.w, r3.w  // Attenuation<0:NaN:Inf>
                      mov r13.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                      mov r1.xzw, r1.xxzw  // lightAmbientColor3<0,1,2>
                      mov r12.xyz, r12.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                      mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r14.xyz, cb1[2].xyzx  // matSpecColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                      mov r11.xyz, r11.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                      mov r9.xyz, r9.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r10.xyz, r10.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 158
                      mul r1.xzw, r1.xxzw, r13.xxyz
                      mul r13.xyz, r12.xyzx, r1.xzwx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r13.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 163
                      lt r1.x, l(0.000000), r0.z
                
                #line 166
                      mul r0.z, r0.z, r3.w
                      mul r7.xyz, r7.xyzx, r12.xyzx
                      mov r7.w, l(1.000000)
                      mul r7.xyzw, r0.zzzz, r7.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 169
                      dp3 r0.z, r9.xyzx, r10.xyzx
                      add r0.z, r0.z, r0.z
                      mov r0.z, -r0.z
                      mul r10.xyz, r0.zzzz, r10.xyzx
                      add r9.xyz, r9.xyzx, r10.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 172
                      dp3 r0.z, r11.xyzx, r11.xyzx
                      rsq r0.z, r0.z
                      mul r10.xyz, r0.zzzz, r11.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 175
                      dp3 r0.z, r9.xyzx, r10.xyzx
                      max r0.z, r0.z, l(0.000000)
                      log r0.z, r0.z
                      mul r0.z, r0.z, r2.w
                      exp r0.z, r0.z
                      mul r0.z, r0.z, r0.w  // SpecFactor<0:NaN:Inf>
                
                #line 178
                      mul r0.z, r0.z, r3.w
                      mul r8.xyz, r8.xyzx, r14.xyzx
                      mov r8.w, l(1.000000)
                      mul r8.xyzw, r0.zzzz, r8.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 163
                      movc r7.xyzw, r1.xxxx, r7.xyzw, l(0,0,0,1.000000)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      movc r8.xyzw, r1.xxxx, r8.xyzw, l(0,0,0,1.000000)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 273
                      mov r13.xyzw, r13.xyzw  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                      mov r7.xyzw, r7.xyzw  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      mov r8.xyzw, r8.xyzw  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 280
                      add r7.xyzw, r7.xyzw, r13.xyzw
                      add r7.xyzw, r8.xyzw, r7.xyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 262
                    else 
                      mov r7.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                    endif 
                
                #line 92 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                    mov r7.xyzw, r7.xyzw  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r6.xyzw, r6.xyzw, r7.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 90
                    iadd r0.y, r0.y, l(1)  // i<0>
                  endloop 
                
                #line 95
                  mov r4.xyzw, r6.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov r0.y, r0.x  // i<0>
                  loop 
                    ilt r0.z, r0.y, cb2[650].z
                    breakc_z r0.z
                    nop 
                    imul null, r0.z, r0.y, l(5)
                    mov r1.xzw, cb2[r0.z + 400].xxyz  // Light<0,1,2>
                    mov r5.xyz, cb2[r0.z + 401].xyzx  // Light<4,5,6>
                    mov r7.xyz, cb2[r0.z + 402].xyzx  // Light<8,9,10>
                    mov r8.xyz, cb2[r0.z + 403].xyzx  // Light<12,13,14>
                    mov r9.xyz, cb2[r0.z + 404].xyzx  // Light<16,17,18>
                    mov r0.w, cb2[r0.z + 400].w  // Light<3>
                    mov r2.w, cb2[r0.z + 401].w  // Light<7>
                    mov r3.w, cb2[r0.z + 402].w  // Light<11>
                    mov r5.w, cb2[r0.z + 403].w  // Light<15>
                    mov r0.z, cb2[r0.z + 404].w  // Light<19>
                    mov r10.xyz, r2.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r3.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                    mov r12.xyz, v2.xyzx  // thisPoint<0,1,2>
                
                #line 296 "shading3D.fx"
                    mov r9.xyz, -r9.xyzx
                    add r12.xyz, r9.xyzx, r12.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                    dp3 r7.w, r12.xyzx, r12.xyzx
                    rsq r8.w, r7.w
                    mul r12.xyz, r8.wwww, r12.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 300
                    sqrt r7.w, r7.w  // disFromLight<0:NaN:Inf>
                    mul r3.w, r3.w, r7.w
                    mul r3.w, r7.w, r3.w
                    add r3.w, r3.w, l(1.000000)
                    div r3.w, l(1.000000), r3.w  // Attenuation<0:NaN:Inf>
                
                #line 305
                    add r8.xyz, r8.xyzx, r9.xyzx
                    dp3 r8.w, r8.xyzx, r8.xyzx
                    rsq r8.w, r8.w
                    mul r8.xyz, r8.wwww, r8.xyzx
                    dp3 r8.x, r12.xyzx, r8.xyzx  // Cos_Theta<0:NaN:Inf>
                
                #line 308
                    lt r2.w, r2.w, r7.w
                    sincos null, r5.w, r5.w
                    lt r5.w, r8.x, r5.w
                    or r2.w, r2.w, r5.w
                
                #line 315
                    if_z r2.w
                      mov r8.xyz, -r12.xyzx
                      dp3 r2.w, r8.xyzx, r10.xyzx
                      mul r0.z, r0.z, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 320
                      nop 
                
                #line 188
                      ine r2.w, l(0, 0, 0, 0), cb1[3].x
                      if_nz r2.w
                        sample_indexable(texture2d)(float,float,float,float) r8.xyz, v4.xyxx, t0.xyzw, s0  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                      else 
                
                #line 195
                        mov r8.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 188
                      endif 
                
                #line 320
                      mov r8.xyz, r8.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                      nop 
                      mov r0.z, r0.z  // diffuseCosFactor<0:NaN:Inf>
                      mov r0.w, r0.w  // lightSpecIntensity<0>
                      itof r2.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                      mov r3.w, r3.w  // Attenuation<0:NaN:Inf>
                      mov r9.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                      mov r1.xzw, r1.xxzw  // lightAmbientColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                      mov r5.xyz, r5.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r13.xyz, cb1[2].xyzx  // matSpecColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightSpecColor3<0,1,2>
                      mov r11.xyz, r11.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                      mov r12.xyz, r12.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r10.xyz, r10.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 158
                      mul r1.xzw, r1.xxzw, r9.xxyz
                      mul r9.xyz, r8.xyzx, r1.xzwx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r9.w, l(1.000000)  // outAmbient<3: 1f>
                
                #line 163
                      lt r1.x, l(0.000000), r0.z
                
                #line 166
                      mul r0.z, r0.z, r3.w
                      mul r5.xyz, r5.xyzx, r8.xyzx
                      mov r5.w, l(1.000000)
                      mul r5.xyzw, r0.zzzz, r5.xyzw  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 169
                      dp3 r0.z, r12.xyzx, r10.xyzx
                      add r0.z, r0.z, r0.z
                      mov r0.z, -r0.z
                      mul r8.xyz, r0.zzzz, r10.xyzx
                      add r8.xyz, r12.xyzx, r8.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 172
                      dp3 r0.z, r11.xyzx, r11.xyzx
                      rsq r0.z, r0.z
                      mul r10.xyz, r0.zzzz, r11.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 175
                      dp3 r0.z, r8.xyzx, r10.xyzx
                      max r0.z, r0.z, l(0.000000)
                      log r0.z, r0.z
                      mul r0.z, r0.z, r2.w
                      exp r0.z, r0.z
                      mul r0.z, r0.z, r0.w  // SpecFactor<0:NaN:Inf>
                
                #line 178
                      mul r0.z, r0.z, r3.w
                      mul r7.xyz, r7.xyzx, r13.xyzx
                      mov r7.w, l(1.000000)
                      mul r7.xyzw, r0.zzzz, r7.xyzw  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 163
                      movc r5.xyzw, r1.xxxx, r5.xyzw, l(0,0,0,1.000000)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      movc r7.xyzw, r1.xxxx, r7.xyzw, l(0,0,0,1.000000)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 322
                      mov r9.xyzw, r9.xyzw  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3: 1f>
                      mov r5.xyzw, r5.xyzw  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                      mov r7.xyzw, r7.xyzw  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 330
                      add r5.xyzw, r5.xyzw, r9.xyzw
                      add r5.xyzw, r7.xyzw, r5.xyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 315
                    else 
                      mov r5.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                    endif 
                
                #line 97 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                    mov r5.xyzw, r5.xyzw  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                    add r4.xyzw, r4.xyzw, r5.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 95
                    iadd r0.y, r0.y, l(1)  // i<0>
                  endloop 
                
                #line 83
                endif 
                
                #line 104
                ine r0.x, l(0, 0, 0, 0), cb3[0].w
                if_nz r0.x
                  mov r0.x, -cb3[1].x
                  add r0.y, r0.x, r1.y
                  add r0.x, r0.x, cb3[1].y
                  div r0.x, r0.y, r0.x
                  max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                  mov r1.xyzw, -r4.xyzw
                  mov r2.xyz, cb3[0].xyzx
                  mov r2.w, l(1.000000)
                  add r1.xyzw, r1.xyzw, r2.xyzw
                  mul r0.xyzw, r0.xxxx, r1.xyzw
                  add r4.xyzw, r0.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 104
                endif 
                
                #line 110
                mov o0.xyzw, r4.xyzw  // PS_DefaultDraw<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 607 instruction slots used
                            
            };
        }

    }

    technique11 DrawSolid3D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbSolid3D
                // {
                //
                //   float4x4 gProjMatrix_Line3D;       // Offset:    0 Size:    64
                //   float4x4 gViewMatrix_Line3D;       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbSolid3D                         cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                
                #line 120 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                dp4 r1.w, r0.xyzw, cb0[7].xyzw
                dp4 r0.x, r1.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r0.z, r1.xyzw, cb0[2].xyzw  // output<2:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb0[3].xyzw  // output<3:NaN:Inf>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r2.xy, v2.xyxx  // output<8,9>
                mov o0.xyzw, r0.xyzw  // VS_Solid3D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r1.xyzw  // VS_Solid3D<4,5,6,7>
                mov o2.xy, r2.xyxx  // VS_Solid3D<8,9>
                ret 
                // Approximately 16 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                
                #line 128 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                mov o0.xyzw, v1.xyzw  // PS_Solid3D<0,1,2,3>
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 DrawSolid2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 2
                
                #line 137 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                mov r0.xyz, v0.xyzx  // output<0,1,2>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov o0.xyzw, r0.xyzw  // VS_Solid2D<0,1,2,3: 1f>
                mov o1.xyzw, r1.xyzw  // VS_Solid2D<4,5,6,7>
                mov o2.xy, l(0,0,0,0)  // VS_Solid2D<8: 0f,9: 0f>
                ret 
                // Approximately 7 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                
                #line 144 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                mov o0.xyzw, v1.xyzw  // PS_Solid2D<0,1,2,3>
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 DrawTextured2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                
                #line 153 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                mov r0.xyz, v0.xyzx  // output<0,1,2>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r2.xy, v2.xyxx  // output<8,9>
                mov o0.xyzw, r0.xyzw  // VS_Textured2D<0,1,2,3: 1f>
                mov o1.xyzw, r1.xyzw  // VS_Textured2D<4,5,6,7>
                mov o2.xy, r2.xyxx  // VS_Textured2D<8,9>
                ret 
                // Approximately 8 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // sampler2D_ANISOTROPIC             sampler      NA          NA    0        1
                // g2D_DiffuseMap                    texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 161 "F:\1VS PROJECT\3D\Noise3D -(14)Fog\RenderWindow\Main.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0  // outputColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov o0.xyzw, r0.xyzw  // PS_Textured2D<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

}

