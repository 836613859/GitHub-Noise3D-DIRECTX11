//
// FX Version: fx_5_0
//
// 8 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorldMatrix;              // Offset:    0, size:   64
    float4x4 gWorldInvTransposeMatrix;  // Offset:   64, size:   64
}

cbuffer cbPerFrame
{
    N_DirectionalLight gDirectionalLight_Dynamic[10];// Offset:    0, size:  640
    N_PointLight gPointLight_Dynamic[10];// Offset:  640, size:  640
    N_SpotLight gSpotLight_Dynamic[10]; // Offset: 1280, size:  800
    int     gDirectionalLightCount_Dynamic;// Offset: 2080, size:    4
    int     gPointLightCount_Dynamic;   // Offset: 2084, size:    4
    int     gSpotLightCount_Dynamic;    // Offset: 2088, size:    4
    int     gIsLightingEnabled_Dynamic; // Offset: 2092, size:    4
}

cbuffer cbPerSubset
{
    N_Material_Basic gMaterial;         // Offset:    0, size:   64
    int     gIsDiffuseMapValid;         // Offset:   64, size:    4
    int     gIsNormalMapValid;          // Offset:   68, size:    4
    int     gIsSpecularMapValid;        // Offset:   72, size:    4
    int     gIsEnvironmentMapVaild;     // Offset:   76, size:    4
}

cbuffer cbRarely
{
    N_DirectionalLight gDirectionalLight_Static[50];// Offset:    0, size: 3200
    N_PointLight gPointLight_Static[50];// Offset: 3200, size: 3200
    N_SpotLight gSpotLight_Static[50];  // Offset: 6400, size: 4000
    int     gDirectionalLightCount_Static;// Offset: 10400, size:    4
    int     gPointLightCount_Static;    // Offset: 10404, size:    4
    int     gSpotLightCount_Static;     // Offset: 10408, size:    4
    int     gIsLightingEnabled_Static;  // Offset: 10412, size:    4
}

cbuffer cbCameraInfo
{
    float4x4 gProjMatrix;               // Offset:    0, size:   64
    float4x4 gViewMatrix;               // Offset:   64, size:   64
    float4x4 gInvProjMatrix;            // Offset:  128, size:   64
    float4x4 gInvViewMatrix;            // Offset:  192, size:   64
    float3  gCamPos;                    // Offset:  256, size:   12
    float   mPad1;                      // Offset:  268, size:    4
}

cbuffer cbAtmosphere
{
    float3  gFogColor3;                 // Offset:    0, size:   12
    int     gFogEnabled;                // Offset:   12, size:    4
    float   gFogNear;                   // Offset:   16, size:    4
    float   gFogFar;                    // Offset:   20, size:    4
    float   gSkyBoxWidth;               // Offset:   24, size:    4
    float   gSkyBoxHeight;              // Offset:   28, size:    4
    float   gSkyBoxDepth;               // Offset:   32, size:    4
    float   mPad3;                      // Offset:   36, size:    4
}

cbuffer cbDrawText2D
{
    float4  g2D_TextColor;              // Offset:    0, size:   16
    float4  g2D_TextGlowColor;          // Offset:   16, size:   16
}

cbuffer cbPicking
{
    float2  gPickingRayNormalizedDirXY; // Offset:    0, size:    8
    float2  gPadPicking123;             // Offset:    8, size:    8
}

//
// 7 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gNormalMap;
Texture2D gSpecularMap;
TextureCube gCubeMap;
SamplerState samplerDefault
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
};
SamplerState samplerDraw2D
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(2);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
};
Texture2D gColorMap2D;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 7 technique(s)
    //
    technique11 DefaultDraw
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 2
                mov r0.w, l(1.000000)
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r0.x, r1.xyzw, cb0[0].xyzw
                dp4 r0.y, r1.xyzw, cb0[1].xyzw
                dp4 r0.z, r1.xyzw, cb0[2].xyzw
                dp4 r1.x, r0.xyzw, cb1[4].xyzw
                dp4 r1.y, r0.xyzw, cb1[5].xyzw
                dp4 r1.z, r0.xyzw, cb1[6].xyzw
                dp4 r1.w, r0.xyzw, cb1[7].xyzw
                mov o2.xyz, r0.xyzx
                dp4 o0.x, r1.xyzw, cb1[0].xyzw
                dp4 o0.y, r1.xyzw, cb1[1].xyzw
                dp4 o0.z, r1.xyzw, cb1[2].xyzw
                dp4 o0.w, r1.xyzw, cb1[3].xyzw
                mov o1.xyzw, v1.xyzw
                mov r0.xyz, v2.xyzx
                mov r0.w, l(1.000000)
                dp4 o3.x, r0.xyzw, cb0[4].xyzw
                dp4 o3.y, r0.xyzw, cb0[5].xyzw
                dp4 o3.z, r0.xyzw, cb0[6].xyzw
                mov o4.xy, v3.xyxx
                dp3 o5.x, v4.xyzx, cb0[0].xyzx
                dp3 o5.y, v4.xyzx, cb0[1].xyzx
                dp3 o5.z, v4.xyzx, cb0[2].xyzx
                ret 
                // Approximately 26 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //   int gIsDiffuseMapValid;            // Offset:   64 Size:     4
                //   int gIsNormalMapValid;             // Offset:   68 Size:     4
                //   int gIsSpecularMapValid;           // Offset:   72 Size:     4
                //   int gIsEnvironmentMapVaild;        // Offset:   76 Size:     4
                //
                // }
                //
                // cbuffer cbRarely
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Static[50];    // Offset:    0 Size:  3200
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 3200
                //       float mSpecularIntensity;      // Offset: 3212
                //       float3 mDiffuseColor;          // Offset: 3216
                //       float mDiffuseIntensity;       // Offset: 3228
                //       float3 mSpecularColor;         // Offset: 3232
                //       float mAttenuationFactor;      // Offset: 3244
                //       float3 mPosition;              // Offset: 3248
                //       float mLightingRange;          // Offset: 3260
                //
                //   } gPointLight_Static[50];          // Offset: 3200 Size:  3200
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 6400
                //       float mSpecularIntensity;      // Offset: 6412
                //       float3 mDiffuseColor;          // Offset: 6416
                //       float mDiffuseIntensity;       // Offset: 6428
                //       float3 mSpecularColor;         // Offset: 6432
                //       float mAttenuationFactor;      // Offset: 6444
                //       float3 mLitAt;                 // Offset: 6448
                //       float mLightingAngle;          // Offset: 6460
                //       float3 mPosition;              // Offset: 6464
                //       float mLightingRange;          // Offset: 6476
                //
                //   } gSpotLight_Static[50];           // Offset: 6400 Size:  4000
                //   int gDirectionalLightCount_Static; // Offset: 10400 Size:     4
                //   int gPointLightCount_Static;       // Offset: 10404 Size:     4
                //   int gSpotLightCount_Static;        // Offset: 10408 Size:     4
                //   int gIsLightingEnabled_Static;     // Offset: 10412 Size:     4
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //   float mPad3;                       // Offset:   36 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerSubset                       cbuffer      NA          NA    1        1
                // cbRarely                          cbuffer      NA          NA    2        1
                // cbCameraInfo                      cbuffer      NA          NA    3        1
                // cbAtmosphere                      cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[131], dynamicIndexed
                dcl_constantbuffer cb1[5], immediateIndexed
                dcl_constantbuffer cb2[651], dynamicIndexed
                dcl_constantbuffer cb3[17], immediateIndexed
                dcl_constantbuffer cb4[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 16
                ieq r0.x, cb0[130].w, l(0)
                ieq r0.y, cb2[650].w, l(0)
                and r0.x, r0.y, r0.x
                if_nz r0.x
                  mov o0.xyzw, v1.xyzw
                  ret 
                endif 
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.xyzx
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.xyzx
                add r2.xyz, -v2.xyzx, cb3[16].xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                sqrt r0.w, r0.w
                ieq r1.w, cb4[0].w, l(1)
                lt r2.w, cb4[1].y, r0.w
                and r1.w, r1.w, r2.w
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v4.xyxx, t1.xyzw, s0
                mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
                add_sat r2.w, -cb1[1].w, l(1.000000)
                add r4.xyz, -r3.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                mad r3.xyz, r2.wwww, r4.xyzx, r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                movc r3.xyz, cb1[4].yyyy, r3.xyzx, l(0,1.000000,0,0)
                dp3 r2.w, r0.xyzx, r1.xyzx
                mad r1.xyz, -r2.wwww, r0.xyzx, r1.xyzx
                dp3 r2.w, r1.xyzx, r1.xyzx
                rsq r2.w, r2.w
                mul r1.xyz, r1.xyzx, r2.wwww
                mul r4.xyz, r0.zxyz, r1.yzxy
                mad r4.xyz, r0.yzxy, r1.zxyz, -r4.xyzx
                dp3 r2.w, r4.xyzx, r4.xyzx
                rsq r2.w, r2.w
                mul r4.xyz, r2.wwww, r4.xyzx
                mov r5.x, r1.x
                mov r5.y, r0.x
                mov r5.z, r4.x
                dp3 r5.x, r3.xyzx, r5.xyzx
                mov r6.x, r1.y
                mov r6.y, r0.y
                mov r6.z, r4.y
                dp3 r5.y, r3.xyzx, r6.xyzx
                mov r6.x, r1.z
                mov r6.y, r0.z
                mov r6.z, r4.z
                dp3 r5.z, r3.xyzx, r6.xyzx
                dp3 r2.w, -r2.xyzx, r5.xyzx
                add r2.w, r2.w, r2.w
                mad r5.xyz, r5.xyzx, -r2.wwww, -r2.xyzx
                sample_indexable(texturecube)(float,float,float,float) r5.xyz, r5.xyzx, t2.xyzw, s0
                if_nz r1.w
                  mov o0.xyz, cb4[0].xyzx
                  mov o0.w, l(1.000000)
                  ret 
                endif 
                if_nz cb0[130].w
                  sample_indexable(texture2d)(float,float,float,float) r6.xyz, v4.xyxx, t0.xyzw, s0
                  movc r7.xyz, cb1[4].xxxx, r6.xyzx, cb1[1].xyzx
                  movc r6.xyz, cb1[4].zzzz, r6.xyzx, cb1[2].xyzx
                  mov_sat r8.w, cb1[2].w
                  mov r8.xyz, r5.xyzx
                  movc r8.xyzw, cb1[4].wwww, r8.xyzw, l(0,0,0,0)
                  dp3 r9.x, r2.xyzx, r1.xyzx
                  dp3 r9.y, r2.xyzx, r0.xyzx
                  dp3 r9.z, r2.xyzx, r4.xyzx
                  itof r1.w, cb1[0].w
                  dp3 r2.w, r3.xyzx, r3.xyzx
                  rsq r2.w, r2.w
                  mul r10.xyz, r2.wwww, r3.xyzx
                  dp3 r2.w, r9.xyzx, r9.xyzx
                  rsq r2.w, r2.w
                  mul r9.xyz, r2.wwww, r9.xyzx
                  mov r11.xyz, l(0,0,0,0)
                  mov r2.w, l(0)
                  loop 
                    ige r3.w, r2.w, cb0[130].x
                    breakc_nz r3.w
                    ishl r3.w, r2.w, l(2)
                    dp3 r4.w, cb0[r3.w + 3].xyzx, cb0[r3.w + 3].xyzx
                    rsq r4.w, r4.w
                    mul r12.xyz, r4.wwww, cb0[r3.w + 3].xyzx
                    dp3 r13.x, r12.xyzx, r1.xyzx
                    dp3 r13.y, r12.xyzx, r0.xyzx
                    dp3 r13.z, r12.xyzx, r4.xyzx
                    dp3 r4.w, -r13.xyzx, r3.xyzx
                    mul r4.w, r4.w, cb0[r3.w + 1].w
                    mul r12.xyz, cb1[0].xyzx, cb0[r3.w + 0].xyzx
                    lt r6.w, l(0.000000), r4.w
                    mul r14.xyz, r7.xyzx, cb0[r3.w + 1].xyzx
                    mul r14.xyz, r4.wwww, r14.xyzx
                    dp3 r4.w, r13.xyzx, r10.xyzx
                    add r4.w, r4.w, r4.w
                    mad r13.xyz, r10.xyzx, -r4.wwww, r13.xyzx
                    dp3 r4.w, r13.xyzx, r9.xyzx
                    max r4.w, r4.w, l(0.000000)
                    log r4.w, r4.w
                    mul r4.w, r1.w, r4.w
                    exp r4.w, r4.w
                    mul r4.w, r4.w, cb0[r3.w + 0].w
                    mul r13.xyz, r6.xyzx, cb0[r3.w + 2].xyzx
                    mul r13.xyz, r4.wwww, r13.xyzx
                    and r14.xyz, r6.wwww, r14.xyzx
                    and r13.xyz, r6.wwww, r13.xyzx
                    mad r12.xyz, r12.xyzx, r7.xyzx, r14.xyzx
                    add r14.xyz, r8.xyzx, -r12.xyzx
                    mad r12.xyz, r8.wwww, r14.xyzx, r12.xyzx
                    add r12.xyz, r13.xyzx, r12.xyzx
                    add r11.xyz, r11.xyzx, r12.xyzx
                    iadd r2.w, r2.w, l(1)
                  endloop 
                  mov r12.xyz, r11.xyzx
                  mov r2.w, l(0)
                  loop 
                    ige r3.w, r2.w, cb0[130].y
                    breakc_nz r3.w
                    ishl r3.w, r2.w, l(2)
                    add r13.xyz, v2.xyzx, -cb0[r3.w + 43].xyzx
                    dp3 r4.w, r13.xyzx, r13.xyzx
                    sqrt r6.w, r4.w
                    ge r6.w, cb0[r3.w + 43].w, r6.w
                    if_nz r6.w
                      rsq r6.w, r4.w
                      mul r13.xyz, r6.wwww, r13.xyzx
                      mad r4.w, r4.w, cb0[r3.w + 42].w, l(1.000000)
                      div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
                      dp3 r14.x, r13.xyzx, r1.xyzx
                      dp3 r14.y, r13.xyzx, r0.xyzx
                      dp3 r14.z, r13.xyzx, r4.xyzx
                      dp3 r6.w, -r13.xyzx, r0.xyzx
                      mul r6.w, r6.w, cb0[r3.w + 41].w
                      mul r13.xyz, cb1[0].xyzx, cb0[r3.w + 40].xyzx
                      lt r7.w, l(0.000000), r6.w
                      mul r6.w, r4.w, r6.w
                      mul r15.xyz, r7.xyzx, cb0[r3.w + 41].xyzx
                      mul r15.xyz, r6.wwww, r15.xyzx
                      dp3 r6.w, r14.xyzx, r10.xyzx
                      add r6.w, r6.w, r6.w
                      mad r14.xyz, r10.xyzx, -r6.wwww, r14.xyzx
                      dp3 r6.w, r14.xyzx, r9.xyzx
                      max r6.w, r6.w, l(0.000000)
                      log r6.w, r6.w
                      mul r6.w, r1.w, r6.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, cb0[r3.w + 40].w
                      mul r4.w, r4.w, r6.w
                      mul r14.xyz, r6.xyzx, cb0[r3.w + 42].xyzx
                      mul r14.xyz, r4.wwww, r14.xyzx
                      and r15.xyz, r7.wwww, r15.xyzx
                      and r14.xyz, r7.wwww, r14.xyzx
                      mad r13.xyz, r13.xyzx, r7.xyzx, r15.xyzx
                      add r15.xyz, r8.xyzx, -r13.xyzx
                      mad r13.xyz, r8.wwww, r15.xyzx, r13.xyzx
                      add r13.xyz, r14.xyzx, r13.xyzx
                    else 
                      mov r13.xyz, l(0,0,0,0)
                    endif 
                    add r12.xyz, r12.xyzx, r13.xyzx
                    iadd r2.w, r2.w, l(1)
                  endloop 
                  mov r11.xyz, r12.xyzx
                  mov r2.w, l(0)
                  loop 
                    ige r3.w, r2.w, cb0[130].z
                    breakc_nz r3.w
                    imul null, r3.w, r2.w, l(5)
                    add r13.xyz, v2.xyzx, -cb0[r3.w + 84].xyzx
                    dp3 r4.w, r13.xyzx, r13.xyzx
                    rsq r6.w, r4.w
                    mul r13.xyz, r6.wwww, r13.xyzx
                    sqrt r6.w, r4.w
                    add r14.xyz, cb0[r3.w + 83].xyzx, -cb0[r3.w + 84].xyzx
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r14.xyz, r7.wwww, r14.xyzx
                    dp3 r7.w, r13.xyzx, r14.xyzx
                    lt r6.w, cb0[r3.w + 84].w, r6.w
                    mul r9.w, l(0.500000), cb0[r3.w + 83].w
                    sincos null, r9.w, r9.w
                    lt r7.w, r7.w, r9.w
                    or r6.w, r6.w, r7.w
                    if_z r6.w
                      mad r4.w, r4.w, cb0[r3.w + 82].w, l(1.000000)
                      div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
                      dp3 r6.w, -r13.xyzx, r0.xyzx
                      mul r6.w, r6.w, cb0[r3.w + 81].w
                      mul r14.xyz, cb1[0].xyzx, cb0[r3.w + 80].xyzx
                      lt r7.w, l(0.000000), r6.w
                      mul r6.w, r4.w, r6.w
                      mul r15.xyz, r7.xyzx, cb0[r3.w + 81].xyzx
                      mul r15.xyz, r6.wwww, r15.xyzx
                      dp3 r6.w, r13.xyzx, r10.xyzx
                      add r6.w, r6.w, r6.w
                      mad r13.xyz, r10.xyzx, -r6.wwww, r13.xyzx
                      dp3 r6.w, r13.xyzx, r9.xyzx
                      max r6.w, r6.w, l(0.000000)
                      log r6.w, r6.w
                      mul r6.w, r1.w, r6.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, cb0[r3.w + 80].w
                      mul r4.w, r4.w, r6.w
                      mul r13.xyz, r6.xyzx, cb0[r3.w + 82].xyzx
                      mul r13.xyz, r4.wwww, r13.xyzx
                      and r15.xyz, r7.wwww, r15.xyzx
                      and r13.xyz, r7.wwww, r13.xyzx
                      mad r14.xyz, r14.xyzx, r7.xyzx, r15.xyzx
                      add r15.xyz, r8.xyzx, -r14.xyzx
                      mad r14.xyz, r8.wwww, r15.xyzx, r14.xyzx
                      add r13.xyz, r13.xyzx, r14.xyzx
                    else 
                      mov r13.xyz, l(0,0,0,0)
                    endif 
                    add r11.xyz, r11.xyzx, r13.xyzx
                    iadd r2.w, r2.w, l(1)
                  endloop 
                else 
                  mov r11.xyz, l(0,0,0,0)
                endif 
                if_nz cb2[650].w
                  sample_indexable(texture2d)(float,float,float,float) r6.xyz, v4.xyxx, t0.xyzw, s0
                  movc r7.xyz, cb1[4].xxxx, r6.xyzx, cb1[1].xyzx
                  movc r6.xyz, cb1[4].zzzz, r6.xyzx, cb1[2].xyzx
                  mov_sat r5.w, cb1[2].w
                  movc r5.xyzw, cb1[4].wwww, r5.xyzw, l(0,0,0,0)
                  dp3 r8.x, r2.xyzx, r1.xyzx
                  dp3 r8.y, r2.xyzx, r0.xyzx
                  dp3 r8.z, r2.xyzx, r4.xyzx
                  itof r1.w, cb1[0].w
                  dp3 r2.x, r3.xyzx, r3.xyzx
                  rsq r2.x, r2.x
                  mul r2.xyz, r2.xxxx, r3.xyzx
                  dp3 r2.w, r8.xyzx, r8.xyzx
                  rsq r2.w, r2.w
                  mul r8.xyz, r2.wwww, r8.xyzx
                  mov r9.xyz, r11.xyzx
                  mov r2.w, l(0)
                  loop 
                    ige r3.w, r2.w, cb2[650].x
                    breakc_nz r3.w
                    ishl r3.w, r2.w, l(2)
                    dp3 r4.w, cb2[r3.w + 3].xyzx, cb2[r3.w + 3].xyzx
                    rsq r4.w, r4.w
                    mul r10.xyz, r4.wwww, cb2[r3.w + 3].xyzx
                    dp3 r12.x, r10.xyzx, r1.xyzx
                    dp3 r12.y, r10.xyzx, r0.xyzx
                    dp3 r12.z, r10.xyzx, r4.xyzx
                    dp3 r4.w, -r12.xyzx, r3.xyzx
                    mul r4.w, r4.w, cb2[r3.w + 1].w
                    mul r10.xyz, cb1[0].xyzx, cb2[r3.w + 0].xyzx
                    lt r6.w, l(0.000000), r4.w
                    mul r13.xyz, r7.xyzx, cb2[r3.w + 1].xyzx
                    mul r13.xyz, r4.wwww, r13.xyzx
                    dp3 r4.w, r12.xyzx, r2.xyzx
                    add r4.w, r4.w, r4.w
                    mad r12.xyz, r2.xyzx, -r4.wwww, r12.xyzx
                    dp3 r4.w, r12.xyzx, r8.xyzx
                    max r4.w, r4.w, l(0.000000)
                    log r4.w, r4.w
                    mul r4.w, r1.w, r4.w
                    exp r4.w, r4.w
                    mul r4.w, r4.w, cb2[r3.w + 0].w
                    mul r12.xyz, r6.xyzx, cb2[r3.w + 2].xyzx
                    mul r12.xyz, r4.wwww, r12.xyzx
                    and r13.xyz, r6.wwww, r13.xyzx
                    and r12.xyz, r6.wwww, r12.xyzx
                    mad r10.xyz, r10.xyzx, r7.xyzx, r13.xyzx
                    add r13.xyz, r5.xyzx, -r10.xyzx
                    mad r10.xyz, r5.wwww, r13.xyzx, r10.xyzx
                    add r10.xyz, r12.xyzx, r10.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx
                    iadd r2.w, r2.w, l(1)
                  endloop 
                  mov r3.xyz, r9.xyzx
                  mov r2.w, l(0)
                  loop 
                    ige r3.w, r2.w, cb2[650].y
                    breakc_nz r3.w
                    ishl r3.w, r2.w, l(2)
                    add r10.xyz, v2.xyzx, -cb2[r3.w + 203].xyzx
                    dp3 r4.w, r10.xyzx, r10.xyzx
                    sqrt r6.w, r4.w
                    ge r6.w, cb2[r3.w + 203].w, r6.w
                    if_nz r6.w
                      rsq r6.w, r4.w
                      mul r10.xyz, r6.wwww, r10.xyzx
                      mad r4.w, r4.w, cb2[r3.w + 202].w, l(1.000000)
                      div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
                      dp3 r12.x, r10.xyzx, r1.xyzx
                      dp3 r12.y, r10.xyzx, r0.xyzx
                      dp3 r12.z, r10.xyzx, r4.xyzx
                      dp3 r6.w, -r10.xyzx, r0.xyzx
                      mul r6.w, r6.w, cb2[r3.w + 201].w
                      mul r10.xyz, cb1[0].xyzx, cb2[r3.w + 200].xyzx
                      lt r7.w, l(0.000000), r6.w
                      mul r6.w, r4.w, r6.w
                      mul r13.xyz, r7.xyzx, cb2[r3.w + 201].xyzx
                      mul r13.xyz, r6.wwww, r13.xyzx
                      dp3 r6.w, r12.xyzx, r2.xyzx
                      add r6.w, r6.w, r6.w
                      mad r12.xyz, r2.xyzx, -r6.wwww, r12.xyzx
                      dp3 r6.w, r12.xyzx, r8.xyzx
                      max r6.w, r6.w, l(0.000000)
                      log r6.w, r6.w
                      mul r6.w, r1.w, r6.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, cb2[r3.w + 200].w
                      mul r4.w, r4.w, r6.w
                      mul r12.xyz, r6.xyzx, cb2[r3.w + 202].xyzx
                      mul r12.xyz, r4.wwww, r12.xyzx
                      and r13.xyz, r7.wwww, r13.xyzx
                      and r12.xyz, r7.wwww, r12.xyzx
                      mad r10.xyz, r10.xyzx, r7.xyzx, r13.xyzx
                      add r13.xyz, r5.xyzx, -r10.xyzx
                      mad r10.xyz, r5.wwww, r13.xyzx, r10.xyzx
                      add r10.xyz, r12.xyzx, r10.xyzx
                    else 
                      mov r10.xyz, l(0,0,0,0)
                    endif 
                    add r3.xyz, r3.xyzx, r10.xyzx
                    iadd r2.w, r2.w, l(1)
                  endloop 
                  mov r11.xyz, r3.xyzx
                  mov r1.x, l(0)
                  loop 
                    ige r1.y, r1.x, cb2[650].z
                    breakc_nz r1.y
                    imul null, r1.y, r1.x, l(5)
                    add r4.xyz, v2.xyzx, -cb2[r1.y + 404].xyzx
                    dp3 r1.z, r4.xyzx, r4.xyzx
                    rsq r2.w, r1.z
                    mul r4.xyz, r2.wwww, r4.xyzx
                    sqrt r2.w, r1.z
                    add r9.xyz, cb2[r1.y + 403].xyzx, -cb2[r1.y + 404].xyzx
                    dp3 r3.w, r9.xyzx, r9.xyzx
                    rsq r3.w, r3.w
                    mul r9.xyz, r3.wwww, r9.xyzx
                    dp3 r3.w, r4.xyzx, r9.xyzx
                    lt r2.w, cb2[r1.y + 404].w, r2.w
                    mul r4.w, l(0.500000), cb2[r1.y + 403].w
                    sincos null, r4.w, r4.w
                    lt r3.w, r3.w, r4.w
                    or r2.w, r2.w, r3.w
                    if_z r2.w
                      mad r1.z, r1.z, cb2[r1.y + 402].w, l(1.000000)
                      div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
                      dp3 r2.w, -r4.xyzx, r0.xyzx
                      mul r2.w, r2.w, cb2[r1.y + 401].w
                      mul r9.xyz, cb1[0].xyzx, cb2[r1.y + 400].xyzx
                      lt r3.w, l(0.000000), r2.w
                      mul r2.w, r1.z, r2.w
                      mul r10.xyz, r7.xyzx, cb2[r1.y + 401].xyzx
                      mul r10.xyz, r2.wwww, r10.xyzx
                      dp3 r2.w, r4.xyzx, r2.xyzx
                      add r2.w, r2.w, r2.w
                      mad r4.xyz, r2.xyzx, -r2.wwww, r4.xyzx
                      dp3 r2.w, r4.xyzx, r8.xyzx
                      max r2.w, r2.w, l(0.000000)
                      log r2.w, r2.w
                      mul r2.w, r1.w, r2.w
                      exp r2.w, r2.w
                      mul r2.w, r2.w, cb2[r1.y + 400].w
                      mul r1.z, r1.z, r2.w
                      mul r4.xyz, r6.xyzx, cb2[r1.y + 402].xyzx
                      mul r4.xyz, r1.zzzz, r4.xyzx
                      and r10.xyz, r3.wwww, r10.xyzx
                      and r4.xyz, r3.wwww, r4.xyzx
                      mad r9.xyz, r9.xyzx, r7.xyzx, r10.xyzx
                      add r10.xyz, r5.xyzx, -r9.xyzx
                      mad r9.xyz, r5.wwww, r10.xyzx, r9.xyzx
                      add r4.xyz, r4.xyzx, r9.xyzx
                    else 
                      mov r4.xyz, l(0,0,0,0)
                    endif 
                    add r11.xyz, r4.xyzx, r11.xyzx
                    iadd r1.x, r1.x, l(1)
                  endloop 
                endif 
                add r0.x, r0.w, -cb4[1].x
                add r0.y, -cb4[1].x, cb4[1].y
                div r0.x, r0.x, r0.y
                max r0.x, r0.x, l(0.000000)
                add r0.yzw, -r11.xxyz, cb4[0].xxyz
                mad r0.xyz, r0.xxxx, r0.yzwy, r11.xyzx
                movc o0.xyz, cb4[0].wwww, r0.xyzx, r11.xyzx
                mov_sat o0.w, cb1[3].x
                ret 
                // Approximately 389 instruction slots used
                            
            };
        }

    }

    technique11 DrawSolid3D
    {
        pass EmptyTextureSky
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 2
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                dp4 r1.w, r0.xyzw, cb0[7].xyzw
                dp4 o0.x, r1.xyzw, cb0[0].xyzw
                dp4 o0.y, r1.xyzw, cb0[1].xyzw
                dp4 o0.z, r1.xyzw, cb0[2].xyzw
                dp4 o0.w, r1.xyzw, cb0[3].xyzw
                mov o1.xyzw, v1.xyzw
                mov o2.xy, v2.xyxx
                ret 
                // Approximately 13 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 DrawSolid2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                mov o0.xyz, v0.xyzx
                mov o0.w, l(1.000000)
                mov o1.xyzw, v1.xyzw
                mov o2.xy, l(0,0,0,0)
                ret 
                // Approximately 5 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 DrawTextured2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                mov o0.xyz, v0.xyzx
                mov o0.w, l(1.000000)
                mov o1.xyzw, v1.xyzw
                mov o2.xy, v2.xyxx
                ret 
                // Approximately 5 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDraw2D                     sampler      NA          NA    0        1
                // gColorMap2D                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float      w
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.w
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 1
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
                mul o0.w, r0.w, v1.w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 4 instruction slots used
                            
            };
        }

    }

    technique11 DrawText2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                mov o0.xyz, v0.xyzx
                mov o0.w, l(1.000000)
                mov o1.xyzw, v1.xyzw
                mov o2.xy, v2.xyxx
                ret 
                // Approximately 5 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbDrawText2D
                // {
                //
                //   float4 g2D_TextColor;              // Offset:    0 Size:    16
                //   float4 g2D_TextGlowColor;          // Offset:   16 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDraw2D                     sampler      NA          NA    0        1
                // gColorMap2D                       texture  float4          2d    0        1
                // cbDrawText2D                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 2
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
                ne r1.x, r0.w, l(0.000000)
                movc o0.xyz, r1.xxxx, cb0[0].xyzx, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

    }

    technique11 DrawSky
    {
        pass EmptySky
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 2
                dp3 r0.x, v0.xyzx, cb0[4].xyzx
                dp3 r0.y, v0.xyzx, cb0[5].xyzx
                dp3 r0.z, v0.xyzx, cb0[6].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[3].xyzw
                mov o0.xyzw, r1.xyzz
                mov o1.xyzw, v1.xyzw
                mov o2.xyz, v0.xyzx
                mov o3.xyz, l(0,0,0,0)
                mov o4.xy, v2.xyxx
                mov o5.xyz, l(0,0,0,0)
                ret 
                // Approximately 14 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float       
                // NORMAL                   0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                // TANGENT                  0   xyz         5     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                mov o0.xyzw, v1.xyzw
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

        pass DrawSkyBox
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 2
                dp3 r0.x, v0.xyzx, cb0[4].xyzx
                dp3 r0.y, v0.xyzx, cb0[5].xyzx
                dp3 r0.z, v0.xyzx, cb0[6].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[3].xyzw
                mov o0.xyzw, r1.xyzz
                mov o1.xyzw, v1.xyzw
                mov o2.xyz, v0.xyzx
                mov o3.xyz, l(0,0,0,0)
                mov o4.xy, v2.xyxx
                mov o5.xyz, l(0,0,0,0)
                ret 
                // Approximately 14 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12 [unused]
                //   int gFogEnabled;                   // Offset:   12 Size:     4 [unused]
                //   float gFogNear;                    // Offset:   16 Size:     4 [unused]
                //   float gFogFar;                     // Offset:   20 Size:     4 [unused]
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4
                //   float mPad3;                       // Offset:   36 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gCubeMap                          texture  float4        cube    0        1
                // cbAtmosphere                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float       
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                // TANGENT                  0   xyz         5     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 1
                div r0.xy, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[1].zwzz
                div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[2].x
                mul r0.xyz, r0.xyzx, v2.xyzx
                sample_indexable(texturecube)(float,float,float,float) o0.xyzw, r0.xyzx, t0.xyzw, s0
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

        pass DrawSkyDome
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 2
                dp3 r0.x, v0.xyzx, cb0[4].xyzx
                dp3 r0.y, v0.xyzx, cb0[5].xyzx
                dp3 r0.z, v0.xyzx, cb0[6].xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[3].xyzw
                mov o0.xyzw, r1.xyzz
                mov o1.xyzw, v1.xyzw
                mov o2.xyz, v0.xyzx
                mov o3.xyz, l(0,0,0,0)
                mov o4.xy, v2.xyxx
                mov o5.xyz, l(0,0,0,0)
                ret 
                // Approximately 14 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float       
                // POSITION                 0   xyz         2     NONE  float       
                // NORMAL                   0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                sample_indexable(texture2d)(float,float,float,float) o0.xyzw, v4.xyxx, t0.xyzw, s0
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 PickingIntersection
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float       
                // TANGENT                  0   xyz         4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 2
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                dp4 o0.x, r1.xyzw, cb1[4].xyzw
                dp4 o0.y, r1.xyzw, cb1[5].xyzw
                dp4 o0.z, r1.xyzw, cb1[6].xyzw
                dp4 o0.w, r1.xyzw, cb1[7].xyzw
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPicking
                // {
                //
                //   float2 gPickingRayNormalizedDirXY; // Offset:    0 Size:     8
                //   float2 gPadPicking123;             // Offset:    8 Size:     8 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPicking                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // m0:POSITION              0   xyz         0     NONE  float   xyz 
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input_siv v[3][0].xyzw, position
                dcl_temps 5
                dcl_inputprimitive triangle 
                dcl_stream m0
                dcl_outputtopology pointlist 
                dcl_output o0.xyz
                dcl_maxout 3
                div r0.x, cb1[0].x, cb0[0].x
                div r0.y, cb1[0].y, cb0[1].y
                add r1.xyz, -v[0][0].zxyz, v[1][0].zxyz
                add r2.xyz, -v[0][0].yzxy, v[2][0].yzxy
                mov r0.z, l(1.000000)
                mul r3.xyz, r0.zxyz, r2.xyzx
                mad r3.xyz, r0.yzxy, r2.yzxy, -r3.xyzx
                dp3 r0.w, r1.yzxy, r3.xyzx
                lt r1.w, r0.w, l(0.001000)
                lt r2.w, l(-0.001000), r0.w
                and r1.w, r1.w, r2.w
                div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
                dp3 r2.w, -v[0][0].xyzx, r3.xyzx
                mul r3.x, r0.w, r2.w
                lt r3.y, r3.x, l(0.000000)
                lt r3.x, l(1.000000), r3.x
                or r3.x, r3.x, r3.y
                mul r3.yzw, r1.zzxy, -v[0][0].zzxy
                mad r3.yzw, -v[0][0].yyzx, r1.xxyz, -r3.yyzw
                dp3 r3.y, r0.xyzx, r3.yzwy
                mul r3.y, r0.w, r3.y
                lt r3.z, r3.y, l(0.000000)
                mad r2.w, r2.w, r0.w, r3.y
                lt r2.w, l(1.000000), r2.w
                or r2.w, r2.w, r3.z
                not r4.y, r2.w
                mul r3.yzw, r1.xxyz, r2.xxyz
                mad r1.xyz, r1.zxyz, r2.yzxy, -r3.yzwy
                dp3 r1.x, -v[0][0].xyzx, r1.xyzx
                mul r0.w, r0.w, r1.x
                movc r4.x, r2.w, l(0), r0.w
                or r0.w, r1.w, r3.x
                movc r1.xy, r0.wwww, l(0,0,0,0), r4.xyxx
                if_nz r1.y
                  mul r0.xyz, r0.xyzx, r1.xxxx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[12].xyzw
                  dp4 r1.y, r0.xyzw, cb0[13].xyzw
                  dp4 r0.x, r0.xyzw, cb0[14].xyzw
                  mov o0.x, r1.x
                  mov o0.y, r1.y
                  mov o0.z, r0.x
                  emit_stream m0
                endif 
                ret 
                // Approximately 45 instruction slots used
                            
            }
        /* Stream out decl: "POSITION0.xyz" */;
            PixelShader = NULL;
        }

    }

}

