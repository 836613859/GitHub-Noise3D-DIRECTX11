//
// FX Version: fx_5_0
//
// 7 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorldMatrix;              // Offset:    0, size:   64
    float4x4 gWorldInvTransposeMatrix;  // Offset:   64, size:   64
}

cbuffer cbCameraInfo
{
    float4x4 gProjMatrix;               // Offset:    0, size:   64
    float4x4 gViewMatrix;               // Offset:   64, size:   64
    float4x4 gViewInvMatrix;            // Offset:  128, size:   64
    float3  gCamPos;                    // Offset:  192, size:   12
}

cbuffer cbPerFrame
{
    N_DirectionalLight gDirectionalLight_Dynamic[10];// Offset:    0, size:  640
    N_PointLight gPointLight_Dynamic[10];// Offset:  640, size:  640
    N_SpotLight gSpotLight_Dynamic[10]; // Offset: 1280, size:  800
    int     gDirectionalLightCount_Dynamic;// Offset: 2080, size:    4
    int     gPointLightCount_Dynamic;   // Offset: 2084, size:    4
    int     gSpotLightCount_Dynamic;    // Offset: 2088, size:    4
    int     gIsLightingEnabled_Dynamic; // Offset: 2092, size:    4
}

cbuffer cbPerSubset
{
    N_Material_Basic gMaterial;         // Offset:    0, size:   64
}

cbuffer cbAtmosphere
{
    float3  gFogColor3;                 // Offset:    0, size:   12
    int     gFogEnabled;                // Offset:   12, size:    4
    float   gFogNear;                   // Offset:   16, size:    4
    float   gFogFar;                    // Offset:   20, size:    4
    float   gSkyBoxWidth;               // Offset:   24, size:    4
    float   gSkyBoxHeight;              // Offset:   28, size:    4
    float   gSkyBoxDepth;               // Offset:   32, size:    4
}

cbuffer cbDrawText2D
{
    float4  g2D_TextColor;              // Offset:    0, size:   16
    float4  g2D_TextGlowColor;          // Offset:   16, size:   16
}

cbuffer cbPicking
{
    float2  gPickingRayNormalizedDirXY; // Offset:    0, size:    8
}

//
// 7 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gNormalMap;
Texture2D gSpecularMap;
TextureCube gCubeMap;
SamplerState samplerDefault
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(2);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
};
SamplerState samplerDraw2D
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
};
Texture2D gColorMap2D;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 7 technique(s)
    //
    technique11 DrawMesh
    {
        pass perPixel_0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float       
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 17
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 86
                if_z r0.w
                  mov r0.w, l(0)  // i<0: 0>
                  mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].x
                    breakc_z r5.w
                
                #line 90
                    nop 
                
                #line 133
                    nop 
                
                #line 206
                    imul null, r5.w, r3.w, l(4)
                    mov r6.xyz, cb1[r5.w + 0].xyzx  // light<0,1,2>
                    mov r7.xyz, cb1[r5.w + 1].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.w + 2].xyzx  // light<8,9,10>
                    mov r6.w, cb1[r5.w + 0].w  // light<3>
                    mov r9.xyz, cb1[r5.w + 3].xyzx  // light<12,13,14>
                
                #line 209
                    mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                    dp3 r7.w, r9.xyzx, r9.xyzx
                    rsq r7.w, r7.w
                    mul r9.xyz, r7.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 133
                    mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r10.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r10.xyz, r10.xyzx  // albedo3<0,1,2>
                    nop 
                    nop 
                    nop 
                    mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                    dp3 r7.w, r12.xyzx, r12.xyzx
                    rsq r7.w, r7.w
                    mul r12.xyz, r7.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r7.w, r12.zxyz, r11.xyzx
                    mul r13.xyz, r12.zxyz, r7.wwww
                    mov r13.xyz, -r13.xyzx
                    add r11.xyz, r11.xyzx, r13.xyzx
                    dp3 r7.w, r11.xyzx, r11.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r13.xyz, r11.yzxy, r12.zxyz
                    mul r14.xyz, r11.xyzx, r12.xyzx
                    mov r14.xyz, -r14.xyzx
                    add r13.xyz, r13.xyzx, r14.xyzx
                    dp3 r7.w, r13.xyzx, r13.xyzx
                    rsq r7.w, r7.w
                    mul r13.xyz, r7.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    mov r14.x, r11.z
                    mov r14.y, r12.y
                    mov r14.z, r13.x
                    mov r14.w, l(0)
                    dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                    mov r15.x, r11.x
                    mov r15.y, r12.z
                    mov r15.z, r13.y
                    mov r15.w, l(0)
                    dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                    mov r13.x, r11.y
                    mov r13.y, r12.x
                    mov r13.w, l(0)
                    dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                    mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                    mov r12.xyz, -r9.xyzx
                    dp3 r7.w, r12.xyzx, r11.xyzx
                    mul r5.w, r7.w, cb1[r5.w + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r6.xyz, r6.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r7.w, l(0.000000), r5.w
                    if_nz r7.w
                      mul r5.w, r5.w, l(1.000000)
                      mul r7.xyz, r7.xyzx, r10.xyzx
                      mul r7.xyz, r5.wwww, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r5.w, r9.xyzx, r11.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r10.xyz, r5.wwww, r11.xyzx
                      add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r5.w, r1.w
                      mul r10.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r5.w, r9.xyzx, r10.xyzx
                      max r5.w, r5.w, l(0.000000)
                      itof r7.w, cb2[0].w
                      log r5.w, r5.w
                      mul r5.w, r5.w, r7.w
                      exp r5.w, r5.w
                      mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r5.w, r5.w, l(1.000000)
                      mul r8.xyz, r8.xyzx, cb2[2].xyzx
                      mul r8.xyz, r5.wwww, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                    mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 93
                  mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].y
                    breakc_z r5.w
                
                #line 96
                    nop 
                
                #line 133
                    nop 
                
                #line 222
                    imul null, r5.w, r3.w, l(4)
                    mov r7.xyz, cb1[r5.w + 40].xyzx  // light<0,1,2>
                    mov r8.xyz, cb1[r5.w + 41].xyzx  // light<4,5,6>
                    mov r9.xyz, cb1[r5.w + 42].xyzx  // light<8,9,10>
                    mov r10.xyz, cb1[r5.w + 43].xyzx  // light<12,13,14>
                    mov r6.w, cb1[r5.w + 40].w  // light<3>
                    mov r7.w, cb1[r5.w + 42].w  // light<11>
                    mov r8.w, cb1[r5.w + 43].w  // light<15>
                
                #line 225
                    mov r10.xyz, -r10.xyzx
                    add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r9.w, r10.xyzx, r10.xyzx
                    rsq r10.w, r9.w
                    mul r10.xyz, r10.wwww, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                    sqrt r9.w, r9.w  // distanceFromLight<0:NaN:Inf>
                    lt r11.xy, r8.wwww, r9.wwww
                    if_nz r11.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 234
                    not r10.w, r11.y
                    not r11.y, r11.x
                    and r10.w, r10.w, r11.y
                    not r11.y, r10.w
                    if_nz r10.w
                      mul r7.w, r7.w, r9.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 234
                    else 
                      mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.w, r10.w, r11.y
                    or r9.w, r11.x, r9.w
                
                #line 270
                    if_z r9.w
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 103 "DrawMesh_Common.fx"
                      mov r11.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r11.xyz, r11.xyzx  // albedo3<0,1,2>
                      nop 
                      nop 
                      nop 
                      mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r13.zxyz, r12.xyzx
                      mul r14.xyz, r13.zxyz, r8.wwww
                      mov r14.xyz, -r14.xyzx
                      add r12.xyz, r12.xyzx, r14.xyzx
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r14.xyz, r12.yzxy, r13.zxyz
                      mul r15.xyz, r12.xyzx, r13.xyzx
                      mov r15.xyz, -r15.xyzx
                      add r14.xyz, r14.xyzx, r15.xyzx
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r15.x, r12.z
                      mov r15.y, r13.y
                      mov r15.z, r14.x
                      mov r15.w, l(0)
                      dp4 r15.x, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r16.x, r12.x
                      mov r16.y, r13.z
                      mov r16.z, r14.y
                      mov r16.w, l(0)
                      dp4 r15.y, l(0.000000, 1.000000, 0.000000, 1.000000), r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r14.x, r12.y
                      mov r14.y, r13.x
                      mov r14.w, l(0)
                      dp4 r15.z, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r12.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                      mov r12.xyz, -r12.xyzx
                      dp3 r8.w, r12.xyzx, r13.xyzx
                      mul r5.w, r8.w, cb1[r5.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.w
                      if_nz r8.w
                        mul r5.w, r5.w, r7.w
                        mul r8.xyz, r8.xyzx, r11.xyzx
                        mul r8.xyz, r5.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.w, r10.xyzx, r13.xyzx
                        add r5.w, r5.w, r5.w
                        mov r5.w, -r5.w
                        mul r11.xyz, r5.wwww, r13.xyzx
                        add r10.xyz, r10.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.w, r1.w
                        mul r11.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.w, r10.xyzx, r11.xyzx
                        max r5.w, r5.w, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.w, r5.w
                        mul r5.w, r5.w, r8.w
                        exp r5.w, r5.w
                        mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.w, r5.w, r7.w
                        mul r9.xyz, r9.xyzx, cb2[2].xyzx
                        mul r9.xyz, r5.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r7.xyz, r7.xyzx, r8.xyzx
                      add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 96
                    mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 99
                  mov r4.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.x, r3.w, cb1[130].z
                    breakc_z r5.x
                
                #line 102
                    nop 
                
                #line 133
                    nop 
                
                #line 244
                    imul null, r5.x, r3.w, l(5)
                    mov r5.yzw, cb1[r5.x + 80].xxyz  // light<0,1,2>
                    mov r7.xyz, cb1[r5.x + 81].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.x + 82].xyzx  // light<8,9,10>
                    mov r9.xyz, cb1[r5.x + 83].xyzx  // light<12,13,14>
                    mov r10.xyz, cb1[r5.x + 84].xyzx  // light<16,17,18>
                    mov r6.w, cb1[r5.x + 80].w  // light<3>
                    mov r7.w, cb1[r5.x + 82].w  // light<11>
                    mov r8.w, cb1[r5.x + 83].w  // light<15>
                    mov r9.w, cb1[r5.x + 84].w  // light<19>
                
                #line 247
                    mov r10.xyz, -r10.xyzx
                    add r11.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r10.w, r11.xyzx, r11.xyzx
                    rsq r11.w, r10.w
                    mul r11.xyz, r11.wwww, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                    sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                    add r9.xyz, r9.xyzx, r10.xyzx
                    dp3 r10.x, r9.xyzx, r9.xyzx
                    rsq r10.x, r10.x
                    mul r9.xyz, r9.xyzx, r10.xxxx
                    dp3 r9.x, r11.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                    lt r9.y, r9.w, r10.w
                    div r8.w, r8.w, l(2.000000)
                    sincos null, r8.w, r8.w
                    lt r8.w, r9.x, r8.w
                    or r9.xy, r8.wwww, r9.yyyy
                    if_nz r9.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 259
                    not r9.y, r9.y
                    not r9.z, r9.x
                    and r9.y, r9.y, r9.z
                    not r9.z, r9.y
                    if_nz r9.y
                      mul r7.w, r7.w, r10.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 259
                    else 
                      mov r5.yzw, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.y, r9.z, r9.y
                    or r9.x, r9.x, r9.y
                
                #line 270
                    if_z r9.x
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r11.xyz, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 103 "DrawMesh_Common.fx"
                      mov r9.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r9.xyz, r9.xyzx  // albedo3<0,1,2>
                      nop 
                      nop 
                      nop 
                      mov r10.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r12.zxyz, r10.xyzx
                      mul r13.xyz, r12.zxyz, r8.wwww
                      mov r13.xyz, -r13.xyzx
                      add r10.xyz, r10.xyzx, r13.xyzx
                      dp3 r8.w, r10.xyzx, r10.xyzx
                      rsq r8.w, r8.w
                      mul r10.xyz, r8.wwww, r10.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r13.xyz, r10.yzxy, r12.zxyz
                      mul r14.xyz, r10.xyzx, r12.xyzx
                      mov r14.xyz, -r14.xyzx
                      add r13.xyz, r13.xyzx, r14.xyzx
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r14.x, r10.z
                      mov r14.y, r12.y
                      mov r14.z, r13.x
                      mov r14.w, l(0)
                      dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r15.x, r10.x
                      mov r15.y, r12.z
                      mov r15.z, r13.y
                      mov r15.w, l(0)
                      dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r13.x, r10.y
                      mov r13.y, r12.x
                      mov r13.w, l(0)
                      dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r10.xyz, r11.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                      mov r10.xyz, -r10.xyzx
                      dp3 r8.w, r10.xyzx, r12.xyzx
                      mul r5.x, r8.w, cb1[r5.x + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.x, r5.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r5.yzw, r5.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.x
                      if_nz r8.w
                        mul r5.x, r5.x, r7.w
                        mul r7.xyz, r7.xyzx, r9.xyzx
                        mul r7.xyz, r5.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.x, r11.xyzx, r12.xyzx
                        add r5.x, r5.x, r5.x
                        mov r5.x, -r5.x
                        mul r9.xyz, r5.xxxx, r12.xyzx
                        add r9.xyz, r11.xyzx, r9.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.x, r1.w
                        mul r10.xyz, r3.xyzx, r5.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.x, r9.xyzx, r10.xyzx
                        max r5.x, r5.x, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.x, r5.x
                        mul r5.x, r5.x, r8.w
                        exp r5.x, r5.x
                        mul r5.x, r5.x, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.x, r5.x, r7.w
                        mul r8.xyz, r8.xyzx, cb2[2].xyzx
                        mul r8.xyz, r5.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r5.xyz, r5.yzwy, r7.xyzx
                      add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r5.xyz, r8.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r5.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 102
                    mov r5.xyz, r5.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r4.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 467 instruction slots used
                            
            };
        }

        pass perPixel_1
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 17
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 86
                if_z r0.w
                  mov r0.w, l(0)  // i<0: 0>
                  mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].x
                    breakc_z r5.w
                
                #line 90
                    nop 
                
                #line 133
                    nop 
                
                #line 206
                    imul null, r5.w, r3.w, l(4)
                    mov r6.xyz, cb1[r5.w + 0].xyzx  // light<0,1,2>
                    mov r7.xyz, cb1[r5.w + 1].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.w + 2].xyzx  // light<8,9,10>
                    mov r6.w, cb1[r5.w + 0].w  // light<3>
                    mov r9.xyz, cb1[r5.w + 3].xyzx  // light<12,13,14>
                
                #line 209
                    mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                    dp3 r7.w, r9.xyzx, r9.xyzx
                    rsq r7.w, r7.w
                    mul r9.xyz, r7.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 133
                    mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r10.xyz, v4.xyxx, t0.xyzw, s0
                    mov r10.xyz, r10.xyzx  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r10.xyz, r10.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                    nop 
                    mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                    dp3 r7.w, r12.xyzx, r12.xyzx
                    rsq r7.w, r7.w
                    mul r12.xyz, r7.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r7.w, r12.zxyz, r11.xyzx
                    mul r13.xyz, r12.zxyz, r7.wwww
                    mov r13.xyz, -r13.xyzx
                    add r11.xyz, r11.xyzx, r13.xyzx
                    dp3 r7.w, r11.xyzx, r11.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r13.xyz, r11.yzxy, r12.zxyz
                    mul r14.xyz, r11.xyzx, r12.xyzx
                    mov r14.xyz, -r14.xyzx
                    add r13.xyz, r13.xyzx, r14.xyzx
                    dp3 r7.w, r13.xyzx, r13.xyzx
                    rsq r7.w, r7.w
                    mul r13.xyz, r7.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    mov r14.x, r11.z
                    mov r14.y, r12.y
                    mov r14.z, r13.x
                    mov r14.w, l(0)
                    dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                    mov r15.x, r11.x
                    mov r15.y, r12.z
                    mov r15.z, r13.y
                    mov r15.w, l(0)
                    dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                    mov r13.x, r11.y
                    mov r13.y, r12.x
                    mov r13.w, l(0)
                    dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                    mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                    mov r12.xyz, -r9.xyzx
                    dp3 r7.w, r12.xyzx, r11.xyzx
                    mul r5.w, r7.w, cb1[r5.w + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r6.xyz, r6.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r7.w, l(0.000000), r5.w
                    if_nz r7.w
                      mul r5.w, r5.w, l(1.000000)
                      mul r7.xyz, r7.xyzx, r10.xyzx
                      mul r7.xyz, r5.wwww, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r5.w, r9.xyzx, r11.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r10.xyz, r5.wwww, r11.xyzx
                      add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r5.w, r1.w
                      mul r10.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r5.w, r9.xyzx, r10.xyzx
                      max r5.w, r5.w, l(0.000000)
                      itof r7.w, cb2[0].w
                      log r5.w, r5.w
                      mul r5.w, r5.w, r7.w
                      exp r5.w, r5.w
                      mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r5.w, r5.w, l(1.000000)
                      mul r8.xyz, r8.xyzx, cb2[2].xyzx
                      mul r8.xyz, r5.wwww, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                    mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 93
                  mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].y
                    breakc_z r5.w
                
                #line 96
                    nop 
                
                #line 133
                    nop 
                
                #line 222
                    imul null, r5.w, r3.w, l(4)
                    mov r7.xyz, cb1[r5.w + 40].xyzx  // light<0,1,2>
                    mov r8.xyz, cb1[r5.w + 41].xyzx  // light<4,5,6>
                    mov r9.xyz, cb1[r5.w + 42].xyzx  // light<8,9,10>
                    mov r10.xyz, cb1[r5.w + 43].xyzx  // light<12,13,14>
                    mov r6.w, cb1[r5.w + 40].w  // light<3>
                    mov r7.w, cb1[r5.w + 42].w  // light<11>
                    mov r8.w, cb1[r5.w + 43].w  // light<15>
                
                #line 225
                    mov r10.xyz, -r10.xyzx
                    add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r9.w, r10.xyzx, r10.xyzx
                    rsq r10.w, r9.w
                    mul r10.xyz, r10.wwww, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                    sqrt r9.w, r9.w  // distanceFromLight<0:NaN:Inf>
                    lt r11.xy, r8.wwww, r9.wwww
                    if_nz r11.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 234
                    not r10.w, r11.y
                    not r11.y, r11.x
                    and r10.w, r10.w, r11.y
                    not r11.y, r10.w
                    if_nz r10.w
                      mul r7.w, r7.w, r9.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 234
                    else 
                      mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.w, r10.w, r11.y
                    or r9.w, r11.x, r9.w
                
                #line 270
                    if_z r9.w
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 98 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r11.xyz, r11.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                      nop 
                      nop 
                      nop 
                      mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r13.zxyz, r12.xyzx
                      mul r14.xyz, r13.zxyz, r8.wwww
                      mov r14.xyz, -r14.xyzx
                      add r12.xyz, r12.xyzx, r14.xyzx
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r14.xyz, r12.yzxy, r13.zxyz
                      mul r15.xyz, r12.xyzx, r13.xyzx
                      mov r15.xyz, -r15.xyzx
                      add r14.xyz, r14.xyzx, r15.xyzx
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r15.x, r12.z
                      mov r15.y, r13.y
                      mov r15.z, r14.x
                      mov r15.w, l(0)
                      dp4 r15.x, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r16.x, r12.x
                      mov r16.y, r13.z
                      mov r16.z, r14.y
                      mov r16.w, l(0)
                      dp4 r15.y, l(0.000000, 1.000000, 0.000000, 1.000000), r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r14.x, r12.y
                      mov r14.y, r13.x
                      mov r14.w, l(0)
                      dp4 r15.z, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r12.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                      mov r12.xyz, -r12.xyzx
                      dp3 r8.w, r12.xyzx, r13.xyzx
                      mul r5.w, r8.w, cb1[r5.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.w
                      if_nz r8.w
                        mul r5.w, r5.w, r7.w
                        mul r8.xyz, r8.xyzx, r11.xyzx
                        mul r8.xyz, r5.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.w, r10.xyzx, r13.xyzx
                        add r5.w, r5.w, r5.w
                        mov r5.w, -r5.w
                        mul r11.xyz, r5.wwww, r13.xyzx
                        add r10.xyz, r10.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.w, r1.w
                        mul r11.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.w, r10.xyzx, r11.xyzx
                        max r5.w, r5.w, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.w, r5.w
                        mul r5.w, r5.w, r8.w
                        exp r5.w, r5.w
                        mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.w, r5.w, r7.w
                        mul r9.xyz, r9.xyzx, cb2[2].xyzx
                        mul r9.xyz, r5.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r7.xyz, r7.xyzx, r8.xyzx
                      add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 96
                    mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 99
                  mov r4.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.x, r3.w, cb1[130].z
                    breakc_z r5.x
                
                #line 102
                    nop 
                
                #line 133
                    nop 
                
                #line 244
                    imul null, r5.x, r3.w, l(5)
                    mov r5.yzw, cb1[r5.x + 80].xxyz  // light<0,1,2>
                    mov r7.xyz, cb1[r5.x + 81].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.x + 82].xyzx  // light<8,9,10>
                    mov r9.xyz, cb1[r5.x + 83].xyzx  // light<12,13,14>
                    mov r10.xyz, cb1[r5.x + 84].xyzx  // light<16,17,18>
                    mov r6.w, cb1[r5.x + 80].w  // light<3>
                    mov r7.w, cb1[r5.x + 82].w  // light<11>
                    mov r8.w, cb1[r5.x + 83].w  // light<15>
                    mov r9.w, cb1[r5.x + 84].w  // light<19>
                
                #line 247
                    mov r10.xyz, -r10.xyzx
                    add r11.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r10.w, r11.xyzx, r11.xyzx
                    rsq r11.w, r10.w
                    mul r11.xyz, r11.wwww, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                    sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                    add r9.xyz, r9.xyzx, r10.xyzx
                    dp3 r10.x, r9.xyzx, r9.xyzx
                    rsq r10.x, r10.x
                    mul r9.xyz, r9.xyzx, r10.xxxx
                    dp3 r9.x, r11.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                    lt r9.y, r9.w, r10.w
                    div r8.w, r8.w, l(2.000000)
                    sincos null, r8.w, r8.w
                    lt r8.w, r9.x, r8.w
                    or r9.xy, r8.wwww, r9.yyyy
                    if_nz r9.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 259
                    not r9.y, r9.y
                    not r9.z, r9.x
                    and r9.y, r9.y, r9.z
                    not r9.z, r9.y
                    if_nz r9.y
                      mul r7.w, r7.w, r10.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 259
                    else 
                      mov r5.yzw, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.y, r9.z, r9.y
                    or r9.x, r9.x, r9.y
                
                #line 270
                    if_z r9.x
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r11.xyz, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 98 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r9.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r9.xyz, r9.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                      nop 
                      nop 
                      nop 
                      mov r10.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r12.zxyz, r10.xyzx
                      mul r13.xyz, r12.zxyz, r8.wwww
                      mov r13.xyz, -r13.xyzx
                      add r10.xyz, r10.xyzx, r13.xyzx
                      dp3 r8.w, r10.xyzx, r10.xyzx
                      rsq r8.w, r8.w
                      mul r10.xyz, r8.wwww, r10.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r13.xyz, r10.yzxy, r12.zxyz
                      mul r14.xyz, r10.xyzx, r12.xyzx
                      mov r14.xyz, -r14.xyzx
                      add r13.xyz, r13.xyzx, r14.xyzx
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r14.x, r10.z
                      mov r14.y, r12.y
                      mov r14.z, r13.x
                      mov r14.w, l(0)
                      dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r15.x, r10.x
                      mov r15.y, r12.z
                      mov r15.z, r13.y
                      mov r15.w, l(0)
                      dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r13.x, r10.y
                      mov r13.y, r12.x
                      mov r13.w, l(0)
                      dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r10.xyz, r11.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                      mov r10.xyz, -r10.xyzx
                      dp3 r8.w, r10.xyzx, r12.xyzx
                      mul r5.x, r8.w, cb1[r5.x + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.x, r5.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r5.yzw, r5.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.x
                      if_nz r8.w
                        mul r5.x, r5.x, r7.w
                        mul r7.xyz, r7.xyzx, r9.xyzx
                        mul r7.xyz, r5.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.x, r11.xyzx, r12.xyzx
                        add r5.x, r5.x, r5.x
                        mov r5.x, -r5.x
                        mul r9.xyz, r5.xxxx, r12.xyzx
                        add r9.xyz, r11.xyzx, r9.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.x, r1.w
                        mul r10.xyz, r3.xyzx, r5.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.x, r9.xyzx, r10.xyzx
                        max r5.x, r5.x, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.x, r5.x
                        mul r5.x, r5.x, r8.w
                        exp r5.x, r5.x
                        mul r5.x, r5.x, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.x, r5.x, r7.w
                        mul r8.xyz, r8.xyzx, cb2[2].xyzx
                        mul r8.xyz, r5.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r5.xyz, r5.yzwy, r7.xyzx
                      add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r5.xyz, r8.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r5.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 102
                    mov r5.xyz, r5.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r4.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 468 instruction slots used
                            
            };
        }

        pass perPixel_2
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    0        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 18
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 86
                if_z r0.w
                  mov r0.w, l(0)  // i<0: 0>
                  mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].x
                    breakc_z r5.w
                
                #line 90
                    nop 
                
                #line 133
                    nop 
                
                #line 206
                    imul null, r5.w, r3.w, l(4)
                    mov r6.xyz, cb1[r5.w + 0].xyzx  // light<0,1,2>
                    mov r7.xyz, cb1[r5.w + 1].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.w + 2].xyzx  // light<8,9,10>
                    mov r6.w, cb1[r5.w + 0].w  // light<3>
                    mov r9.xyz, cb1[r5.w + 3].xyzx  // light<12,13,14>
                
                #line 209
                    mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                    dp3 r7.w, r9.xyzx, r9.xyzx
                    rsq r7.w, r7.w
                    mul r9.xyz, r7.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 133
                    mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r10.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r10.xyz, r10.xyzx  // albedo3<0,1,2>
                    nop 
                
                #line 77 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t0.xyzw, s0
                    mov r11.xy, r11.xyxx  // normSampleColor<0:Inf,2:Inf>
                    mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                    mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                    add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                    mul r11.xz, r11.xxyx, cb2[1].wwww
                    mov r11.y, l(0)
                    add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                    dp3 r7.w, r11.xyzx, r11.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                    nop 
                    nop 
                    mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                    dp3 r7.w, r13.xyzx, r13.xyzx
                    rsq r7.w, r7.w
                    mul r13.xyz, r7.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r7.w, r13.zxyz, r12.xyzx
                    mul r14.xyz, r13.zxyz, r7.wwww
                    mov r14.xyz, -r14.xyzx
                    add r12.xyz, r12.xyzx, r14.xyzx
                    dp3 r7.w, r12.xyzx, r12.xyzx
                    rsq r7.w, r7.w
                    mul r12.xyz, r7.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r14.xyz, r12.yzxy, r13.zxyz
                    mul r15.xyz, r12.xyzx, r13.xyzx
                    mov r15.xyz, -r15.xyzx
                    add r14.xyz, r14.xyzx, r15.xyzx
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r14.xyz, r7.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    mov r11.w, l(1.000000)
                    mov r15.x, r12.z
                    mov r15.y, r13.y
                    mov r15.z, r14.x
                    mov r15.w, l(0)
                    dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                    mov r16.x, r12.x
                    mov r16.y, r13.z
                    mov r16.z, r14.y
                    mov r16.w, l(0)
                    dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                    mov r14.x, r12.y
                    mov r14.y, r13.x
                    mov r14.w, l(0)
                    dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                    mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r15.xyzx, r15.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                    mov r12.xyz, -r9.xyzx
                    dp3 r7.w, r12.xyzx, r11.xyzx
                    mul r5.w, r7.w, cb1[r5.w + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r6.xyz, r6.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r7.w, l(0.000000), r5.w
                    if_nz r7.w
                      mul r5.w, r5.w, l(1.000000)
                      mul r7.xyz, r7.xyzx, r10.xyzx
                      mul r7.xyz, r5.wwww, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r5.w, r9.xyzx, r11.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r10.xyz, r5.wwww, r11.xyzx
                      add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r5.w, r1.w
                      mul r10.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r5.w, r9.xyzx, r10.xyzx
                      max r5.w, r5.w, l(0.000000)
                      itof r7.w, cb2[0].w
                      log r5.w, r5.w
                      mul r5.w, r5.w, r7.w
                      exp r5.w, r5.w
                      mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r5.w, r5.w, l(1.000000)
                      mul r8.xyz, r8.xyzx, cb2[2].xyzx
                      mul r8.xyz, r5.wwww, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                    mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 93
                  mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].y
                    breakc_z r5.w
                
                #line 96
                    nop 
                
                #line 133
                    nop 
                
                #line 222
                    imul null, r5.w, r3.w, l(4)
                    mov r7.xyz, cb1[r5.w + 40].xyzx  // light<0,1,2>
                    mov r8.xyz, cb1[r5.w + 41].xyzx  // light<4,5,6>
                    mov r9.xyz, cb1[r5.w + 42].xyzx  // light<8,9,10>
                    mov r10.xyz, cb1[r5.w + 43].xyzx  // light<12,13,14>
                    mov r6.w, cb1[r5.w + 40].w  // light<3>
                    mov r7.w, cb1[r5.w + 42].w  // light<11>
                    mov r8.w, cb1[r5.w + 43].w  // light<15>
                
                #line 225
                    mov r10.xyz, -r10.xyzx
                    add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r9.w, r10.xyzx, r10.xyzx
                    rsq r10.w, r9.w
                    mul r10.xyz, r10.wwww, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                    sqrt r9.w, r9.w  // distanceFromLight<0:NaN:Inf>
                    lt r11.xy, r8.wwww, r9.wwww
                    if_nz r11.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 234
                    not r10.w, r11.y
                    not r11.y, r11.x
                    and r10.w, r10.w, r11.y
                    not r11.y, r10.w
                    if_nz r10.w
                      mul r7.w, r7.w, r9.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 234
                    else 
                      mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.w, r10.w, r11.y
                    or r9.w, r11.x, r9.w
                
                #line 270
                    if_z r9.w
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 103 "DrawMesh_Common.fx"
                      mov r11.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r11.xyz, r11.xyzx  // albedo3<0,1,2>
                      nop 
                
                #line 77 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r12.xy, v4.xyxx, t0.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                      mov r12.xy, r12.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                      mul r12.xy, r12.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                      add r12.xy, r12.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                      mul r12.xz, r12.xxyx, cb2[1].wwww
                      mov r12.y, l(0)
                      add r12.xyz, r12.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                      nop 
                      nop 
                      mov r13.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r14.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r14.zxyz, r13.xyzx
                      mul r15.xyz, r14.zxyz, r8.wwww
                      mov r15.xyz, -r15.xyzx
                      add r13.xyz, r13.xyzx, r15.xyzx
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r15.xyz, r13.yzxy, r14.zxyz
                      mul r16.xyz, r13.xyzx, r14.xyzx
                      mov r16.xyz, -r16.xyzx
                      add r15.xyz, r15.xyzx, r16.xyzx
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r15.xyz, r8.wwww, r15.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r12.w, l(1.000000)
                      mov r16.x, r13.z
                      mov r16.y, r14.y
                      mov r16.z, r15.x
                      mov r16.w, l(0)
                      dp4 r16.x, r12.xyzw, r16.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r17.x, r13.x
                      mov r17.y, r14.z
                      mov r17.z, r15.y
                      mov r17.w, l(0)
                      dp4 r16.y, r12.xyzw, r17.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r15.x, r13.y
                      mov r15.y, r14.x
                      mov r15.w, l(0)
                      dp4 r16.z, r12.xyzw, r15.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r16.xyz, r16.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r12.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r16.xyzx, r16.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r16.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                      mov r12.xyz, -r12.xyzx
                      dp3 r8.w, r12.xyzx, r13.xyzx
                      mul r5.w, r8.w, cb1[r5.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.w
                      if_nz r8.w
                        mul r5.w, r5.w, r7.w
                        mul r8.xyz, r8.xyzx, r11.xyzx
                        mul r8.xyz, r5.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.w, r10.xyzx, r13.xyzx
                        add r5.w, r5.w, r5.w
                        mov r5.w, -r5.w
                        mul r11.xyz, r5.wwww, r13.xyzx
                        add r10.xyz, r10.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.w, r1.w
                        mul r11.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.w, r10.xyzx, r11.xyzx
                        max r5.w, r5.w, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.w, r5.w
                        mul r5.w, r5.w, r8.w
                        exp r5.w, r5.w
                        mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.w, r5.w, r7.w
                        mul r9.xyz, r9.xyzx, cb2[2].xyzx
                        mul r9.xyz, r5.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r7.xyz, r7.xyzx, r8.xyzx
                      add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 96
                    mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 99
                  mov r4.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.x, r3.w, cb1[130].z
                    breakc_z r5.x
                
                #line 102
                    nop 
                
                #line 133
                    nop 
                
                #line 244
                    imul null, r5.x, r3.w, l(5)
                    mov r5.yzw, cb1[r5.x + 80].xxyz  // light<0,1,2>
                    mov r7.xyz, cb1[r5.x + 81].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.x + 82].xyzx  // light<8,9,10>
                    mov r9.xyz, cb1[r5.x + 83].xyzx  // light<12,13,14>
                    mov r10.xyz, cb1[r5.x + 84].xyzx  // light<16,17,18>
                    mov r6.w, cb1[r5.x + 80].w  // light<3>
                    mov r7.w, cb1[r5.x + 82].w  // light<11>
                    mov r8.w, cb1[r5.x + 83].w  // light<15>
                    mov r9.w, cb1[r5.x + 84].w  // light<19>
                
                #line 247
                    mov r10.xyz, -r10.xyzx
                    add r11.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r10.w, r11.xyzx, r11.xyzx
                    rsq r11.w, r10.w
                    mul r11.xyz, r11.wwww, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                    sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                    add r9.xyz, r9.xyzx, r10.xyzx
                    dp3 r10.x, r9.xyzx, r9.xyzx
                    rsq r10.x, r10.x
                    mul r9.xyz, r9.xyzx, r10.xxxx
                    dp3 r9.x, r11.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                    lt r9.y, r9.w, r10.w
                    div r8.w, r8.w, l(2.000000)
                    sincos null, r8.w, r8.w
                    lt r8.w, r9.x, r8.w
                    or r9.xy, r8.wwww, r9.yyyy
                    if_nz r9.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 259
                    not r9.y, r9.y
                    not r9.z, r9.x
                    and r9.y, r9.y, r9.z
                    not r9.z, r9.y
                    if_nz r9.y
                      mul r7.w, r7.w, r10.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 259
                    else 
                      mov r5.yzw, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.y, r9.z, r9.y
                    or r9.x, r9.x, r9.y
                
                #line 270
                    if_z r9.x
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r11.xyz, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 103 "DrawMesh_Common.fx"
                      mov r9.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r9.xyz, r9.xyzx  // albedo3<0,1,2>
                      nop 
                
                #line 77 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r10.xy, v4.xyxx, t0.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                      mov r10.xy, r10.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                      mul r10.xy, r10.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                      add r10.xy, r10.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                      mul r10.xz, r10.xxyx, cb2[1].wwww
                      mov r10.y, l(0)
                      add r10.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                      dp3 r8.w, r10.xyzx, r10.xyzx
                      rsq r8.w, r8.w
                      mul r10.xyz, r8.wwww, r10.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                      nop 
                      nop 
                      mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r13.zxyz, r12.xyzx
                      mul r14.xyz, r13.zxyz, r8.wwww
                      mov r14.xyz, -r14.xyzx
                      add r12.xyz, r12.xyzx, r14.xyzx
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r14.xyz, r12.yzxy, r13.zxyz
                      mul r15.xyz, r12.xyzx, r13.xyzx
                      mov r15.xyz, -r15.xyzx
                      add r14.xyz, r14.xyzx, r15.xyzx
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r10.w, l(1.000000)
                      mov r15.x, r12.z
                      mov r15.y, r13.y
                      mov r15.z, r14.x
                      mov r15.w, l(0)
                      dp4 r15.x, r10.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r16.x, r12.x
                      mov r16.y, r13.z
                      mov r16.z, r14.y
                      mov r16.w, l(0)
                      dp4 r15.y, r10.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r14.x, r12.y
                      mov r14.y, r13.x
                      mov r14.w, l(0)
                      dp4 r15.z, r10.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r10.xyz, r11.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                      mov r10.xyz, -r10.xyzx
                      dp3 r8.w, r10.xyzx, r12.xyzx
                      mul r5.x, r8.w, cb1[r5.x + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.x, r5.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r5.yzw, r5.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.x
                      if_nz r8.w
                        mul r5.x, r5.x, r7.w
                        mul r7.xyz, r7.xyzx, r9.xyzx
                        mul r7.xyz, r5.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.x, r11.xyzx, r12.xyzx
                        add r5.x, r5.x, r5.x
                        mov r5.x, -r5.x
                        mul r9.xyz, r5.xxxx, r12.xyzx
                        add r9.xyz, r11.xyzx, r9.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.x, r1.w
                        mul r10.xyz, r3.xyzx, r5.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.x, r9.xyzx, r10.xyzx
                        max r5.x, r5.x, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.x, r5.x
                        mul r5.x, r5.x, r8.w
                        exp r5.x, r5.x
                        mul r5.x, r5.x, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.x, r5.x, r7.w
                        mul r8.xyz, r8.xyzx, cb2[2].xyzx
                        mul r8.xyz, r5.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r5.xyz, r5.yzwy, r7.xyzx
                      add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r5.xyz, r8.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r5.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 102
                    mov r5.xyz, r5.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r4.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 501 instruction slots used
                            
            };
        }

        pass perPixel_3
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 18
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 86
                if_z r0.w
                  mov r0.w, l(0)  // i<0: 0>
                  mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].x
                    breakc_z r5.w
                
                #line 90
                    nop 
                
                #line 133
                    nop 
                
                #line 206
                    imul null, r5.w, r3.w, l(4)
                    mov r6.xyz, cb1[r5.w + 0].xyzx  // light<0,1,2>
                    mov r7.xyz, cb1[r5.w + 1].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.w + 2].xyzx  // light<8,9,10>
                    mov r6.w, cb1[r5.w + 0].w  // light<3>
                    mov r9.xyz, cb1[r5.w + 3].xyzx  // light<12,13,14>
                
                #line 209
                    mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                    dp3 r7.w, r9.xyzx, r9.xyzx
                    rsq r7.w, r7.w
                    mul r9.xyz, r7.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 133
                    mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r10.xyz, v4.xyxx, t0.xyzw, s0
                    mov r10.xyz, r10.xyzx  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r10.xyz, r10.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                
                #line 77 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t1.xyzw, s0
                    mov r11.xy, r11.xyxx  // normSampleColor<0:Inf,2:Inf>
                    mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                    mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                    add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                    mul r11.xz, r11.xxyx, cb2[1].wwww
                    mov r11.y, l(0)
                    add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                    dp3 r7.w, r11.xyzx, r11.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                    nop 
                    nop 
                    mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                    dp3 r7.w, r13.xyzx, r13.xyzx
                    rsq r7.w, r7.w
                    mul r13.xyz, r7.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r7.w, r13.zxyz, r12.xyzx
                    mul r14.xyz, r13.zxyz, r7.wwww
                    mov r14.xyz, -r14.xyzx
                    add r12.xyz, r12.xyzx, r14.xyzx
                    dp3 r7.w, r12.xyzx, r12.xyzx
                    rsq r7.w, r7.w
                    mul r12.xyz, r7.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r14.xyz, r12.yzxy, r13.zxyz
                    mul r15.xyz, r12.xyzx, r13.xyzx
                    mov r15.xyz, -r15.xyzx
                    add r14.xyz, r14.xyzx, r15.xyzx
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r14.xyz, r7.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    mov r11.w, l(1.000000)
                    mov r15.x, r12.z
                    mov r15.y, r13.y
                    mov r15.z, r14.x
                    mov r15.w, l(0)
                    dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                    mov r16.x, r12.x
                    mov r16.y, r13.z
                    mov r16.z, r14.y
                    mov r16.w, l(0)
                    dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                    mov r14.x, r12.y
                    mov r14.y, r13.x
                    mov r14.w, l(0)
                    dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                    mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r15.xyzx, r15.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                    mov r12.xyz, -r9.xyzx
                    dp3 r7.w, r12.xyzx, r11.xyzx
                    mul r5.w, r7.w, cb1[r5.w + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r6.xyz, r6.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r7.w, l(0.000000), r5.w
                    if_nz r7.w
                      mul r5.w, r5.w, l(1.000000)
                      mul r7.xyz, r7.xyzx, r10.xyzx
                      mul r7.xyz, r5.wwww, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r5.w, r9.xyzx, r11.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r10.xyz, r5.wwww, r11.xyzx
                      add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r5.w, r1.w
                      mul r10.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r5.w, r9.xyzx, r10.xyzx
                      max r5.w, r5.w, l(0.000000)
                      itof r7.w, cb2[0].w
                      log r5.w, r5.w
                      mul r5.w, r5.w, r7.w
                      exp r5.w, r5.w
                      mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r5.w, r5.w, l(1.000000)
                      mul r8.xyz, r8.xyzx, cb2[2].xyzx
                      mul r8.xyz, r5.wwww, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                    mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 93
                  mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].y
                    breakc_z r5.w
                
                #line 96
                    nop 
                
                #line 133
                    nop 
                
                #line 222
                    imul null, r5.w, r3.w, l(4)
                    mov r7.xyz, cb1[r5.w + 40].xyzx  // light<0,1,2>
                    mov r8.xyz, cb1[r5.w + 41].xyzx  // light<4,5,6>
                    mov r9.xyz, cb1[r5.w + 42].xyzx  // light<8,9,10>
                    mov r10.xyz, cb1[r5.w + 43].xyzx  // light<12,13,14>
                    mov r6.w, cb1[r5.w + 40].w  // light<3>
                    mov r7.w, cb1[r5.w + 42].w  // light<11>
                    mov r8.w, cb1[r5.w + 43].w  // light<15>
                
                #line 225
                    mov r10.xyz, -r10.xyzx
                    add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r9.w, r10.xyzx, r10.xyzx
                    rsq r10.w, r9.w
                    mul r10.xyz, r10.wwww, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                    sqrt r9.w, r9.w  // distanceFromLight<0:NaN:Inf>
                    lt r11.xy, r8.wwww, r9.wwww
                    if_nz r11.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 234
                    not r10.w, r11.y
                    not r11.y, r11.x
                    and r10.w, r10.w, r11.y
                    not r11.y, r10.w
                    if_nz r10.w
                      mul r7.w, r7.w, r9.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 234
                    else 
                      mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.w, r10.w, r11.y
                    or r9.w, r11.x, r9.w
                
                #line 270
                    if_z r9.w
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 98 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r11.xyz, r11.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                      nop 
                
                #line 77 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r12.xy, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                      mov r12.xy, r12.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                      mul r12.xy, r12.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                      add r12.xy, r12.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                      mul r12.xz, r12.xxyx, cb2[1].wwww
                      mov r12.y, l(0)
                      add r12.xyz, r12.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                      nop 
                      nop 
                      mov r13.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r14.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r14.zxyz, r13.xyzx
                      mul r15.xyz, r14.zxyz, r8.wwww
                      mov r15.xyz, -r15.xyzx
                      add r13.xyz, r13.xyzx, r15.xyzx
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r15.xyz, r13.yzxy, r14.zxyz
                      mul r16.xyz, r13.xyzx, r14.xyzx
                      mov r16.xyz, -r16.xyzx
                      add r15.xyz, r15.xyzx, r16.xyzx
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r15.xyz, r8.wwww, r15.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r12.w, l(1.000000)
                      mov r16.x, r13.z
                      mov r16.y, r14.y
                      mov r16.z, r15.x
                      mov r16.w, l(0)
                      dp4 r16.x, r12.xyzw, r16.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r17.x, r13.x
                      mov r17.y, r14.z
                      mov r17.z, r15.y
                      mov r17.w, l(0)
                      dp4 r16.y, r12.xyzw, r17.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r15.x, r13.y
                      mov r15.y, r14.x
                      mov r15.w, l(0)
                      dp4 r16.z, r12.xyzw, r15.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r16.xyz, r16.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r12.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r16.xyzx, r16.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r16.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                      mov r12.xyz, -r12.xyzx
                      dp3 r8.w, r12.xyzx, r13.xyzx
                      mul r5.w, r8.w, cb1[r5.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.w
                      if_nz r8.w
                        mul r5.w, r5.w, r7.w
                        mul r8.xyz, r8.xyzx, r11.xyzx
                        mul r8.xyz, r5.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.w, r10.xyzx, r13.xyzx
                        add r5.w, r5.w, r5.w
                        mov r5.w, -r5.w
                        mul r11.xyz, r5.wwww, r13.xyzx
                        add r10.xyz, r10.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.w, r1.w
                        mul r11.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.w, r10.xyzx, r11.xyzx
                        max r5.w, r5.w, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.w, r5.w
                        mul r5.w, r5.w, r8.w
                        exp r5.w, r5.w
                        mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.w, r5.w, r7.w
                        mul r9.xyz, r9.xyzx, cb2[2].xyzx
                        mul r9.xyz, r5.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r7.xyz, r7.xyzx, r8.xyzx
                      add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 96
                    mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 99
                  mov r4.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.x, r3.w, cb1[130].z
                    breakc_z r5.x
                
                #line 102
                    nop 
                
                #line 133
                    nop 
                
                #line 244
                    imul null, r5.x, r3.w, l(5)
                    mov r5.yzw, cb1[r5.x + 80].xxyz  // light<0,1,2>
                    mov r7.xyz, cb1[r5.x + 81].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.x + 82].xyzx  // light<8,9,10>
                    mov r9.xyz, cb1[r5.x + 83].xyzx  // light<12,13,14>
                    mov r10.xyz, cb1[r5.x + 84].xyzx  // light<16,17,18>
                    mov r6.w, cb1[r5.x + 80].w  // light<3>
                    mov r7.w, cb1[r5.x + 82].w  // light<11>
                    mov r8.w, cb1[r5.x + 83].w  // light<15>
                    mov r9.w, cb1[r5.x + 84].w  // light<19>
                
                #line 247
                    mov r10.xyz, -r10.xyzx
                    add r11.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r10.w, r11.xyzx, r11.xyzx
                    rsq r11.w, r10.w
                    mul r11.xyz, r11.wwww, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                    sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                    add r9.xyz, r9.xyzx, r10.xyzx
                    dp3 r10.x, r9.xyzx, r9.xyzx
                    rsq r10.x, r10.x
                    mul r9.xyz, r9.xyzx, r10.xxxx
                    dp3 r9.x, r11.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                    lt r9.y, r9.w, r10.w
                    div r8.w, r8.w, l(2.000000)
                    sincos null, r8.w, r8.w
                    lt r8.w, r9.x, r8.w
                    or r9.xy, r8.wwww, r9.yyyy
                    if_nz r9.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 259
                    not r9.y, r9.y
                    not r9.z, r9.x
                    and r9.y, r9.y, r9.z
                    not r9.z, r9.y
                    if_nz r9.y
                      mul r7.w, r7.w, r10.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 259
                    else 
                      mov r5.yzw, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.y, r9.z, r9.y
                    or r9.x, r9.x, r9.y
                
                #line 270
                    if_z r9.x
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r11.xyz, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 98 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r9.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r9.xyz, r9.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                      nop 
                
                #line 77 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r10.xy, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                      mov r10.xy, r10.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                      mul r10.xy, r10.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                      add r10.xy, r10.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                      mul r10.xz, r10.xxyx, cb2[1].wwww
                      mov r10.y, l(0)
                      add r10.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                      dp3 r8.w, r10.xyzx, r10.xyzx
                      rsq r8.w, r8.w
                      mul r10.xyz, r8.wwww, r10.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                      nop 
                      nop 
                      mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r13.zxyz, r12.xyzx
                      mul r14.xyz, r13.zxyz, r8.wwww
                      mov r14.xyz, -r14.xyzx
                      add r12.xyz, r12.xyzx, r14.xyzx
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r14.xyz, r12.yzxy, r13.zxyz
                      mul r15.xyz, r12.xyzx, r13.xyzx
                      mov r15.xyz, -r15.xyzx
                      add r14.xyz, r14.xyzx, r15.xyzx
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r10.w, l(1.000000)
                      mov r15.x, r12.z
                      mov r15.y, r13.y
                      mov r15.z, r14.x
                      mov r15.w, l(0)
                      dp4 r15.x, r10.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r16.x, r12.x
                      mov r16.y, r13.z
                      mov r16.z, r14.y
                      mov r16.w, l(0)
                      dp4 r15.y, r10.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r14.x, r12.y
                      mov r14.y, r13.x
                      mov r14.w, l(0)
                      dp4 r15.z, r10.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r10.xyz, r11.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                      mov r10.xyz, -r10.xyzx
                      dp3 r8.w, r10.xyzx, r12.xyzx
                      mul r5.x, r8.w, cb1[r5.x + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.x, r5.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r5.yzw, r5.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.x
                      if_nz r8.w
                        mul r5.x, r5.x, r7.w
                        mul r7.xyz, r7.xyzx, r9.xyzx
                        mul r7.xyz, r5.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.x, r11.xyzx, r12.xyzx
                        add r5.x, r5.x, r5.x
                        mov r5.x, -r5.x
                        mul r9.xyz, r5.xxxx, r12.xyzx
                        add r9.xyz, r11.xyzx, r9.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.x, r1.w
                        mul r10.xyz, r3.xyzx, r5.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.x, r9.xyzx, r10.xyzx
                        max r5.x, r5.x, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.x, r5.x
                        mul r5.x, r5.x, r8.w
                        exp r5.x, r5.x
                        mul r5.x, r5.x, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.x, r5.x, r7.w
                        mul r8.xyz, r8.xyzx, cb2[2].xyzx
                        mul r8.xyz, r5.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r5.xyz, r5.yzwy, r7.xyzx
                      add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r5.xyz, r8.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r5.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 102
                    mov r5.xyz, r5.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r4.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 502 instruction slots used
                            
            };
        }

        pass perPixel_4
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float       
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 17
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 86
                if_z r0.w
                  mov r0.w, l(0)  // i<0: 0>
                  mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].x
                    breakc_z r5.w
                
                #line 90
                    nop 
                
                #line 133
                    nop 
                
                #line 206
                    imul null, r5.w, r3.w, l(4)
                    mov r6.xyz, cb1[r5.w + 0].xyzx  // light<0,1,2>
                    mov r7.xyz, cb1[r5.w + 1].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.w + 2].xyzx  // light<8,9,10>
                    mov r6.w, cb1[r5.w + 0].w  // light<3>
                    mov r9.xyz, cb1[r5.w + 3].xyzx  // light<12,13,14>
                
                #line 209
                    mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                    dp3 r7.w, r9.xyzx, r9.xyzx
                    rsq r7.w, r7.w
                    mul r9.xyz, r7.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 133
                    mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r10.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r10.xyz, r10.xyzx  // albedo3<0,1,2>
                    nop 
                    nop 
                    nop 
                    mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                    dp3 r7.w, r12.xyzx, r12.xyzx
                    rsq r7.w, r7.w
                    mul r12.xyz, r7.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r7.w, r12.zxyz, r11.xyzx
                    mul r13.xyz, r12.zxyz, r7.wwww
                    mov r13.xyz, -r13.xyzx
                    add r11.xyz, r11.xyzx, r13.xyzx
                    dp3 r7.w, r11.xyzx, r11.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r13.xyz, r11.yzxy, r12.zxyz
                    mul r14.xyz, r11.xyzx, r12.xyzx
                    mov r14.xyz, -r14.xyzx
                    add r13.xyz, r13.xyzx, r14.xyzx
                    dp3 r7.w, r13.xyzx, r13.xyzx
                    rsq r7.w, r7.w
                    mul r13.xyz, r7.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    mov r14.x, r11.z
                    mov r14.y, r12.y
                    mov r14.z, r13.x
                    mov r14.w, l(0)
                    dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                    mov r15.x, r11.x
                    mov r15.y, r12.z
                    mov r15.z, r13.y
                    mov r15.w, l(0)
                    dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                    mov r13.x, r11.y
                    mov r13.y, r12.x
                    mov r13.w, l(0)
                    dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                    mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                    mov r12.xyz, -r9.xyzx
                    dp3 r7.w, r12.xyzx, r11.xyzx
                    mul r5.w, r7.w, cb1[r5.w + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r6.xyz, r6.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r7.w, l(0.000000), r5.w
                    if_nz r7.w
                      mul r5.w, r5.w, l(1.000000)
                      mul r7.xyz, r7.xyzx, r10.xyzx
                      mul r7.xyz, r5.wwww, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r5.w, r9.xyzx, r11.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r10.xyz, r5.wwww, r11.xyzx
                      add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r5.w, r1.w
                      mul r10.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r5.w, r9.xyzx, r10.xyzx
                      max r5.w, r5.w, l(0.000000)
                      itof r7.w, cb2[0].w
                      log r5.w, r5.w
                      mul r5.w, r5.w, r7.w
                      exp r5.w, r5.w
                      mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r5.w, r5.w, l(1.000000)
                      mul r8.xyz, r8.xyzx, cb2[2].xyzx
                      mul r8.xyz, r5.wwww, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                    mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 93
                  mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].y
                    breakc_z r5.w
                
                #line 96
                    nop 
                
                #line 133
                    nop 
                
                #line 222
                    imul null, r5.w, r3.w, l(4)
                    mov r7.xyz, cb1[r5.w + 40].xyzx  // light<0,1,2>
                    mov r8.xyz, cb1[r5.w + 41].xyzx  // light<4,5,6>
                    mov r9.xyz, cb1[r5.w + 42].xyzx  // light<8,9,10>
                    mov r10.xyz, cb1[r5.w + 43].xyzx  // light<12,13,14>
                    mov r6.w, cb1[r5.w + 40].w  // light<3>
                    mov r7.w, cb1[r5.w + 42].w  // light<11>
                    mov r8.w, cb1[r5.w + 43].w  // light<15>
                
                #line 225
                    mov r10.xyz, -r10.xyzx
                    add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r9.w, r10.xyzx, r10.xyzx
                    rsq r10.w, r9.w
                    mul r10.xyz, r10.wwww, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                    sqrt r9.w, r9.w  // distanceFromLight<0:NaN:Inf>
                    lt r11.xy, r8.wwww, r9.wwww
                    if_nz r11.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 234
                    not r10.w, r11.y
                    not r11.y, r11.x
                    and r10.w, r10.w, r11.y
                    not r11.y, r10.w
                    if_nz r10.w
                      mul r7.w, r7.w, r9.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 234
                    else 
                      mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.w, r10.w, r11.y
                    or r9.w, r11.x, r9.w
                
                #line 270
                    if_z r9.w
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 103 "DrawMesh_Common.fx"
                      mov r11.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r11.xyz, r11.xyzx  // albedo3<0,1,2>
                      nop 
                      nop 
                      nop 
                      mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r13.zxyz, r12.xyzx
                      mul r14.xyz, r13.zxyz, r8.wwww
                      mov r14.xyz, -r14.xyzx
                      add r12.xyz, r12.xyzx, r14.xyzx
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r14.xyz, r12.yzxy, r13.zxyz
                      mul r15.xyz, r12.xyzx, r13.xyzx
                      mov r15.xyz, -r15.xyzx
                      add r14.xyz, r14.xyzx, r15.xyzx
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r15.x, r12.z
                      mov r15.y, r13.y
                      mov r15.z, r14.x
                      mov r15.w, l(0)
                      dp4 r15.x, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r16.x, r12.x
                      mov r16.y, r13.z
                      mov r16.z, r14.y
                      mov r16.w, l(0)
                      dp4 r15.y, l(0.000000, 1.000000, 0.000000, 1.000000), r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r14.x, r12.y
                      mov r14.y, r13.x
                      mov r14.w, l(0)
                      dp4 r15.z, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r12.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                      mov r12.xyz, -r12.xyzx
                      dp3 r8.w, r12.xyzx, r13.xyzx
                      mul r5.w, r8.w, cb1[r5.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.w
                      if_nz r8.w
                        mul r5.w, r5.w, r7.w
                        mul r8.xyz, r8.xyzx, r11.xyzx
                        mul r8.xyz, r5.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.w, r10.xyzx, r13.xyzx
                        add r5.w, r5.w, r5.w
                        mov r5.w, -r5.w
                        mul r11.xyz, r5.wwww, r13.xyzx
                        add r10.xyz, r10.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.w, r1.w
                        mul r11.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.w, r10.xyzx, r11.xyzx
                        max r5.w, r5.w, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.w, r5.w
                        mul r5.w, r5.w, r8.w
                        exp r5.w, r5.w
                        mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.w, r5.w, r7.w
                        mul r9.xyz, r9.xyzx, cb2[2].xyzx
                        mul r9.xyz, r5.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r7.xyz, r7.xyzx, r8.xyzx
                      add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 96
                    mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 99
                  mov r4.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.x, r3.w, cb1[130].z
                    breakc_z r5.x
                
                #line 102
                    nop 
                
                #line 133
                    nop 
                
                #line 244
                    imul null, r5.x, r3.w, l(5)
                    mov r5.yzw, cb1[r5.x + 80].xxyz  // light<0,1,2>
                    mov r7.xyz, cb1[r5.x + 81].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.x + 82].xyzx  // light<8,9,10>
                    mov r9.xyz, cb1[r5.x + 83].xyzx  // light<12,13,14>
                    mov r10.xyz, cb1[r5.x + 84].xyzx  // light<16,17,18>
                    mov r6.w, cb1[r5.x + 80].w  // light<3>
                    mov r7.w, cb1[r5.x + 82].w  // light<11>
                    mov r8.w, cb1[r5.x + 83].w  // light<15>
                    mov r9.w, cb1[r5.x + 84].w  // light<19>
                
                #line 247
                    mov r10.xyz, -r10.xyzx
                    add r11.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r10.w, r11.xyzx, r11.xyzx
                    rsq r11.w, r10.w
                    mul r11.xyz, r11.wwww, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                    sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                    add r9.xyz, r9.xyzx, r10.xyzx
                    dp3 r10.x, r9.xyzx, r9.xyzx
                    rsq r10.x, r10.x
                    mul r9.xyz, r9.xyzx, r10.xxxx
                    dp3 r9.x, r11.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                    lt r9.y, r9.w, r10.w
                    div r8.w, r8.w, l(2.000000)
                    sincos null, r8.w, r8.w
                    lt r8.w, r9.x, r8.w
                    or r9.xy, r8.wwww, r9.yyyy
                    if_nz r9.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 259
                    not r9.y, r9.y
                    not r9.z, r9.x
                    and r9.y, r9.y, r9.z
                    not r9.z, r9.y
                    if_nz r9.y
                      mul r7.w, r7.w, r10.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 259
                    else 
                      mov r5.yzw, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.y, r9.z, r9.y
                    or r9.x, r9.x, r9.y
                
                #line 270
                    if_z r9.x
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r11.xyz, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 103 "DrawMesh_Common.fx"
                      mov r9.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r9.xyz, r9.xyzx  // albedo3<0,1,2>
                      nop 
                      nop 
                      nop 
                      mov r10.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r12.zxyz, r10.xyzx
                      mul r13.xyz, r12.zxyz, r8.wwww
                      mov r13.xyz, -r13.xyzx
                      add r10.xyz, r10.xyzx, r13.xyzx
                      dp3 r8.w, r10.xyzx, r10.xyzx
                      rsq r8.w, r8.w
                      mul r10.xyz, r8.wwww, r10.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r13.xyz, r10.yzxy, r12.zxyz
                      mul r14.xyz, r10.xyzx, r12.xyzx
                      mov r14.xyz, -r14.xyzx
                      add r13.xyz, r13.xyzx, r14.xyzx
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r14.x, r10.z
                      mov r14.y, r12.y
                      mov r14.z, r13.x
                      mov r14.w, l(0)
                      dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r15.x, r10.x
                      mov r15.y, r12.z
                      mov r15.z, r13.y
                      mov r15.w, l(0)
                      dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r13.x, r10.y
                      mov r13.y, r12.x
                      mov r13.w, l(0)
                      dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r10.xyz, r11.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                      mov r10.xyz, -r10.xyzx
                      dp3 r8.w, r10.xyzx, r12.xyzx
                      mul r5.x, r8.w, cb1[r5.x + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.x, r5.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r5.yzw, r5.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.x
                      if_nz r8.w
                        mul r5.x, r5.x, r7.w
                        mul r7.xyz, r7.xyzx, r9.xyzx
                        mul r7.xyz, r5.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.x, r11.xyzx, r12.xyzx
                        add r5.x, r5.x, r5.x
                        mov r5.x, -r5.x
                        mul r9.xyz, r5.xxxx, r12.xyzx
                        add r9.xyz, r11.xyzx, r9.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.x, r1.w
                        mul r10.xyz, r3.xyzx, r5.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.x, r9.xyzx, r10.xyzx
                        max r5.x, r5.x, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.x, r5.x
                        mul r5.x, r5.x, r8.w
                        exp r5.x, r5.x
                        mul r5.x, r5.x, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.x, r5.x, r7.w
                        mul r8.xyz, r8.xyzx, cb2[2].xyzx
                        mul r8.xyz, r5.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r5.xyz, r5.yzwy, r7.xyzx
                      add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r5.xyz, r8.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r5.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 102
                    mov r5.xyz, r5.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r4.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 467 instruction slots used
                            
            };
        }

        pass perPixel_5
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 17
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 86
                if_z r0.w
                  mov r0.w, l(0)  // i<0: 0>
                  mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].x
                    breakc_z r5.w
                
                #line 90
                    nop 
                
                #line 133
                    nop 
                
                #line 206
                    imul null, r5.w, r3.w, l(4)
                    mov r6.xyz, cb1[r5.w + 0].xyzx  // light<0,1,2>
                    mov r7.xyz, cb1[r5.w + 1].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.w + 2].xyzx  // light<8,9,10>
                    mov r6.w, cb1[r5.w + 0].w  // light<3>
                    mov r9.xyz, cb1[r5.w + 3].xyzx  // light<12,13,14>
                
                #line 209
                    mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                    dp3 r7.w, r9.xyzx, r9.xyzx
                    rsq r7.w, r7.w
                    mul r9.xyz, r7.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 133
                    mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r10.xyz, v4.xyxx, t0.xyzw, s0
                    mov r10.xyz, r10.xyzx  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r10.xyz, r10.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                    nop 
                    mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                    dp3 r7.w, r12.xyzx, r12.xyzx
                    rsq r7.w, r7.w
                    mul r12.xyz, r7.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r7.w, r12.zxyz, r11.xyzx
                    mul r13.xyz, r12.zxyz, r7.wwww
                    mov r13.xyz, -r13.xyzx
                    add r11.xyz, r11.xyzx, r13.xyzx
                    dp3 r7.w, r11.xyzx, r11.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r13.xyz, r11.yzxy, r12.zxyz
                    mul r14.xyz, r11.xyzx, r12.xyzx
                    mov r14.xyz, -r14.xyzx
                    add r13.xyz, r13.xyzx, r14.xyzx
                    dp3 r7.w, r13.xyzx, r13.xyzx
                    rsq r7.w, r7.w
                    mul r13.xyz, r7.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    mov r14.x, r11.z
                    mov r14.y, r12.y
                    mov r14.z, r13.x
                    mov r14.w, l(0)
                    dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                    mov r15.x, r11.x
                    mov r15.y, r12.z
                    mov r15.z, r13.y
                    mov r15.w, l(0)
                    dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                    mov r13.x, r11.y
                    mov r13.y, r12.x
                    mov r13.w, l(0)
                    dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                    mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                    mov r12.xyz, -r9.xyzx
                    dp3 r7.w, r12.xyzx, r11.xyzx
                    mul r5.w, r7.w, cb1[r5.w + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r6.xyz, r6.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r7.w, l(0.000000), r5.w
                    if_nz r7.w
                      mul r5.w, r5.w, l(1.000000)
                      mul r7.xyz, r7.xyzx, r10.xyzx
                      mul r7.xyz, r5.wwww, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r5.w, r9.xyzx, r11.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r10.xyz, r5.wwww, r11.xyzx
                      add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r5.w, r1.w
                      mul r10.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r5.w, r9.xyzx, r10.xyzx
                      max r5.w, r5.w, l(0.000000)
                      itof r7.w, cb2[0].w
                      log r5.w, r5.w
                      mul r5.w, r5.w, r7.w
                      exp r5.w, r5.w
                      mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r5.w, r5.w, l(1.000000)
                      mul r8.xyz, r8.xyzx, cb2[2].xyzx
                      mul r8.xyz, r5.wwww, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                    mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 93
                  mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].y
                    breakc_z r5.w
                
                #line 96
                    nop 
                
                #line 133
                    nop 
                
                #line 222
                    imul null, r5.w, r3.w, l(4)
                    mov r7.xyz, cb1[r5.w + 40].xyzx  // light<0,1,2>
                    mov r8.xyz, cb1[r5.w + 41].xyzx  // light<4,5,6>
                    mov r9.xyz, cb1[r5.w + 42].xyzx  // light<8,9,10>
                    mov r10.xyz, cb1[r5.w + 43].xyzx  // light<12,13,14>
                    mov r6.w, cb1[r5.w + 40].w  // light<3>
                    mov r7.w, cb1[r5.w + 42].w  // light<11>
                    mov r8.w, cb1[r5.w + 43].w  // light<15>
                
                #line 225
                    mov r10.xyz, -r10.xyzx
                    add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r9.w, r10.xyzx, r10.xyzx
                    rsq r10.w, r9.w
                    mul r10.xyz, r10.wwww, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                    sqrt r9.w, r9.w  // distanceFromLight<0:NaN:Inf>
                    lt r11.xy, r8.wwww, r9.wwww
                    if_nz r11.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 234
                    not r10.w, r11.y
                    not r11.y, r11.x
                    and r10.w, r10.w, r11.y
                    not r11.y, r10.w
                    if_nz r10.w
                      mul r7.w, r7.w, r9.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 234
                    else 
                      mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.w, r10.w, r11.y
                    or r9.w, r11.x, r9.w
                
                #line 270
                    if_z r9.w
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 98 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r11.xyz, r11.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                      nop 
                      nop 
                      nop 
                      mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r13.zxyz, r12.xyzx
                      mul r14.xyz, r13.zxyz, r8.wwww
                      mov r14.xyz, -r14.xyzx
                      add r12.xyz, r12.xyzx, r14.xyzx
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r14.xyz, r12.yzxy, r13.zxyz
                      mul r15.xyz, r12.xyzx, r13.xyzx
                      mov r15.xyz, -r15.xyzx
                      add r14.xyz, r14.xyzx, r15.xyzx
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r15.x, r12.z
                      mov r15.y, r13.y
                      mov r15.z, r14.x
                      mov r15.w, l(0)
                      dp4 r15.x, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r16.x, r12.x
                      mov r16.y, r13.z
                      mov r16.z, r14.y
                      mov r16.w, l(0)
                      dp4 r15.y, l(0.000000, 1.000000, 0.000000, 1.000000), r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r14.x, r12.y
                      mov r14.y, r13.x
                      mov r14.w, l(0)
                      dp4 r15.z, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r12.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                      mov r12.xyz, -r12.xyzx
                      dp3 r8.w, r12.xyzx, r13.xyzx
                      mul r5.w, r8.w, cb1[r5.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.w
                      if_nz r8.w
                        mul r5.w, r5.w, r7.w
                        mul r8.xyz, r8.xyzx, r11.xyzx
                        mul r8.xyz, r5.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.w, r10.xyzx, r13.xyzx
                        add r5.w, r5.w, r5.w
                        mov r5.w, -r5.w
                        mul r11.xyz, r5.wwww, r13.xyzx
                        add r10.xyz, r10.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.w, r1.w
                        mul r11.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.w, r10.xyzx, r11.xyzx
                        max r5.w, r5.w, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.w, r5.w
                        mul r5.w, r5.w, r8.w
                        exp r5.w, r5.w
                        mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.w, r5.w, r7.w
                        mul r9.xyz, r9.xyzx, cb2[2].xyzx
                        mul r9.xyz, r5.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r7.xyz, r7.xyzx, r8.xyzx
                      add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 96
                    mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 99
                  mov r4.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.x, r3.w, cb1[130].z
                    breakc_z r5.x
                
                #line 102
                    nop 
                
                #line 133
                    nop 
                
                #line 244
                    imul null, r5.x, r3.w, l(5)
                    mov r5.yzw, cb1[r5.x + 80].xxyz  // light<0,1,2>
                    mov r7.xyz, cb1[r5.x + 81].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.x + 82].xyzx  // light<8,9,10>
                    mov r9.xyz, cb1[r5.x + 83].xyzx  // light<12,13,14>
                    mov r10.xyz, cb1[r5.x + 84].xyzx  // light<16,17,18>
                    mov r6.w, cb1[r5.x + 80].w  // light<3>
                    mov r7.w, cb1[r5.x + 82].w  // light<11>
                    mov r8.w, cb1[r5.x + 83].w  // light<15>
                    mov r9.w, cb1[r5.x + 84].w  // light<19>
                
                #line 247
                    mov r10.xyz, -r10.xyzx
                    add r11.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r10.w, r11.xyzx, r11.xyzx
                    rsq r11.w, r10.w
                    mul r11.xyz, r11.wwww, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                    sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                    add r9.xyz, r9.xyzx, r10.xyzx
                    dp3 r10.x, r9.xyzx, r9.xyzx
                    rsq r10.x, r10.x
                    mul r9.xyz, r9.xyzx, r10.xxxx
                    dp3 r9.x, r11.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                    lt r9.y, r9.w, r10.w
                    div r8.w, r8.w, l(2.000000)
                    sincos null, r8.w, r8.w
                    lt r8.w, r9.x, r8.w
                    or r9.xy, r8.wwww, r9.yyyy
                    if_nz r9.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 259
                    not r9.y, r9.y
                    not r9.z, r9.x
                    and r9.y, r9.y, r9.z
                    not r9.z, r9.y
                    if_nz r9.y
                      mul r7.w, r7.w, r10.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 259
                    else 
                      mov r5.yzw, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.y, r9.z, r9.y
                    or r9.x, r9.x, r9.y
                
                #line 270
                    if_z r9.x
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r11.xyz, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 98 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r9.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r9.xyz, r9.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                      nop 
                      nop 
                      nop 
                      mov r10.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r12.zxyz, r10.xyzx
                      mul r13.xyz, r12.zxyz, r8.wwww
                      mov r13.xyz, -r13.xyzx
                      add r10.xyz, r10.xyzx, r13.xyzx
                      dp3 r8.w, r10.xyzx, r10.xyzx
                      rsq r8.w, r8.w
                      mul r10.xyz, r8.wwww, r10.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r13.xyz, r10.yzxy, r12.zxyz
                      mul r14.xyz, r10.xyzx, r12.xyzx
                      mov r14.xyz, -r14.xyzx
                      add r13.xyz, r13.xyzx, r14.xyzx
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r14.x, r10.z
                      mov r14.y, r12.y
                      mov r14.z, r13.x
                      mov r14.w, l(0)
                      dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r15.x, r10.x
                      mov r15.y, r12.z
                      mov r15.z, r13.y
                      mov r15.w, l(0)
                      dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r13.x, r10.y
                      mov r13.y, r12.x
                      mov r13.w, l(0)
                      dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r10.xyz, r11.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                      mov r10.xyz, -r10.xyzx
                      dp3 r8.w, r10.xyzx, r12.xyzx
                      mul r5.x, r8.w, cb1[r5.x + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.x, r5.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r5.yzw, r5.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.x
                      if_nz r8.w
                        mul r5.x, r5.x, r7.w
                        mul r7.xyz, r7.xyzx, r9.xyzx
                        mul r7.xyz, r5.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.x, r11.xyzx, r12.xyzx
                        add r5.x, r5.x, r5.x
                        mov r5.x, -r5.x
                        mul r9.xyz, r5.xxxx, r12.xyzx
                        add r9.xyz, r11.xyzx, r9.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.x, r1.w
                        mul r10.xyz, r3.xyzx, r5.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.x, r9.xyzx, r10.xyzx
                        max r5.x, r5.x, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.x, r5.x
                        mul r5.x, r5.x, r8.w
                        exp r5.x, r5.x
                        mul r5.x, r5.x, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.x, r5.x, r7.w
                        mul r8.xyz, r8.xyzx, cb2[2].xyzx
                        mul r8.xyz, r5.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r5.xyz, r5.yzwy, r7.xyzx
                      add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r5.xyz, r8.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r5.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 102
                    mov r5.xyz, r5.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r4.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 468 instruction slots used
                            
            };
        }

        pass perPixel_6
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    0        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 18
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 86
                if_z r0.w
                  mov r0.w, l(0)  // i<0: 0>
                  mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].x
                    breakc_z r5.w
                
                #line 90
                    nop 
                
                #line 133
                    nop 
                
                #line 206
                    imul null, r5.w, r3.w, l(4)
                    mov r6.xyz, cb1[r5.w + 0].xyzx  // light<0,1,2>
                    mov r7.xyz, cb1[r5.w + 1].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.w + 2].xyzx  // light<8,9,10>
                    mov r6.w, cb1[r5.w + 0].w  // light<3>
                    mov r9.xyz, cb1[r5.w + 3].xyzx  // light<12,13,14>
                
                #line 209
                    mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                    dp3 r7.w, r9.xyzx, r9.xyzx
                    rsq r7.w, r7.w
                    mul r9.xyz, r7.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 133
                    mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r10.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r10.xyz, r10.xyzx  // albedo3<0,1,2>
                    nop 
                
                #line 77 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t0.xyzw, s0
                    mov r11.xy, r11.xyxx  // normSampleColor<0:Inf,2:Inf>
                    mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                    mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                    add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                    mul r11.xz, r11.xxyx, cb2[1].wwww
                    mov r11.y, l(0)
                    add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                    dp3 r7.w, r11.xyzx, r11.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                    nop 
                    nop 
                    mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                    dp3 r7.w, r13.xyzx, r13.xyzx
                    rsq r7.w, r7.w
                    mul r13.xyz, r7.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r7.w, r13.zxyz, r12.xyzx
                    mul r14.xyz, r13.zxyz, r7.wwww
                    mov r14.xyz, -r14.xyzx
                    add r12.xyz, r12.xyzx, r14.xyzx
                    dp3 r7.w, r12.xyzx, r12.xyzx
                    rsq r7.w, r7.w
                    mul r12.xyz, r7.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r14.xyz, r12.yzxy, r13.zxyz
                    mul r15.xyz, r12.xyzx, r13.xyzx
                    mov r15.xyz, -r15.xyzx
                    add r14.xyz, r14.xyzx, r15.xyzx
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r14.xyz, r7.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    mov r11.w, l(1.000000)
                    mov r15.x, r12.z
                    mov r15.y, r13.y
                    mov r15.z, r14.x
                    mov r15.w, l(0)
                    dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                    mov r16.x, r12.x
                    mov r16.y, r13.z
                    mov r16.z, r14.y
                    mov r16.w, l(0)
                    dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                    mov r14.x, r12.y
                    mov r14.y, r13.x
                    mov r14.w, l(0)
                    dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                    mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r15.xyzx, r15.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                    mov r12.xyz, -r9.xyzx
                    dp3 r7.w, r12.xyzx, r11.xyzx
                    mul r5.w, r7.w, cb1[r5.w + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r6.xyz, r6.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r7.w, l(0.000000), r5.w
                    if_nz r7.w
                      mul r5.w, r5.w, l(1.000000)
                      mul r7.xyz, r7.xyzx, r10.xyzx
                      mul r7.xyz, r5.wwww, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r5.w, r9.xyzx, r11.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r10.xyz, r5.wwww, r11.xyzx
                      add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r5.w, r1.w
                      mul r10.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r5.w, r9.xyzx, r10.xyzx
                      max r5.w, r5.w, l(0.000000)
                      itof r7.w, cb2[0].w
                      log r5.w, r5.w
                      mul r5.w, r5.w, r7.w
                      exp r5.w, r5.w
                      mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r5.w, r5.w, l(1.000000)
                      mul r8.xyz, r8.xyzx, cb2[2].xyzx
                      mul r8.xyz, r5.wwww, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                    mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 93
                  mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].y
                    breakc_z r5.w
                
                #line 96
                    nop 
                
                #line 133
                    nop 
                
                #line 222
                    imul null, r5.w, r3.w, l(4)
                    mov r7.xyz, cb1[r5.w + 40].xyzx  // light<0,1,2>
                    mov r8.xyz, cb1[r5.w + 41].xyzx  // light<4,5,6>
                    mov r9.xyz, cb1[r5.w + 42].xyzx  // light<8,9,10>
                    mov r10.xyz, cb1[r5.w + 43].xyzx  // light<12,13,14>
                    mov r6.w, cb1[r5.w + 40].w  // light<3>
                    mov r7.w, cb1[r5.w + 42].w  // light<11>
                    mov r8.w, cb1[r5.w + 43].w  // light<15>
                
                #line 225
                    mov r10.xyz, -r10.xyzx
                    add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r9.w, r10.xyzx, r10.xyzx
                    rsq r10.w, r9.w
                    mul r10.xyz, r10.wwww, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                    sqrt r9.w, r9.w  // distanceFromLight<0:NaN:Inf>
                    lt r11.xy, r8.wwww, r9.wwww
                    if_nz r11.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 234
                    not r10.w, r11.y
                    not r11.y, r11.x
                    and r10.w, r10.w, r11.y
                    not r11.y, r10.w
                    if_nz r10.w
                      mul r7.w, r7.w, r9.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 234
                    else 
                      mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.w, r10.w, r11.y
                    or r9.w, r11.x, r9.w
                
                #line 270
                    if_z r9.w
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 103 "DrawMesh_Common.fx"
                      mov r11.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r11.xyz, r11.xyzx  // albedo3<0,1,2>
                      nop 
                
                #line 77 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r12.xy, v4.xyxx, t0.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                      mov r12.xy, r12.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                      mul r12.xy, r12.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                      add r12.xy, r12.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                      mul r12.xz, r12.xxyx, cb2[1].wwww
                      mov r12.y, l(0)
                      add r12.xyz, r12.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                      nop 
                      nop 
                      mov r13.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r14.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r14.zxyz, r13.xyzx
                      mul r15.xyz, r14.zxyz, r8.wwww
                      mov r15.xyz, -r15.xyzx
                      add r13.xyz, r13.xyzx, r15.xyzx
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r15.xyz, r13.yzxy, r14.zxyz
                      mul r16.xyz, r13.xyzx, r14.xyzx
                      mov r16.xyz, -r16.xyzx
                      add r15.xyz, r15.xyzx, r16.xyzx
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r15.xyz, r8.wwww, r15.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r12.w, l(1.000000)
                      mov r16.x, r13.z
                      mov r16.y, r14.y
                      mov r16.z, r15.x
                      mov r16.w, l(0)
                      dp4 r16.x, r12.xyzw, r16.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r17.x, r13.x
                      mov r17.y, r14.z
                      mov r17.z, r15.y
                      mov r17.w, l(0)
                      dp4 r16.y, r12.xyzw, r17.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r15.x, r13.y
                      mov r15.y, r14.x
                      mov r15.w, l(0)
                      dp4 r16.z, r12.xyzw, r15.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r16.xyz, r16.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r12.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r16.xyzx, r16.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r16.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                      mov r12.xyz, -r12.xyzx
                      dp3 r8.w, r12.xyzx, r13.xyzx
                      mul r5.w, r8.w, cb1[r5.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.w
                      if_nz r8.w
                        mul r5.w, r5.w, r7.w
                        mul r8.xyz, r8.xyzx, r11.xyzx
                        mul r8.xyz, r5.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.w, r10.xyzx, r13.xyzx
                        add r5.w, r5.w, r5.w
                        mov r5.w, -r5.w
                        mul r11.xyz, r5.wwww, r13.xyzx
                        add r10.xyz, r10.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.w, r1.w
                        mul r11.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.w, r10.xyzx, r11.xyzx
                        max r5.w, r5.w, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.w, r5.w
                        mul r5.w, r5.w, r8.w
                        exp r5.w, r5.w
                        mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.w, r5.w, r7.w
                        mul r9.xyz, r9.xyzx, cb2[2].xyzx
                        mul r9.xyz, r5.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r7.xyz, r7.xyzx, r8.xyzx
                      add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 96
                    mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 99
                  mov r4.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.x, r3.w, cb1[130].z
                    breakc_z r5.x
                
                #line 102
                    nop 
                
                #line 133
                    nop 
                
                #line 244
                    imul null, r5.x, r3.w, l(5)
                    mov r5.yzw, cb1[r5.x + 80].xxyz  // light<0,1,2>
                    mov r7.xyz, cb1[r5.x + 81].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.x + 82].xyzx  // light<8,9,10>
                    mov r9.xyz, cb1[r5.x + 83].xyzx  // light<12,13,14>
                    mov r10.xyz, cb1[r5.x + 84].xyzx  // light<16,17,18>
                    mov r6.w, cb1[r5.x + 80].w  // light<3>
                    mov r7.w, cb1[r5.x + 82].w  // light<11>
                    mov r8.w, cb1[r5.x + 83].w  // light<15>
                    mov r9.w, cb1[r5.x + 84].w  // light<19>
                
                #line 247
                    mov r10.xyz, -r10.xyzx
                    add r11.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r10.w, r11.xyzx, r11.xyzx
                    rsq r11.w, r10.w
                    mul r11.xyz, r11.wwww, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                    sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                    add r9.xyz, r9.xyzx, r10.xyzx
                    dp3 r10.x, r9.xyzx, r9.xyzx
                    rsq r10.x, r10.x
                    mul r9.xyz, r9.xyzx, r10.xxxx
                    dp3 r9.x, r11.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                    lt r9.y, r9.w, r10.w
                    div r8.w, r8.w, l(2.000000)
                    sincos null, r8.w, r8.w
                    lt r8.w, r9.x, r8.w
                    or r9.xy, r8.wwww, r9.yyyy
                    if_nz r9.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 259
                    not r9.y, r9.y
                    not r9.z, r9.x
                    and r9.y, r9.y, r9.z
                    not r9.z, r9.y
                    if_nz r9.y
                      mul r7.w, r7.w, r10.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 259
                    else 
                      mov r5.yzw, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.y, r9.z, r9.y
                    or r9.x, r9.x, r9.y
                
                #line 270
                    if_z r9.x
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r11.xyz, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 103 "DrawMesh_Common.fx"
                      mov r9.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r9.xyz, r9.xyzx  // albedo3<0,1,2>
                      nop 
                
                #line 77 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r10.xy, v4.xyxx, t0.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                      mov r10.xy, r10.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                      mul r10.xy, r10.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                      add r10.xy, r10.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                      mul r10.xz, r10.xxyx, cb2[1].wwww
                      mov r10.y, l(0)
                      add r10.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                      dp3 r8.w, r10.xyzx, r10.xyzx
                      rsq r8.w, r8.w
                      mul r10.xyz, r8.wwww, r10.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                      nop 
                      nop 
                      mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r13.zxyz, r12.xyzx
                      mul r14.xyz, r13.zxyz, r8.wwww
                      mov r14.xyz, -r14.xyzx
                      add r12.xyz, r12.xyzx, r14.xyzx
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r14.xyz, r12.yzxy, r13.zxyz
                      mul r15.xyz, r12.xyzx, r13.xyzx
                      mov r15.xyz, -r15.xyzx
                      add r14.xyz, r14.xyzx, r15.xyzx
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r10.w, l(1.000000)
                      mov r15.x, r12.z
                      mov r15.y, r13.y
                      mov r15.z, r14.x
                      mov r15.w, l(0)
                      dp4 r15.x, r10.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r16.x, r12.x
                      mov r16.y, r13.z
                      mov r16.z, r14.y
                      mov r16.w, l(0)
                      dp4 r15.y, r10.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r14.x, r12.y
                      mov r14.y, r13.x
                      mov r14.w, l(0)
                      dp4 r15.z, r10.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r10.xyz, r11.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                      mov r10.xyz, -r10.xyzx
                      dp3 r8.w, r10.xyzx, r12.xyzx
                      mul r5.x, r8.w, cb1[r5.x + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.x, r5.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r5.yzw, r5.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.x
                      if_nz r8.w
                        mul r5.x, r5.x, r7.w
                        mul r7.xyz, r7.xyzx, r9.xyzx
                        mul r7.xyz, r5.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.x, r11.xyzx, r12.xyzx
                        add r5.x, r5.x, r5.x
                        mov r5.x, -r5.x
                        mul r9.xyz, r5.xxxx, r12.xyzx
                        add r9.xyz, r11.xyzx, r9.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.x, r1.w
                        mul r10.xyz, r3.xyzx, r5.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.x, r9.xyzx, r10.xyzx
                        max r5.x, r5.x, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.x, r5.x
                        mul r5.x, r5.x, r8.w
                        exp r5.x, r5.x
                        mul r5.x, r5.x, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.x, r5.x, r7.w
                        mul r8.xyz, r8.xyzx, cb2[2].xyzx
                        mul r8.xyz, r5.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r5.xyz, r5.yzwy, r7.xyzx
                      add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r5.xyz, r8.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r5.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 102
                    mov r5.xyz, r5.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r4.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 501 instruction slots used
                            
            };
        }

        pass perPixel_7
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 18
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 86
                if_z r0.w
                  mov r0.w, l(0)  // i<0: 0>
                  mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].x
                    breakc_z r5.w
                
                #line 90
                    nop 
                
                #line 133
                    nop 
                
                #line 206
                    imul null, r5.w, r3.w, l(4)
                    mov r6.xyz, cb1[r5.w + 0].xyzx  // light<0,1,2>
                    mov r7.xyz, cb1[r5.w + 1].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.w + 2].xyzx  // light<8,9,10>
                    mov r6.w, cb1[r5.w + 0].w  // light<3>
                    mov r9.xyz, cb1[r5.w + 3].xyzx  // light<12,13,14>
                
                #line 209
                    mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                    dp3 r7.w, r9.xyzx, r9.xyzx
                    rsq r7.w, r7.w
                    mul r9.xyz, r7.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 133
                    mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r10.xyz, v4.xyxx, t0.xyzw, s0
                    mov r10.xyz, r10.xyzx  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r10.xyz, r10.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                
                #line 77 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t1.xyzw, s0
                    mov r11.xy, r11.xyxx  // normSampleColor<0:Inf,2:Inf>
                    mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                    mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                    add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                    mul r11.xz, r11.xxyx, cb2[1].wwww
                    mov r11.y, l(0)
                    add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                    dp3 r7.w, r11.xyzx, r11.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                    nop 
                    nop 
                    mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                    dp3 r7.w, r13.xyzx, r13.xyzx
                    rsq r7.w, r7.w
                    mul r13.xyz, r7.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r7.w, r13.zxyz, r12.xyzx
                    mul r14.xyz, r13.zxyz, r7.wwww
                    mov r14.xyz, -r14.xyzx
                    add r12.xyz, r12.xyzx, r14.xyzx
                    dp3 r7.w, r12.xyzx, r12.xyzx
                    rsq r7.w, r7.w
                    mul r12.xyz, r7.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r14.xyz, r12.yzxy, r13.zxyz
                    mul r15.xyz, r12.xyzx, r13.xyzx
                    mov r15.xyz, -r15.xyzx
                    add r14.xyz, r14.xyzx, r15.xyzx
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r14.xyz, r7.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    mov r11.w, l(1.000000)
                    mov r15.x, r12.z
                    mov r15.y, r13.y
                    mov r15.z, r14.x
                    mov r15.w, l(0)
                    dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                    mov r16.x, r12.x
                    mov r16.y, r13.z
                    mov r16.z, r14.y
                    mov r16.w, l(0)
                    dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                    mov r14.x, r12.y
                    mov r14.y, r13.x
                    mov r14.w, l(0)
                    dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                    mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r15.xyzx, r15.xyzx
                    rsq r7.w, r7.w
                    mul r11.xyz, r7.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                    mov r12.xyz, -r9.xyzx
                    dp3 r7.w, r12.xyzx, r11.xyzx
                    mul r5.w, r7.w, cb1[r5.w + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r6.xyz, r6.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r7.w, l(0.000000), r5.w
                    if_nz r7.w
                      mul r5.w, r5.w, l(1.000000)
                      mul r7.xyz, r7.xyzx, r10.xyzx
                      mul r7.xyz, r5.wwww, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r5.w, r9.xyzx, r11.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r10.xyz, r5.wwww, r11.xyzx
                      add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r5.w, r1.w
                      mul r10.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r5.w, r9.xyzx, r10.xyzx
                      max r5.w, r5.w, l(0.000000)
                      itof r7.w, cb2[0].w
                      log r5.w, r5.w
                      mul r5.w, r5.w, r7.w
                      exp r5.w, r5.w
                      mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r5.w, r5.w, l(1.000000)
                      mul r8.xyz, r8.xyzx, cb2[2].xyzx
                      mul r8.xyz, r5.wwww, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                    add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                    mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 93
                  mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.w, r3.w, cb1[130].y
                    breakc_z r5.w
                
                #line 96
                    nop 
                
                #line 133
                    nop 
                
                #line 222
                    imul null, r5.w, r3.w, l(4)
                    mov r7.xyz, cb1[r5.w + 40].xyzx  // light<0,1,2>
                    mov r8.xyz, cb1[r5.w + 41].xyzx  // light<4,5,6>
                    mov r9.xyz, cb1[r5.w + 42].xyzx  // light<8,9,10>
                    mov r10.xyz, cb1[r5.w + 43].xyzx  // light<12,13,14>
                    mov r6.w, cb1[r5.w + 40].w  // light<3>
                    mov r7.w, cb1[r5.w + 42].w  // light<11>
                    mov r8.w, cb1[r5.w + 43].w  // light<15>
                
                #line 225
                    mov r10.xyz, -r10.xyzx
                    add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r9.w, r10.xyzx, r10.xyzx
                    rsq r10.w, r9.w
                    mul r10.xyz, r10.wwww, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                    sqrt r9.w, r9.w  // distanceFromLight<0:NaN:Inf>
                    lt r11.xy, r8.wwww, r9.wwww
                    if_nz r11.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 234
                    not r10.w, r11.y
                    not r11.y, r11.x
                    and r10.w, r10.w, r11.y
                    not r11.y, r10.w
                    if_nz r10.w
                      mul r7.w, r7.w, r9.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 234
                    else 
                      mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.w, r10.w, r11.y
                    or r9.w, r11.x, r9.w
                
                #line 270
                    if_z r9.w
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 98 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r11.xyz, r11.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                      nop 
                
                #line 77 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r12.xy, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                      mov r12.xy, r12.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                      mul r12.xy, r12.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                      add r12.xy, r12.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                      mul r12.xz, r12.xxyx, cb2[1].wwww
                      mov r12.y, l(0)
                      add r12.xyz, r12.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                      nop 
                      nop 
                      mov r13.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r14.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r14.zxyz, r13.xyzx
                      mul r15.xyz, r14.zxyz, r8.wwww
                      mov r15.xyz, -r15.xyzx
                      add r13.xyz, r13.xyzx, r15.xyzx
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r15.xyz, r13.yzxy, r14.zxyz
                      mul r16.xyz, r13.xyzx, r14.xyzx
                      mov r16.xyz, -r16.xyzx
                      add r15.xyz, r15.xyzx, r16.xyzx
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r15.xyz, r8.wwww, r15.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r12.w, l(1.000000)
                      mov r16.x, r13.z
                      mov r16.y, r14.y
                      mov r16.z, r15.x
                      mov r16.w, l(0)
                      dp4 r16.x, r12.xyzw, r16.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r17.x, r13.x
                      mov r17.y, r14.z
                      mov r17.z, r15.y
                      mov r17.w, l(0)
                      dp4 r16.y, r12.xyzw, r17.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r15.x, r13.y
                      mov r15.y, r14.x
                      mov r15.w, l(0)
                      dp4 r16.z, r12.xyzw, r15.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r16.xyz, r16.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r12.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r16.xyzx, r16.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r16.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                      mov r12.xyz, -r12.xyzx
                      dp3 r8.w, r12.xyzx, r13.xyzx
                      mul r5.w, r8.w, cb1[r5.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.w, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.w
                      if_nz r8.w
                        mul r5.w, r5.w, r7.w
                        mul r8.xyz, r8.xyzx, r11.xyzx
                        mul r8.xyz, r5.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.w, r10.xyzx, r13.xyzx
                        add r5.w, r5.w, r5.w
                        mov r5.w, -r5.w
                        mul r11.xyz, r5.wwww, r13.xyzx
                        add r10.xyz, r10.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.w, r1.w
                        mul r11.xyz, r3.xyzx, r5.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.w, r10.xyzx, r11.xyzx
                        max r5.w, r5.w, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.w, r5.w
                        mul r5.w, r5.w, r8.w
                        exp r5.w, r5.w
                        mul r5.w, r5.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.w, r5.w, r7.w
                        mul r9.xyz, r9.xyzx, cb2[2].xyzx
                        mul r9.xyz, r5.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r7.xyz, r7.xyzx, r8.xyzx
                      add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 96
                    mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 99
                  mov r4.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // i<0>
                  loop 
                    ilt r5.x, r3.w, cb1[130].z
                    breakc_z r5.x
                
                #line 102
                    nop 
                
                #line 133
                    nop 
                
                #line 244
                    imul null, r5.x, r3.w, l(5)
                    mov r5.yzw, cb1[r5.x + 80].xxyz  // light<0,1,2>
                    mov r7.xyz, cb1[r5.x + 81].xyzx  // light<4,5,6>
                    mov r8.xyz, cb1[r5.x + 82].xyzx  // light<8,9,10>
                    mov r9.xyz, cb1[r5.x + 83].xyzx  // light<12,13,14>
                    mov r10.xyz, cb1[r5.x + 84].xyzx  // light<16,17,18>
                    mov r6.w, cb1[r5.x + 80].w  // light<3>
                    mov r7.w, cb1[r5.x + 82].w  // light<11>
                    mov r8.w, cb1[r5.x + 83].w  // light<15>
                    mov r9.w, cb1[r5.x + 84].w  // light<19>
                
                #line 247
                    mov r10.xyz, -r10.xyzx
                    add r11.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                    dp3 r10.w, r11.xyzx, r11.xyzx
                    rsq r11.w, r10.w
                    mul r11.xyz, r11.wwww, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                    sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                    add r9.xyz, r9.xyzx, r10.xyzx
                    dp3 r10.x, r9.xyzx, r9.xyzx
                    rsq r10.x, r10.x
                    mul r9.xyz, r9.xyzx, r10.xxxx
                    dp3 r9.x, r11.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                    lt r9.y, r9.w, r10.w
                    div r8.w, r8.w, l(2.000000)
                    sincos null, r8.w, r8.w
                    lt r8.w, r9.x, r8.w
                    or r9.xy, r8.wwww, r9.yyyy
                    if_nz r9.y
                      mov r8.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 259
                    not r9.y, r9.y
                    not r9.z, r9.x
                    and r9.y, r9.y, r9.z
                    not r9.z, r9.y
                    if_nz r9.y
                      mul r7.w, r7.w, r10.w
                      add r7.w, r7.w, l(1.000000)
                      div r7.w, l(1.000000), r7.w  // attenuation<0:NaN:Inf>
                      mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                      mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                      mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 259
                    else 
                      mov r5.yzw, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                      mov r8.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                      mov r7.w, l(0)  // attenuation<0: 0f>
                      mov r6.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                    endif 
                    and r9.y, r9.z, r9.y
                    or r9.x, r9.x, r9.y
                
                #line 270
                    if_z r9.x
                      mov r8.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 133
                    mov r11.xyz, r11.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.w, r7.w  // attenuation<0:NaN:Inf>
                    mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                
                #line 141
                    if_z r8.w
                
                #line 150
                      nop 
                
                #line 98 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r9.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                      mov r9.xyz, r9.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                      nop 
                
                #line 77 "DrawMesh_Common.fx"
                      sample_indexable(texture2d)(float,float,float,float) r10.xy, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                      mov r10.xy, r10.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                      mul r10.xy, r10.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                      add r10.xy, r10.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                      mul r10.xz, r10.xxyx, cb2[1].wwww
                      mov r10.y, l(0)
                      add r10.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                      dp3 r8.w, r10.xyzx, r10.xyzx
                      rsq r8.w, r8.w
                      mul r10.xyz, r8.wwww, r10.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                      nop 
                      nop 
                      mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                      dp3 r8.w, r13.xyzx, r13.xyzx
                      rsq r8.w, r8.w
                      mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                      dp3 r8.w, r13.zxyz, r12.xyzx
                      mul r14.xyz, r13.zxyz, r8.wwww
                      mov r14.xyz, -r14.xyzx
                      add r12.xyz, r12.xyzx, r14.xyzx
                      dp3 r8.w, r12.xyzx, r12.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                      mul r14.xyz, r12.yzxy, r13.zxyz
                      mul r15.xyz, r12.xyzx, r13.xyzx
                      mov r15.xyz, -r15.xyzx
                      add r14.xyz, r14.xyzx, r15.xyzx
                      dp3 r8.w, r14.xyzx, r14.xyzx
                      rsq r8.w, r8.w
                      mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                      mov r10.w, l(1.000000)
                      mov r15.x, r12.z
                      mov r15.y, r13.y
                      mov r15.z, r14.x
                      mov r15.w, l(0)
                      dp4 r15.x, r10.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                      mov r16.x, r12.x
                      mov r16.y, r13.z
                      mov r16.z, r14.y
                      mov r16.w, l(0)
                      dp4 r15.y, r10.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                      mov r14.x, r12.y
                      mov r14.y, r13.x
                      mov r14.w, l(0)
                      dp4 r15.z, r10.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                      mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      nop 
                      nop 
                      nop 
                
                #line 159
                      nop 
                      mov r10.xyz, r11.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r8.w, r15.xyzx, r15.xyzx
                      rsq r8.w, r8.w
                      mul r12.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                      mov r10.xyz, -r10.xyzx
                      dp3 r8.w, r10.xyzx, r12.xyzx
                      mul r5.x, r8.w, cb1[r5.x + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                      mov r5.x, r5.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                      mul r5.yzw, r5.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                      lt r8.w, l(0.000000), r5.x
                      if_nz r8.w
                        mul r5.x, r5.x, r7.w
                        mul r7.xyz, r7.xyzx, r9.xyzx
                        mul r7.xyz, r5.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                        dp3 r5.x, r11.xyzx, r12.xyzx
                        add r5.x, r5.x, r5.x
                        mov r5.x, -r5.x
                        mul r9.xyz, r5.xxxx, r12.xyzx
                        add r9.xyz, r11.xyzx, r9.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                        rsq r5.x, r1.w
                        mul r10.xyz, r3.xyzx, r5.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                        dp3 r5.x, r9.xyzx, r10.xyzx
                        max r5.x, r5.x, l(0.000000)
                        itof r8.w, cb2[0].w
                        log r5.x, r5.x
                        mul r5.x, r5.x, r8.w
                        exp r5.x, r5.x
                        mul r5.x, r5.x, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                        mul r5.x, r5.x, r7.w
                        mul r8.xyz, r8.xyzx, cb2[2].xyzx
                        mul r8.xyz, r5.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                      else 
                        mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                        mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 187
                      add r5.xyz, r5.yzwy, r7.xyzx
                      add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                      add r5.xyz, r8.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                    else 
                      mov r5.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 102
                    mov r5.xyz, r5.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                    iadd r3.w, r3.w, l(1)  // i<0>
                  endloop 
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r4.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 502 instruction slots used
                            
            };
        }

        pass perPixel_8
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gCubeMap                          texture  float4        cube    0        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float       
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 16
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 87
                mov r3.w, l(0)  // i<0: 0>
                mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.x, r5.w, cb1[130].x
                  breakc_z r6.x
                
                #line 90
                  nop 
                
                #line 133
                  nop 
                
                #line 206
                  imul null, r6.x, r5.w, l(4)
                  mov r6.yzw, cb1[r6.x + 0].xxyz  // light<0,1,2>
                  mov r7.xyz, cb1[r6.x + 1].xyzx  // light<4,5,6>
                  mov r8.xyz, cb1[r6.x + 2].xyzx  // light<8,9,10>
                  mov r7.w, cb1[r6.x + 0].w  // light<3>
                  mov r9.xyz, cb1[r6.x + 3].xyzx  // light<12,13,14>
                
                #line 209
                  mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                  dp3 r8.w, r9.xyzx, r9.xyzx
                  rsq r8.w, r8.w
                  mul r9.xyz, r8.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 133
                  mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 150
                  nop 
                
                #line 103 "DrawMesh_Common.fx"
                  mov r10.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                  mov r10.xyz, r10.xyzx  // albedo3<0,1,2>
                  nop 
                  nop 
                  nop 
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r8.w, r12.xyzx, r12.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r8.w, r12.zxyz, r11.xyzx
                  mul r13.xyz, r12.zxyz, r8.wwww
                  mov r13.xyz, -r13.xyzx
                  add r11.xyz, r11.xyzx, r13.xyzx
                  dp3 r8.w, r11.xyzx, r11.xyzx
                  rsq r8.w, r8.w
                  mul r11.xyz, r8.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r11.yzxy, r12.zxyz
                  mul r14.xyz, r11.xyzx, r12.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r8.w, r13.xyzx, r13.xyzx
                  rsq r8.w, r8.w
                  mul r13.xyz, r8.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r11.z
                  mov r14.y, r12.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r11.x
                  mov r15.y, r12.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r11.y
                  mov r13.y, r12.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r8.w, r11.xyzx, r14.xyzx
                  add r8.w, r8.w, r8.w
                  mov r8.w, -r8.w
                  mul r12.xyz, r8.wwww, r14.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t0.xyzw, s0
                  max r8.w, cb2[2].w, l(0.000000)
                  min r11.w, r8.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                  mov r11.xyz, r11.xyzx  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 154 "DrawMesh_Phong.fx"
                  mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                  nop 
                  nop 
                
                #line 159
                  nop 
                  mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r14.xyzx, r14.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                  mov r13.xyz, -r9.xyzx
                  dp3 r8.w, r13.xyzx, r12.xyzx
                  mul r6.x, r8.w, cb1[r6.x + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                  mov r6.x, r6.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                  mul r6.yzw, r6.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  lt r8.w, l(0.000000), r6.x
                  if_nz r8.w
                    mul r6.x, r6.x, l(1.000000)
                    mul r7.xyz, r7.xyzx, r10.xyzx
                    mul r7.xyz, r6.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                    dp3 r6.x, r9.xyzx, r12.xyzx
                    add r6.x, r6.x, r6.x
                    mov r6.x, -r6.x
                    mul r10.xyz, r6.xxxx, r12.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                    rsq r6.x, r1.w
                    mul r10.xyz, r3.xyzx, r6.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                    dp3 r6.x, r9.xyzx, r10.xyzx
                    max r6.x, r6.x, l(0.000000)
                    itof r8.w, cb2[0].w
                    log r6.x, r6.x
                    mul r6.x, r6.x, r8.w
                    exp r6.x, r6.x
                    mul r6.x, r6.x, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                    mul r6.x, r6.x, l(1.000000)
                    mul r8.xyz, r8.xyzx, cb2[2].xyzx
                    mul r8.xyz, r6.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                  else 
                    mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 187
                  add r6.xyz, r6.yzwy, r7.xyzx
                  mov r7.xyz, -r6.xyzx
                  add r7.xyz, r7.xyzx, r11.xyzx
                  mul r7.xyz, r7.xyzx, r11.wwww
                  add r6.xyz, r6.xyzx, r7.xyzx
                  add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                  mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 93
                mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].y
                  breakc_z r6.w
                
                #line 96
                  nop 
                
                #line 133
                  nop 
                
                #line 222
                  imul null, r6.w, r5.w, l(4)
                  mov r7.xyz, cb1[r6.w + 40].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 41].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 42].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 43].xyzx  // light<12,13,14>
                  mov r7.w, cb1[r6.w + 40].w  // light<3>
                  mov r8.w, cb1[r6.w + 42].w  // light<11>
                  mov r9.w, cb1[r6.w + 43].w  // light<15>
                
                #line 225
                  mov r10.xyz, -r10.xyzx
                  add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r11.x, r10.w
                  mul r10.xyz, r10.xyzx, r11.xxxx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                  sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                  lt r11.xy, r9.wwww, r10.wwww
                  if_nz r11.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 234
                  not r11.y, r11.y
                  not r11.z, r11.x
                  and r11.y, r11.y, r11.z
                  not r11.z, r11.y
                  if_nz r11.y
                    mul r8.w, r8.w, r10.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 234
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.w, r11.z, r11.y
                  or r10.w, r11.x, r10.w
                
                #line 270
                  if_z r10.w
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 153
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r12.xyzx, r12.xyzx
                  rsq r10.w, r10.w
                  mul r12.xyz, r10.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r12.zxyz, r11.xyzx
                  mul r13.xyz, r12.zxyz, r10.wwww
                  mov r13.xyz, -r13.xyzx
                  add r11.xyz, r11.xyzx, r13.xyzx
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r11.yzxy, r12.zxyz
                  mul r14.xyz, r11.xyzx, r12.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r11.z
                  mov r14.y, r12.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r11.x
                  mov r15.y, r12.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r11.y
                  mov r13.y, r12.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r10.w, r11.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r12.xyz, r10.wwww, r14.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t0.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r12.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r12.xyz, r12.xyzx  // albedo3<0,1,2>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r11.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r14.xyzx, r14.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r12.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r10.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r12.xyz, r6.wwww, r14.xyzx
                      add r10.xyz, r10.xyzx, r12.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r10.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r11.xyzx
                    mul r8.xyz, r8.xyzx, r11.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 96
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 99
                mov r5.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].z
                  breakc_z r6.w
                
                #line 102
                  nop 
                
                #line 133
                  nop 
                
                #line 244
                  imul null, r6.w, r5.w, l(5)
                  mov r7.xyz, cb1[r6.w + 80].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 81].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 82].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 83].xyzx  // light<12,13,14>
                  mov r11.xyz, cb1[r6.w + 84].xyzx  // light<16,17,18>
                  mov r7.w, cb1[r6.w + 80].w  // light<3>
                  mov r8.w, cb1[r6.w + 82].w  // light<11>
                  mov r9.w, cb1[r6.w + 83].w  // light<15>
                  mov r10.w, cb1[r6.w + 84].w  // light<19>
                
                #line 247
                  mov r11.xyz, -r11.xyzx
                  add r12.xyz, r2.xyzx, r11.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r11.w, r12.xyzx, r12.xyzx
                  rsq r12.w, r11.w
                  mul r12.xyz, r12.wwww, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                  sqrt r11.w, r11.w  // distanceFromLight<0:NaN:Inf>
                  add r10.xyz, r10.xyzx, r11.xyzx
                  dp3 r11.x, r10.xyzx, r10.xyzx
                  rsq r11.x, r11.x
                  mul r10.xyz, r10.xyzx, r11.xxxx
                  dp3 r10.x, r12.xyzx, r10.xyzx  // Cos_Theta<0:NaN:Inf>
                  lt r10.y, r10.w, r11.w
                  div r9.w, r9.w, l(2.000000)
                  sincos null, r9.w, r9.w
                  lt r9.w, r10.x, r9.w
                  or r10.xy, r9.wwww, r10.yyyy
                  if_nz r10.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 259
                  not r10.y, r10.y
                  not r10.z, r10.x
                  and r10.y, r10.y, r10.z
                  not r10.z, r10.y
                  if_nz r10.y
                    mul r8.w, r8.w, r11.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 259
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.y, r10.z, r10.y
                  or r10.x, r10.x, r10.y
                
                #line 270
                  if_z r10.x
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r12.xyz, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 153
                  mov r10.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r11.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r11.zxyz, r10.xyzx
                  mul r13.xyz, r11.zxyz, r10.wwww
                  mov r13.xyz, -r13.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r10.w, r10.w
                  mul r10.xyz, r10.wwww, r10.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r10.yzxy, r11.zxyz
                  mul r14.xyz, r10.xyzx, r11.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r10.z
                  mov r14.y, r11.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r10.x
                  mov r15.y, r11.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r10.y
                  mov r13.y, r11.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r10.xyz, -r10.xyzx
                  dp3 r10.w, r10.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r11.xyz, r10.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t0.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r11.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r11.xyz, r11.xyzx  // albedo3<0,1,2>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r10.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r12.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r14.xyzx, r14.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r11.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r12.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r11.xyz, r6.wwww, r14.xyzx
                      add r11.xyz, r12.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r11.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r8.xyzx, r10.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 102
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 86
                if_z r0.w
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r5.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  else 
                    mov r4.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 515 instruction slots used
                            
            };
        }

        pass perPixel_9
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gCubeMap                          texture  float4        cube    1        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 16
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 87
                mov r3.w, l(0)  // i<0: 0>
                mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.x, r5.w, cb1[130].x
                  breakc_z r6.x
                
                #line 90
                  nop 
                
                #line 133
                  nop 
                
                #line 206
                  imul null, r6.x, r5.w, l(4)
                  mov r6.yzw, cb1[r6.x + 0].xxyz  // light<0,1,2>
                  mov r7.xyz, cb1[r6.x + 1].xyzx  // light<4,5,6>
                  mov r8.xyz, cb1[r6.x + 2].xyzx  // light<8,9,10>
                  mov r7.w, cb1[r6.x + 0].w  // light<3>
                  mov r9.xyz, cb1[r6.x + 3].xyzx  // light<12,13,14>
                
                #line 209
                  mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                  dp3 r8.w, r9.xyzx, r9.xyzx
                  rsq r8.w, r8.w
                  mul r9.xyz, r8.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 133
                  mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 150
                  nop 
                
                #line 98 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r10.xyz, v4.xyxx, t0.xyzw, s0
                  mov r10.xyz, r10.xyzx  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                  mov r10.xyz, r10.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                  nop 
                  nop 
                  nop 
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r8.w, r12.xyzx, r12.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r8.w, r12.zxyz, r11.xyzx
                  mul r13.xyz, r12.zxyz, r8.wwww
                  mov r13.xyz, -r13.xyzx
                  add r11.xyz, r11.xyzx, r13.xyzx
                  dp3 r8.w, r11.xyzx, r11.xyzx
                  rsq r8.w, r8.w
                  mul r11.xyz, r8.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r11.yzxy, r12.zxyz
                  mul r14.xyz, r11.xyzx, r12.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r8.w, r13.xyzx, r13.xyzx
                  rsq r8.w, r8.w
                  mul r13.xyz, r8.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r11.z
                  mov r14.y, r12.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r11.x
                  mov r15.y, r12.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r11.y
                  mov r13.y, r12.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r8.w, r11.xyzx, r14.xyzx
                  add r8.w, r8.w, r8.w
                  mov r8.w, -r8.w
                  mul r12.xyz, r8.wwww, r14.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t1.xyzw, s0
                  max r8.w, cb2[2].w, l(0.000000)
                  min r11.w, r8.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                  mov r11.xyz, r11.xyzx  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 154 "DrawMesh_Phong.fx"
                  mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                  nop 
                  nop 
                
                #line 159
                  nop 
                  mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r14.xyzx, r14.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                  mov r13.xyz, -r9.xyzx
                  dp3 r8.w, r13.xyzx, r12.xyzx
                  mul r6.x, r8.w, cb1[r6.x + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                  mov r6.x, r6.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                  mul r6.yzw, r6.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  lt r8.w, l(0.000000), r6.x
                  if_nz r8.w
                    mul r6.x, r6.x, l(1.000000)
                    mul r7.xyz, r7.xyzx, r10.xyzx
                    mul r7.xyz, r6.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                    dp3 r6.x, r9.xyzx, r12.xyzx
                    add r6.x, r6.x, r6.x
                    mov r6.x, -r6.x
                    mul r10.xyz, r6.xxxx, r12.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                    rsq r6.x, r1.w
                    mul r10.xyz, r3.xyzx, r6.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                    dp3 r6.x, r9.xyzx, r10.xyzx
                    max r6.x, r6.x, l(0.000000)
                    itof r8.w, cb2[0].w
                    log r6.x, r6.x
                    mul r6.x, r6.x, r8.w
                    exp r6.x, r6.x
                    mul r6.x, r6.x, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                    mul r6.x, r6.x, l(1.000000)
                    mul r8.xyz, r8.xyzx, cb2[2].xyzx
                    mul r8.xyz, r6.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                  else 
                    mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 187
                  add r6.xyz, r6.yzwy, r7.xyzx
                  mov r7.xyz, -r6.xyzx
                  add r7.xyz, r7.xyzx, r11.xyzx
                  mul r7.xyz, r7.xyzx, r11.wwww
                  add r6.xyz, r6.xyzx, r7.xyzx
                  add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                  mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 93
                mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].y
                  breakc_z r6.w
                
                #line 96
                  nop 
                
                #line 133
                  nop 
                
                #line 222
                  imul null, r6.w, r5.w, l(4)
                  mov r7.xyz, cb1[r6.w + 40].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 41].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 42].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 43].xyzx  // light<12,13,14>
                  mov r7.w, cb1[r6.w + 40].w  // light<3>
                  mov r8.w, cb1[r6.w + 42].w  // light<11>
                  mov r9.w, cb1[r6.w + 43].w  // light<15>
                
                #line 225
                  mov r10.xyz, -r10.xyzx
                  add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r11.x, r10.w
                  mul r10.xyz, r10.xyzx, r11.xxxx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                  sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                  lt r11.xy, r9.wwww, r10.wwww
                  if_nz r11.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 234
                  not r11.y, r11.y
                  not r11.z, r11.x
                  and r11.y, r11.y, r11.z
                  not r11.z, r11.y
                  if_nz r11.y
                    mul r8.w, r8.w, r10.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 234
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.w, r11.z, r11.y
                  or r10.w, r11.x, r10.w
                
                #line 270
                  if_z r10.w
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 153
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r12.xyzx, r12.xyzx
                  rsq r10.w, r10.w
                  mul r12.xyz, r10.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r12.zxyz, r11.xyzx
                  mul r13.xyz, r12.zxyz, r10.wwww
                  mov r13.xyz, -r13.xyzx
                  add r11.xyz, r11.xyzx, r13.xyzx
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r11.yzxy, r12.zxyz
                  mul r14.xyz, r11.xyzx, r12.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r11.z
                  mov r14.y, r12.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r11.x
                  mov r15.y, r12.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r11.y
                  mov r13.y, r12.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r10.w, r11.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r12.xyz, r10.wwww, r14.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t1.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r12.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r12.xyz, r12.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r11.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r14.xyzx, r14.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r12.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r10.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r12.xyz, r6.wwww, r14.xyzx
                      add r10.xyz, r10.xyzx, r12.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r10.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r11.xyzx
                    mul r8.xyz, r8.xyzx, r11.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 96
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 99
                mov r5.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].z
                  breakc_z r6.w
                
                #line 102
                  nop 
                
                #line 133
                  nop 
                
                #line 244
                  imul null, r6.w, r5.w, l(5)
                  mov r7.xyz, cb1[r6.w + 80].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 81].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 82].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 83].xyzx  // light<12,13,14>
                  mov r11.xyz, cb1[r6.w + 84].xyzx  // light<16,17,18>
                  mov r7.w, cb1[r6.w + 80].w  // light<3>
                  mov r8.w, cb1[r6.w + 82].w  // light<11>
                  mov r9.w, cb1[r6.w + 83].w  // light<15>
                  mov r10.w, cb1[r6.w + 84].w  // light<19>
                
                #line 247
                  mov r11.xyz, -r11.xyzx
                  add r12.xyz, r2.xyzx, r11.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r11.w, r12.xyzx, r12.xyzx
                  rsq r12.w, r11.w
                  mul r12.xyz, r12.wwww, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                  sqrt r11.w, r11.w  // distanceFromLight<0:NaN:Inf>
                  add r10.xyz, r10.xyzx, r11.xyzx
                  dp3 r11.x, r10.xyzx, r10.xyzx
                  rsq r11.x, r11.x
                  mul r10.xyz, r10.xyzx, r11.xxxx
                  dp3 r10.x, r12.xyzx, r10.xyzx  // Cos_Theta<0:NaN:Inf>
                  lt r10.y, r10.w, r11.w
                  div r9.w, r9.w, l(2.000000)
                  sincos null, r9.w, r9.w
                  lt r9.w, r10.x, r9.w
                  or r10.xy, r9.wwww, r10.yyyy
                  if_nz r10.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 259
                  not r10.y, r10.y
                  not r10.z, r10.x
                  and r10.y, r10.y, r10.z
                  not r10.z, r10.y
                  if_nz r10.y
                    mul r8.w, r8.w, r11.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 259
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.y, r10.z, r10.y
                  or r10.x, r10.x, r10.y
                
                #line 270
                  if_z r10.x
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r12.xyz, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 153
                  mov r10.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r11.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r11.zxyz, r10.xyzx
                  mul r13.xyz, r11.zxyz, r10.wwww
                  mov r13.xyz, -r13.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r10.w, r10.w
                  mul r10.xyz, r10.wwww, r10.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r10.yzxy, r11.zxyz
                  mul r14.xyz, r10.xyzx, r11.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r10.z
                  mov r14.y, r11.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r10.x
                  mov r15.y, r11.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r10.y
                  mov r13.y, r11.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r10.xyz, -r10.xyzx
                  dp3 r10.w, r10.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r11.xyz, r10.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t1.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r11.xyz, r11.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r10.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r12.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r14.xyzx, r14.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r11.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r12.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r11.xyz, r6.wwww, r14.xyzx
                      add r11.xyz, r12.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r11.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r8.xyzx, r10.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 102
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 86
                if_z r0.w
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r5.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  else 
                    mov r4.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 516 instruction slots used
                            
            };
        }

        pass perPixel_10
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    0        1
                // gCubeMap                          texture  float4        cube    1        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 17
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 87
                mov r3.w, l(0)  // i<0: 0>
                mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.x, r5.w, cb1[130].x
                  breakc_z r6.x
                
                #line 90
                  nop 
                
                #line 133
                  nop 
                
                #line 206
                  imul null, r6.x, r5.w, l(4)
                  mov r6.yzw, cb1[r6.x + 0].xxyz  // light<0,1,2>
                  mov r7.xyz, cb1[r6.x + 1].xyzx  // light<4,5,6>
                  mov r8.xyz, cb1[r6.x + 2].xyzx  // light<8,9,10>
                  mov r7.w, cb1[r6.x + 0].w  // light<3>
                  mov r9.xyz, cb1[r6.x + 3].xyzx  // light<12,13,14>
                
                #line 209
                  mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                  dp3 r8.w, r9.xyzx, r9.xyzx
                  rsq r8.w, r8.w
                  mul r9.xyz, r8.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 133
                  mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 150
                  nop 
                
                #line 103 "DrawMesh_Common.fx"
                  mov r10.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                  mov r10.xyz, r10.xyzx  // albedo3<0,1,2>
                  nop 
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t0.xyzw, s0
                  mov r11.xy, r11.xyxx  // normSampleColor<0:Inf,2:Inf>
                  mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r11.xz, r11.xxyx, cb2[1].wwww
                  mov r11.y, l(0)
                  add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r8.w, r11.xyzx, r11.xyzx
                  rsq r8.w, r8.w
                  mul r11.xyz, r8.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                  nop 
                  nop 
                  mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r8.w, r13.xyzx, r13.xyzx
                  rsq r8.w, r8.w
                  mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r8.w, r13.zxyz, r12.xyzx
                  mul r14.xyz, r13.zxyz, r8.wwww
                  mov r14.xyz, -r14.xyzx
                  add r12.xyz, r12.xyzx, r14.xyzx
                  dp3 r8.w, r12.xyzx, r12.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r12.yzxy, r13.zxyz
                  mul r15.xyz, r12.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r8.w, r14.xyzx, r14.xyzx
                  rsq r8.w, r8.w
                  mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r11.w, l(1.000000)
                  mov r15.x, r12.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r12.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r12.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r8.w, r11.xyzx, r15.xyzx
                  add r8.w, r8.w, r8.w
                  mov r8.w, -r8.w
                  mul r12.xyz, r8.wwww, r15.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t1.xyzw, s0
                  max r8.w, cb2[2].w, l(0.000000)
                  min r11.w, r8.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                  mov r11.xyz, r11.xyzx  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 154 "DrawMesh_Phong.fx"
                  mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                  nop 
                  nop 
                
                #line 159
                  nop 
                  mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r15.xyzx, r15.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                  mov r13.xyz, -r9.xyzx
                  dp3 r8.w, r13.xyzx, r12.xyzx
                  mul r6.x, r8.w, cb1[r6.x + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                  mov r6.x, r6.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                  mul r6.yzw, r6.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  lt r8.w, l(0.000000), r6.x
                  if_nz r8.w
                    mul r6.x, r6.x, l(1.000000)
                    mul r7.xyz, r7.xyzx, r10.xyzx
                    mul r7.xyz, r6.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                    dp3 r6.x, r9.xyzx, r12.xyzx
                    add r6.x, r6.x, r6.x
                    mov r6.x, -r6.x
                    mul r10.xyz, r6.xxxx, r12.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                    rsq r6.x, r1.w
                    mul r10.xyz, r3.xyzx, r6.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                    dp3 r6.x, r9.xyzx, r10.xyzx
                    max r6.x, r6.x, l(0.000000)
                    itof r8.w, cb2[0].w
                    log r6.x, r6.x
                    mul r6.x, r6.x, r8.w
                    exp r6.x, r6.x
                    mul r6.x, r6.x, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                    mul r6.x, r6.x, l(1.000000)
                    mul r8.xyz, r8.xyzx, cb2[2].xyzx
                    mul r8.xyz, r6.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                  else 
                    mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 187
                  add r6.xyz, r6.yzwy, r7.xyzx
                  mov r7.xyz, -r6.xyzx
                  add r7.xyz, r7.xyzx, r11.xyzx
                  mul r7.xyz, r7.xyzx, r11.wwww
                  add r6.xyz, r6.xyzx, r7.xyzx
                  add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                  mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 93
                mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].y
                  breakc_z r6.w
                
                #line 96
                  nop 
                
                #line 133
                  nop 
                
                #line 222
                  imul null, r6.w, r5.w, l(4)
                  mov r7.xyz, cb1[r6.w + 40].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 41].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 42].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 43].xyzx  // light<12,13,14>
                  mov r7.w, cb1[r6.w + 40].w  // light<3>
                  mov r8.w, cb1[r6.w + 42].w  // light<11>
                  mov r9.w, cb1[r6.w + 43].w  // light<15>
                
                #line 225
                  mov r10.xyz, -r10.xyzx
                  add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r11.x, r10.w
                  mul r10.xyz, r10.xyzx, r11.xxxx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                  sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                  lt r11.xy, r9.wwww, r10.wwww
                  if_nz r11.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 234
                  not r11.y, r11.y
                  not r11.z, r11.x
                  and r11.y, r11.y, r11.z
                  not r11.z, r11.y
                  if_nz r11.y
                    mul r8.w, r8.w, r10.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 234
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.w, r11.z, r11.y
                  or r10.w, r11.x, r10.w
                
                #line 270
                  if_z r10.w
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t0.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                  mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r11.xz, r11.xxyx, cb2[1].wwww
                  mov r11.y, l(0)
                  add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r13.zxyz, r12.xyzx
                  mul r14.xyz, r13.zxyz, r10.wwww
                  mov r14.xyz, -r14.xyzx
                  add r12.xyz, r12.xyzx, r14.xyzx
                  dp3 r10.w, r12.xyzx, r12.xyzx
                  rsq r10.w, r10.w
                  mul r12.xyz, r10.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r12.yzxy, r13.zxyz
                  mul r15.xyz, r12.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r10.w, r14.xyzx, r14.xyzx
                  rsq r10.w, r10.w
                  mul r14.xyz, r10.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r11.w, l(1.000000)
                  mov r15.x, r12.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r12.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r12.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r10.w, r11.xyzx, r15.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r12.xyz, r10.wwww, r15.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t1.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r12.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r12.xyz, r12.xyzx  // albedo3<0,1,2>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r11.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r15.xyzx, r15.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r12.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r10.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r12.xyz, r6.wwww, r14.xyzx
                      add r10.xyz, r10.xyzx, r12.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r10.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r11.xyzx
                    mul r8.xyz, r8.xyzx, r11.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 96
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 99
                mov r5.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].z
                  breakc_z r6.w
                
                #line 102
                  nop 
                
                #line 133
                  nop 
                
                #line 244
                  imul null, r6.w, r5.w, l(5)
                  mov r7.xyz, cb1[r6.w + 80].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 81].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 82].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 83].xyzx  // light<12,13,14>
                  mov r11.xyz, cb1[r6.w + 84].xyzx  // light<16,17,18>
                  mov r7.w, cb1[r6.w + 80].w  // light<3>
                  mov r8.w, cb1[r6.w + 82].w  // light<11>
                  mov r9.w, cb1[r6.w + 83].w  // light<15>
                  mov r10.w, cb1[r6.w + 84].w  // light<19>
                
                #line 247
                  mov r11.xyz, -r11.xyzx
                  add r12.xyz, r2.xyzx, r11.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r11.w, r12.xyzx, r12.xyzx
                  rsq r12.w, r11.w
                  mul r12.xyz, r12.wwww, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                  sqrt r11.w, r11.w  // distanceFromLight<0:NaN:Inf>
                  add r10.xyz, r10.xyzx, r11.xyzx
                  dp3 r11.x, r10.xyzx, r10.xyzx
                  rsq r11.x, r11.x
                  mul r10.xyz, r10.xyzx, r11.xxxx
                  dp3 r10.x, r12.xyzx, r10.xyzx  // Cos_Theta<0:NaN:Inf>
                  lt r10.y, r10.w, r11.w
                  div r9.w, r9.w, l(2.000000)
                  sincos null, r9.w, r9.w
                  lt r9.w, r10.x, r9.w
                  or r10.xy, r9.wwww, r10.yyyy
                  if_nz r10.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 259
                  not r10.y, r10.y
                  not r10.z, r10.x
                  and r10.y, r10.y, r10.z
                  not r10.z, r10.y
                  if_nz r10.y
                    mul r8.w, r8.w, r11.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 259
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.y, r10.z, r10.y
                  or r10.x, r10.x, r10.y
                
                #line 270
                  if_z r10.x
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r12.xyz, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r10.xy, v4.xyxx, t0.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                  mov r10.xy, r10.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r10.xy, r10.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r10.xy, r10.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r10.xz, r10.xxyx, cb2[1].wwww
                  mov r10.y, l(0)
                  add r10.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r10.w, r10.w
                  mul r10.xyz, r10.wwww, r10.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r11.w, r13.xyzx, r13.xyzx
                  rsq r11.w, r11.w
                  mul r13.xyz, r11.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r11.w, r13.zxyz, r11.xyzx
                  mul r14.xyz, r13.zxyz, r11.wwww
                  mov r14.xyz, -r14.xyzx
                  add r11.xyz, r11.xyzx, r14.xyzx
                  dp3 r11.w, r11.xyzx, r11.xyzx
                  rsq r11.w, r11.w
                  mul r11.xyz, r11.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r11.yzxy, r13.zxyz
                  mul r15.xyz, r11.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r11.w, r14.xyzx, r14.xyzx
                  rsq r11.w, r11.w
                  mul r14.xyz, r11.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r10.w, l(1.000000)
                  mov r15.x, r11.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r10.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r11.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r10.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r11.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r10.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r10.xyz, -r10.xyzx
                  dp3 r10.w, r10.xyzx, r15.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r11.xyz, r10.wwww, r15.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t1.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r11.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r11.xyz, r11.xyzx  // albedo3<0,1,2>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r10.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r12.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r15.xyzx, r15.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r11.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r12.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r11.xyz, r6.wwww, r14.xyzx
                      add r11.xyz, r12.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r11.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r8.xyzx, r10.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 102
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 86
                if_z r0.w
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r5.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  else 
                    mov r4.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 549 instruction slots used
                            
            };
        }

        pass perPixel_11
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 17
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 87
                mov r3.w, l(0)  // i<0: 0>
                mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.x, r5.w, cb1[130].x
                  breakc_z r6.x
                
                #line 90
                  nop 
                
                #line 133
                  nop 
                
                #line 206
                  imul null, r6.x, r5.w, l(4)
                  mov r6.yzw, cb1[r6.x + 0].xxyz  // light<0,1,2>
                  mov r7.xyz, cb1[r6.x + 1].xyzx  // light<4,5,6>
                  mov r8.xyz, cb1[r6.x + 2].xyzx  // light<8,9,10>
                  mov r7.w, cb1[r6.x + 0].w  // light<3>
                  mov r9.xyz, cb1[r6.x + 3].xyzx  // light<12,13,14>
                
                #line 209
                  mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                  dp3 r8.w, r9.xyzx, r9.xyzx
                  rsq r8.w, r8.w
                  mul r9.xyz, r8.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 133
                  mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 150
                  nop 
                
                #line 98 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r10.xyz, v4.xyxx, t0.xyzw, s0
                  mov r10.xyz, r10.xyzx  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                  mov r10.xyz, r10.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                  nop 
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t1.xyzw, s0
                  mov r11.xy, r11.xyxx  // normSampleColor<0:Inf,2:Inf>
                  mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r11.xz, r11.xxyx, cb2[1].wwww
                  mov r11.y, l(0)
                  add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r8.w, r11.xyzx, r11.xyzx
                  rsq r8.w, r8.w
                  mul r11.xyz, r8.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                  nop 
                  nop 
                  mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r8.w, r13.xyzx, r13.xyzx
                  rsq r8.w, r8.w
                  mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r8.w, r13.zxyz, r12.xyzx
                  mul r14.xyz, r13.zxyz, r8.wwww
                  mov r14.xyz, -r14.xyzx
                  add r12.xyz, r12.xyzx, r14.xyzx
                  dp3 r8.w, r12.xyzx, r12.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r12.yzxy, r13.zxyz
                  mul r15.xyz, r12.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r8.w, r14.xyzx, r14.xyzx
                  rsq r8.w, r8.w
                  mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r11.w, l(1.000000)
                  mov r15.x, r12.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r12.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r12.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r8.w, r11.xyzx, r15.xyzx
                  add r8.w, r8.w, r8.w
                  mov r8.w, -r8.w
                  mul r12.xyz, r8.wwww, r15.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t2.xyzw, s0
                  max r8.w, cb2[2].w, l(0.000000)
                  min r11.w, r8.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                  mov r11.xyz, r11.xyzx  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 154 "DrawMesh_Phong.fx"
                  mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                  nop 
                  nop 
                
                #line 159
                  nop 
                  mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r15.xyzx, r15.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                  mov r13.xyz, -r9.xyzx
                  dp3 r8.w, r13.xyzx, r12.xyzx
                  mul r6.x, r8.w, cb1[r6.x + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                  mov r6.x, r6.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                  mul r6.yzw, r6.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  lt r8.w, l(0.000000), r6.x
                  if_nz r8.w
                    mul r6.x, r6.x, l(1.000000)
                    mul r7.xyz, r7.xyzx, r10.xyzx
                    mul r7.xyz, r6.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                    dp3 r6.x, r9.xyzx, r12.xyzx
                    add r6.x, r6.x, r6.x
                    mov r6.x, -r6.x
                    mul r10.xyz, r6.xxxx, r12.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                    rsq r6.x, r1.w
                    mul r10.xyz, r3.xyzx, r6.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                    dp3 r6.x, r9.xyzx, r10.xyzx
                    max r6.x, r6.x, l(0.000000)
                    itof r8.w, cb2[0].w
                    log r6.x, r6.x
                    mul r6.x, r6.x, r8.w
                    exp r6.x, r6.x
                    mul r6.x, r6.x, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                    mul r6.x, r6.x, l(1.000000)
                    mul r8.xyz, r8.xyzx, cb2[2].xyzx
                    mul r8.xyz, r6.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                  else 
                    mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 187
                  add r6.xyz, r6.yzwy, r7.xyzx
                  mov r7.xyz, -r6.xyzx
                  add r7.xyz, r7.xyzx, r11.xyzx
                  mul r7.xyz, r7.xyzx, r11.wwww
                  add r6.xyz, r6.xyzx, r7.xyzx
                  add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                  mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 93
                mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].y
                  breakc_z r6.w
                
                #line 96
                  nop 
                
                #line 133
                  nop 
                
                #line 222
                  imul null, r6.w, r5.w, l(4)
                  mov r7.xyz, cb1[r6.w + 40].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 41].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 42].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 43].xyzx  // light<12,13,14>
                  mov r7.w, cb1[r6.w + 40].w  // light<3>
                  mov r8.w, cb1[r6.w + 42].w  // light<11>
                  mov r9.w, cb1[r6.w + 43].w  // light<15>
                
                #line 225
                  mov r10.xyz, -r10.xyzx
                  add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r11.x, r10.w
                  mul r10.xyz, r10.xyzx, r11.xxxx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                  sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                  lt r11.xy, r9.wwww, r10.wwww
                  if_nz r11.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 234
                  not r11.y, r11.y
                  not r11.z, r11.x
                  and r11.y, r11.y, r11.z
                  not r11.z, r11.y
                  if_nz r11.y
                    mul r8.w, r8.w, r10.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 234
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.w, r11.z, r11.y
                  or r10.w, r11.x, r10.w
                
                #line 270
                  if_z r10.w
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                  mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r11.xz, r11.xxyx, cb2[1].wwww
                  mov r11.y, l(0)
                  add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r13.zxyz, r12.xyzx
                  mul r14.xyz, r13.zxyz, r10.wwww
                  mov r14.xyz, -r14.xyzx
                  add r12.xyz, r12.xyzx, r14.xyzx
                  dp3 r10.w, r12.xyzx, r12.xyzx
                  rsq r10.w, r10.w
                  mul r12.xyz, r10.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r12.yzxy, r13.zxyz
                  mul r15.xyz, r12.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r10.w, r14.xyzx, r14.xyzx
                  rsq r10.w, r10.w
                  mul r14.xyz, r10.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r11.w, l(1.000000)
                  mov r15.x, r12.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r12.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r12.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r10.w, r11.xyzx, r15.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r12.xyz, r10.wwww, r15.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t2.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r12.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r12.xyz, r12.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r11.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r15.xyzx, r15.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r12.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r10.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r12.xyz, r6.wwww, r14.xyzx
                      add r10.xyz, r10.xyzx, r12.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r10.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r11.xyzx
                    mul r8.xyz, r8.xyzx, r11.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 96
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 99
                mov r5.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].z
                  breakc_z r6.w
                
                #line 102
                  nop 
                
                #line 133
                  nop 
                
                #line 244
                  imul null, r6.w, r5.w, l(5)
                  mov r7.xyz, cb1[r6.w + 80].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 81].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 82].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 83].xyzx  // light<12,13,14>
                  mov r11.xyz, cb1[r6.w + 84].xyzx  // light<16,17,18>
                  mov r7.w, cb1[r6.w + 80].w  // light<3>
                  mov r8.w, cb1[r6.w + 82].w  // light<11>
                  mov r9.w, cb1[r6.w + 83].w  // light<15>
                  mov r10.w, cb1[r6.w + 84].w  // light<19>
                
                #line 247
                  mov r11.xyz, -r11.xyzx
                  add r12.xyz, r2.xyzx, r11.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r11.w, r12.xyzx, r12.xyzx
                  rsq r12.w, r11.w
                  mul r12.xyz, r12.wwww, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                  sqrt r11.w, r11.w  // distanceFromLight<0:NaN:Inf>
                  add r10.xyz, r10.xyzx, r11.xyzx
                  dp3 r11.x, r10.xyzx, r10.xyzx
                  rsq r11.x, r11.x
                  mul r10.xyz, r10.xyzx, r11.xxxx
                  dp3 r10.x, r12.xyzx, r10.xyzx  // Cos_Theta<0:NaN:Inf>
                  lt r10.y, r10.w, r11.w
                  div r9.w, r9.w, l(2.000000)
                  sincos null, r9.w, r9.w
                  lt r9.w, r10.x, r9.w
                  or r10.xy, r9.wwww, r10.yyyy
                  if_nz r10.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 259
                  not r10.y, r10.y
                  not r10.z, r10.x
                  and r10.y, r10.y, r10.z
                  not r10.z, r10.y
                  if_nz r10.y
                    mul r8.w, r8.w, r11.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 259
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.y, r10.z, r10.y
                  or r10.x, r10.x, r10.y
                
                #line 270
                  if_z r10.x
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r12.xyz, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r10.xy, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                  mov r10.xy, r10.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r10.xy, r10.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r10.xy, r10.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r10.xz, r10.xxyx, cb2[1].wwww
                  mov r10.y, l(0)
                  add r10.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r10.w, r10.w
                  mul r10.xyz, r10.wwww, r10.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r11.w, r13.xyzx, r13.xyzx
                  rsq r11.w, r11.w
                  mul r13.xyz, r11.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r11.w, r13.zxyz, r11.xyzx
                  mul r14.xyz, r13.zxyz, r11.wwww
                  mov r14.xyz, -r14.xyzx
                  add r11.xyz, r11.xyzx, r14.xyzx
                  dp3 r11.w, r11.xyzx, r11.xyzx
                  rsq r11.w, r11.w
                  mul r11.xyz, r11.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r11.yzxy, r13.zxyz
                  mul r15.xyz, r11.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r11.w, r14.xyzx, r14.xyzx
                  rsq r11.w, r11.w
                  mul r14.xyz, r11.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r10.w, l(1.000000)
                  mov r15.x, r11.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r10.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r11.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r10.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r11.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r10.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r10.xyz, -r10.xyzx
                  dp3 r10.w, r10.xyzx, r15.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r11.xyz, r10.wwww, r15.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t2.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r11.xyz, r11.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r10.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r12.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r15.xyzx, r15.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r11.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r12.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r11.xyz, r6.wwww, r14.xyzx
                      add r11.xyz, r12.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r11.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r8.xyzx, r10.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 102
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 86
                if_z r0.w
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r5.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  else 
                    mov r4.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 550 instruction slots used
                            
            };
        }

        pass perPixel_12
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gCubeMap                          texture  float4        cube    0        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float       
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 16
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 87
                mov r3.w, l(0)  // i<0: 0>
                mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.x, r5.w, cb1[130].x
                  breakc_z r6.x
                
                #line 90
                  nop 
                
                #line 133
                  nop 
                
                #line 206
                  imul null, r6.x, r5.w, l(4)
                  mov r6.yzw, cb1[r6.x + 0].xxyz  // light<0,1,2>
                  mov r7.xyz, cb1[r6.x + 1].xyzx  // light<4,5,6>
                  mov r8.xyz, cb1[r6.x + 2].xyzx  // light<8,9,10>
                  mov r7.w, cb1[r6.x + 0].w  // light<3>
                  mov r9.xyz, cb1[r6.x + 3].xyzx  // light<12,13,14>
                
                #line 209
                  mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                  dp3 r8.w, r9.xyzx, r9.xyzx
                  rsq r8.w, r8.w
                  mul r9.xyz, r8.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 133
                  mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 150
                  nop 
                
                #line 103 "DrawMesh_Common.fx"
                  mov r10.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                  mov r10.xyz, r10.xyzx  // albedo3<0,1,2>
                  nop 
                  nop 
                  nop 
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r8.w, r12.xyzx, r12.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r8.w, r12.zxyz, r11.xyzx
                  mul r13.xyz, r12.zxyz, r8.wwww
                  mov r13.xyz, -r13.xyzx
                  add r11.xyz, r11.xyzx, r13.xyzx
                  dp3 r8.w, r11.xyzx, r11.xyzx
                  rsq r8.w, r8.w
                  mul r11.xyz, r8.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r11.yzxy, r12.zxyz
                  mul r14.xyz, r11.xyzx, r12.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r8.w, r13.xyzx, r13.xyzx
                  rsq r8.w, r8.w
                  mul r13.xyz, r8.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r11.z
                  mov r14.y, r12.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r11.x
                  mov r15.y, r12.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r11.y
                  mov r13.y, r12.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r8.w, r11.xyzx, r14.xyzx
                  add r8.w, r8.w, r8.w
                  mov r8.w, -r8.w
                  mul r12.xyz, r8.wwww, r14.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t0.xyzw, s0
                  max r8.w, cb2[2].w, l(0.000000)
                  min r11.w, r8.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                  mov r11.xyz, r11.xyzx  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 154 "DrawMesh_Phong.fx"
                  mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                  nop 
                  nop 
                
                #line 159
                  nop 
                  mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r14.xyzx, r14.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                  mov r13.xyz, -r9.xyzx
                  dp3 r8.w, r13.xyzx, r12.xyzx
                  mul r6.x, r8.w, cb1[r6.x + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                  mov r6.x, r6.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                  mul r6.yzw, r6.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  lt r8.w, l(0.000000), r6.x
                  if_nz r8.w
                    mul r6.x, r6.x, l(1.000000)
                    mul r7.xyz, r7.xyzx, r10.xyzx
                    mul r7.xyz, r6.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                    dp3 r6.x, r9.xyzx, r12.xyzx
                    add r6.x, r6.x, r6.x
                    mov r6.x, -r6.x
                    mul r10.xyz, r6.xxxx, r12.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                    rsq r6.x, r1.w
                    mul r10.xyz, r3.xyzx, r6.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                    dp3 r6.x, r9.xyzx, r10.xyzx
                    max r6.x, r6.x, l(0.000000)
                    itof r8.w, cb2[0].w
                    log r6.x, r6.x
                    mul r6.x, r6.x, r8.w
                    exp r6.x, r6.x
                    mul r6.x, r6.x, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                    mul r6.x, r6.x, l(1.000000)
                    mul r8.xyz, r8.xyzx, cb2[2].xyzx
                    mul r8.xyz, r6.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                  else 
                    mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 187
                  add r6.xyz, r6.yzwy, r7.xyzx
                  mov r7.xyz, -r6.xyzx
                  add r7.xyz, r7.xyzx, r11.xyzx
                  mul r7.xyz, r7.xyzx, r11.wwww
                  add r6.xyz, r6.xyzx, r7.xyzx
                  add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                  mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 93
                mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].y
                  breakc_z r6.w
                
                #line 96
                  nop 
                
                #line 133
                  nop 
                
                #line 222
                  imul null, r6.w, r5.w, l(4)
                  mov r7.xyz, cb1[r6.w + 40].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 41].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 42].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 43].xyzx  // light<12,13,14>
                  mov r7.w, cb1[r6.w + 40].w  // light<3>
                  mov r8.w, cb1[r6.w + 42].w  // light<11>
                  mov r9.w, cb1[r6.w + 43].w  // light<15>
                
                #line 225
                  mov r10.xyz, -r10.xyzx
                  add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r11.x, r10.w
                  mul r10.xyz, r10.xyzx, r11.xxxx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                  sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                  lt r11.xy, r9.wwww, r10.wwww
                  if_nz r11.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 234
                  not r11.y, r11.y
                  not r11.z, r11.x
                  and r11.y, r11.y, r11.z
                  not r11.z, r11.y
                  if_nz r11.y
                    mul r8.w, r8.w, r10.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 234
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.w, r11.z, r11.y
                  or r10.w, r11.x, r10.w
                
                #line 270
                  if_z r10.w
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 153
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r12.xyzx, r12.xyzx
                  rsq r10.w, r10.w
                  mul r12.xyz, r10.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r12.zxyz, r11.xyzx
                  mul r13.xyz, r12.zxyz, r10.wwww
                  mov r13.xyz, -r13.xyzx
                  add r11.xyz, r11.xyzx, r13.xyzx
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r11.yzxy, r12.zxyz
                  mul r14.xyz, r11.xyzx, r12.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r11.z
                  mov r14.y, r12.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r11.x
                  mov r15.y, r12.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r11.y
                  mov r13.y, r12.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r10.w, r11.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r12.xyz, r10.wwww, r14.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t0.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r12.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r12.xyz, r12.xyzx  // albedo3<0,1,2>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r11.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r14.xyzx, r14.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r12.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r10.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r12.xyz, r6.wwww, r14.xyzx
                      add r10.xyz, r10.xyzx, r12.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r10.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r11.xyzx
                    mul r8.xyz, r8.xyzx, r11.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 96
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 99
                mov r5.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].z
                  breakc_z r6.w
                
                #line 102
                  nop 
                
                #line 133
                  nop 
                
                #line 244
                  imul null, r6.w, r5.w, l(5)
                  mov r7.xyz, cb1[r6.w + 80].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 81].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 82].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 83].xyzx  // light<12,13,14>
                  mov r11.xyz, cb1[r6.w + 84].xyzx  // light<16,17,18>
                  mov r7.w, cb1[r6.w + 80].w  // light<3>
                  mov r8.w, cb1[r6.w + 82].w  // light<11>
                  mov r9.w, cb1[r6.w + 83].w  // light<15>
                  mov r10.w, cb1[r6.w + 84].w  // light<19>
                
                #line 247
                  mov r11.xyz, -r11.xyzx
                  add r12.xyz, r2.xyzx, r11.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r11.w, r12.xyzx, r12.xyzx
                  rsq r12.w, r11.w
                  mul r12.xyz, r12.wwww, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                  sqrt r11.w, r11.w  // distanceFromLight<0:NaN:Inf>
                  add r10.xyz, r10.xyzx, r11.xyzx
                  dp3 r11.x, r10.xyzx, r10.xyzx
                  rsq r11.x, r11.x
                  mul r10.xyz, r10.xyzx, r11.xxxx
                  dp3 r10.x, r12.xyzx, r10.xyzx  // Cos_Theta<0:NaN:Inf>
                  lt r10.y, r10.w, r11.w
                  div r9.w, r9.w, l(2.000000)
                  sincos null, r9.w, r9.w
                  lt r9.w, r10.x, r9.w
                  or r10.xy, r9.wwww, r10.yyyy
                  if_nz r10.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 259
                  not r10.y, r10.y
                  not r10.z, r10.x
                  and r10.y, r10.y, r10.z
                  not r10.z, r10.y
                  if_nz r10.y
                    mul r8.w, r8.w, r11.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 259
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.y, r10.z, r10.y
                  or r10.x, r10.x, r10.y
                
                #line 270
                  if_z r10.x
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r12.xyz, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 153
                  mov r10.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r11.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r11.zxyz, r10.xyzx
                  mul r13.xyz, r11.zxyz, r10.wwww
                  mov r13.xyz, -r13.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r10.w, r10.w
                  mul r10.xyz, r10.wwww, r10.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r10.yzxy, r11.zxyz
                  mul r14.xyz, r10.xyzx, r11.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r10.z
                  mov r14.y, r11.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r10.x
                  mov r15.y, r11.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r10.y
                  mov r13.y, r11.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r10.xyz, -r10.xyzx
                  dp3 r10.w, r10.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r11.xyz, r10.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t0.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r11.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r11.xyz, r11.xyzx  // albedo3<0,1,2>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r10.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r12.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r14.xyzx, r14.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r11.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r12.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r11.xyz, r6.wwww, r14.xyzx
                      add r11.xyz, r12.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r11.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r8.xyzx, r10.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 102
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 86
                if_z r0.w
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r5.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  else 
                    mov r4.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 515 instruction slots used
                            
            };
        }

        pass perPixel_13
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gCubeMap                          texture  float4        cube    1        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 16
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 87
                mov r3.w, l(0)  // i<0: 0>
                mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.x, r5.w, cb1[130].x
                  breakc_z r6.x
                
                #line 90
                  nop 
                
                #line 133
                  nop 
                
                #line 206
                  imul null, r6.x, r5.w, l(4)
                  mov r6.yzw, cb1[r6.x + 0].xxyz  // light<0,1,2>
                  mov r7.xyz, cb1[r6.x + 1].xyzx  // light<4,5,6>
                  mov r8.xyz, cb1[r6.x + 2].xyzx  // light<8,9,10>
                  mov r7.w, cb1[r6.x + 0].w  // light<3>
                  mov r9.xyz, cb1[r6.x + 3].xyzx  // light<12,13,14>
                
                #line 209
                  mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                  dp3 r8.w, r9.xyzx, r9.xyzx
                  rsq r8.w, r8.w
                  mul r9.xyz, r8.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 133
                  mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 150
                  nop 
                
                #line 98 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r10.xyz, v4.xyxx, t0.xyzw, s0
                  mov r10.xyz, r10.xyzx  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                  mov r10.xyz, r10.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                  nop 
                  nop 
                  nop 
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r8.w, r12.xyzx, r12.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r8.w, r12.zxyz, r11.xyzx
                  mul r13.xyz, r12.zxyz, r8.wwww
                  mov r13.xyz, -r13.xyzx
                  add r11.xyz, r11.xyzx, r13.xyzx
                  dp3 r8.w, r11.xyzx, r11.xyzx
                  rsq r8.w, r8.w
                  mul r11.xyz, r8.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r11.yzxy, r12.zxyz
                  mul r14.xyz, r11.xyzx, r12.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r8.w, r13.xyzx, r13.xyzx
                  rsq r8.w, r8.w
                  mul r13.xyz, r8.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r11.z
                  mov r14.y, r12.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r11.x
                  mov r15.y, r12.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r11.y
                  mov r13.y, r12.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r8.w, r11.xyzx, r14.xyzx
                  add r8.w, r8.w, r8.w
                  mov r8.w, -r8.w
                  mul r12.xyz, r8.wwww, r14.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t1.xyzw, s0
                  max r8.w, cb2[2].w, l(0.000000)
                  min r11.w, r8.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                  mov r11.xyz, r11.xyzx  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 154 "DrawMesh_Phong.fx"
                  mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                  nop 
                  nop 
                
                #line 159
                  nop 
                  mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r14.xyzx, r14.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                  mov r13.xyz, -r9.xyzx
                  dp3 r8.w, r13.xyzx, r12.xyzx
                  mul r6.x, r8.w, cb1[r6.x + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                  mov r6.x, r6.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                  mul r6.yzw, r6.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  lt r8.w, l(0.000000), r6.x
                  if_nz r8.w
                    mul r6.x, r6.x, l(1.000000)
                    mul r7.xyz, r7.xyzx, r10.xyzx
                    mul r7.xyz, r6.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                    dp3 r6.x, r9.xyzx, r12.xyzx
                    add r6.x, r6.x, r6.x
                    mov r6.x, -r6.x
                    mul r10.xyz, r6.xxxx, r12.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                    rsq r6.x, r1.w
                    mul r10.xyz, r3.xyzx, r6.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                    dp3 r6.x, r9.xyzx, r10.xyzx
                    max r6.x, r6.x, l(0.000000)
                    itof r8.w, cb2[0].w
                    log r6.x, r6.x
                    mul r6.x, r6.x, r8.w
                    exp r6.x, r6.x
                    mul r6.x, r6.x, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                    mul r6.x, r6.x, l(1.000000)
                    mul r8.xyz, r8.xyzx, cb2[2].xyzx
                    mul r8.xyz, r6.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                  else 
                    mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 187
                  add r6.xyz, r6.yzwy, r7.xyzx
                  mov r7.xyz, -r6.xyzx
                  add r7.xyz, r7.xyzx, r11.xyzx
                  mul r7.xyz, r7.xyzx, r11.wwww
                  add r6.xyz, r6.xyzx, r7.xyzx
                  add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                  mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 93
                mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].y
                  breakc_z r6.w
                
                #line 96
                  nop 
                
                #line 133
                  nop 
                
                #line 222
                  imul null, r6.w, r5.w, l(4)
                  mov r7.xyz, cb1[r6.w + 40].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 41].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 42].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 43].xyzx  // light<12,13,14>
                  mov r7.w, cb1[r6.w + 40].w  // light<3>
                  mov r8.w, cb1[r6.w + 42].w  // light<11>
                  mov r9.w, cb1[r6.w + 43].w  // light<15>
                
                #line 225
                  mov r10.xyz, -r10.xyzx
                  add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r11.x, r10.w
                  mul r10.xyz, r10.xyzx, r11.xxxx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                  sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                  lt r11.xy, r9.wwww, r10.wwww
                  if_nz r11.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 234
                  not r11.y, r11.y
                  not r11.z, r11.x
                  and r11.y, r11.y, r11.z
                  not r11.z, r11.y
                  if_nz r11.y
                    mul r8.w, r8.w, r10.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 234
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.w, r11.z, r11.y
                  or r10.w, r11.x, r10.w
                
                #line 270
                  if_z r10.w
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 153
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r12.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r12.xyzx, r12.xyzx
                  rsq r10.w, r10.w
                  mul r12.xyz, r10.wwww, r12.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r12.zxyz, r11.xyzx
                  mul r13.xyz, r12.zxyz, r10.wwww
                  mov r13.xyz, -r13.xyzx
                  add r11.xyz, r11.xyzx, r13.xyzx
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r11.yzxy, r12.zxyz
                  mul r14.xyz, r11.xyzx, r12.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r11.z
                  mov r14.y, r12.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r11.x
                  mov r15.y, r12.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r11.y
                  mov r13.y, r12.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r10.w, r11.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r12.xyz, r10.wwww, r14.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t1.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r12.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r12.xyz, r12.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r11.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r14.xyzx, r14.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r12.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r10.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r12.xyz, r6.wwww, r14.xyzx
                      add r10.xyz, r10.xyzx, r12.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r10.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r11.xyzx
                    mul r8.xyz, r8.xyzx, r11.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 96
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 99
                mov r5.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].z
                  breakc_z r6.w
                
                #line 102
                  nop 
                
                #line 133
                  nop 
                
                #line 244
                  imul null, r6.w, r5.w, l(5)
                  mov r7.xyz, cb1[r6.w + 80].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 81].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 82].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 83].xyzx  // light<12,13,14>
                  mov r11.xyz, cb1[r6.w + 84].xyzx  // light<16,17,18>
                  mov r7.w, cb1[r6.w + 80].w  // light<3>
                  mov r8.w, cb1[r6.w + 82].w  // light<11>
                  mov r9.w, cb1[r6.w + 83].w  // light<15>
                  mov r10.w, cb1[r6.w + 84].w  // light<19>
                
                #line 247
                  mov r11.xyz, -r11.xyzx
                  add r12.xyz, r2.xyzx, r11.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r11.w, r12.xyzx, r12.xyzx
                  rsq r12.w, r11.w
                  mul r12.xyz, r12.wwww, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                  sqrt r11.w, r11.w  // distanceFromLight<0:NaN:Inf>
                  add r10.xyz, r10.xyzx, r11.xyzx
                  dp3 r11.x, r10.xyzx, r10.xyzx
                  rsq r11.x, r11.x
                  mul r10.xyz, r10.xyzx, r11.xxxx
                  dp3 r10.x, r12.xyzx, r10.xyzx  // Cos_Theta<0:NaN:Inf>
                  lt r10.y, r10.w, r11.w
                  div r9.w, r9.w, l(2.000000)
                  sincos null, r9.w, r9.w
                  lt r9.w, r10.x, r9.w
                  or r10.xy, r9.wwww, r10.yyyy
                  if_nz r10.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 259
                  not r10.y, r10.y
                  not r10.z, r10.x
                  and r10.y, r10.y, r10.z
                  not r10.z, r10.y
                  if_nz r10.y
                    mul r8.w, r8.w, r11.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 259
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.y, r10.z, r10.y
                  or r10.x, r10.x, r10.y
                
                #line 270
                  if_z r10.x
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r12.xyz, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 153
                  mov r10.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r11.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r11.zxyz, r10.xyzx
                  mul r13.xyz, r11.zxyz, r10.wwww
                  mov r13.xyz, -r13.xyzx
                  add r10.xyz, r10.xyzx, r13.xyzx
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r10.w, r10.w
                  mul r10.xyz, r10.wwww, r10.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r13.xyz, r10.yzxy, r11.zxyz
                  mul r14.xyz, r10.xyzx, r11.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r13.xyz, r13.xyzx, r14.xyzx
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r14.x, r10.z
                  mov r14.y, r11.y
                  mov r14.z, r13.x
                  mov r14.w, l(0)
                  dp4 r14.x, l(0.000000, 1.000000, 0.000000, 1.000000), r14.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r15.x, r10.x
                  mov r15.y, r11.z
                  mov r15.z, r13.y
                  mov r15.w, l(0)
                  dp4 r14.y, l(0.000000, 1.000000, 0.000000, 1.000000), r15.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r13.x, r10.y
                  mov r13.y, r11.x
                  mov r13.w, l(0)
                  dp4 r14.z, l(0.000000, 1.000000, 0.000000, 1.000000), r13.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r14.xyz, r14.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r14.xyz, r14.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r10.xyz, -r10.xyzx
                  dp3 r10.w, r10.xyzx, r14.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r11.xyz, r10.wwww, r14.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t1.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r11.xyz, r11.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r10.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r12.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r14.xyzx, r14.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r14.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r11.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r12.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r11.xyz, r6.wwww, r14.xyzx
                      add r11.xyz, r12.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r11.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r8.xyzx, r10.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 102
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 86
                if_z r0.w
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r5.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  else 
                    mov r4.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 516 instruction slots used
                            
            };
        }

        pass perPixel_14
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gNormalMap                        texture  float4          2d    0        1
                // gCubeMap                          texture  float4        cube    1        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 17
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 87
                mov r3.w, l(0)  // i<0: 0>
                mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.x, r5.w, cb1[130].x
                  breakc_z r6.x
                
                #line 90
                  nop 
                
                #line 133
                  nop 
                
                #line 206
                  imul null, r6.x, r5.w, l(4)
                  mov r6.yzw, cb1[r6.x + 0].xxyz  // light<0,1,2>
                  mov r7.xyz, cb1[r6.x + 1].xyzx  // light<4,5,6>
                  mov r8.xyz, cb1[r6.x + 2].xyzx  // light<8,9,10>
                  mov r7.w, cb1[r6.x + 0].w  // light<3>
                  mov r9.xyz, cb1[r6.x + 3].xyzx  // light<12,13,14>
                
                #line 209
                  mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                  dp3 r8.w, r9.xyzx, r9.xyzx
                  rsq r8.w, r8.w
                  mul r9.xyz, r8.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 133
                  mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 150
                  nop 
                
                #line 103 "DrawMesh_Common.fx"
                  mov r10.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                  mov r10.xyz, r10.xyzx  // albedo3<0,1,2>
                  nop 
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t0.xyzw, s0
                  mov r11.xy, r11.xyxx  // normSampleColor<0:Inf,2:Inf>
                  mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r11.xz, r11.xxyx, cb2[1].wwww
                  mov r11.y, l(0)
                  add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r8.w, r11.xyzx, r11.xyzx
                  rsq r8.w, r8.w
                  mul r11.xyz, r8.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                  nop 
                  nop 
                  mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r8.w, r13.xyzx, r13.xyzx
                  rsq r8.w, r8.w
                  mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r8.w, r13.zxyz, r12.xyzx
                  mul r14.xyz, r13.zxyz, r8.wwww
                  mov r14.xyz, -r14.xyzx
                  add r12.xyz, r12.xyzx, r14.xyzx
                  dp3 r8.w, r12.xyzx, r12.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r12.yzxy, r13.zxyz
                  mul r15.xyz, r12.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r8.w, r14.xyzx, r14.xyzx
                  rsq r8.w, r8.w
                  mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r11.w, l(1.000000)
                  mov r15.x, r12.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r12.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r12.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r8.w, r11.xyzx, r15.xyzx
                  add r8.w, r8.w, r8.w
                  mov r8.w, -r8.w
                  mul r12.xyz, r8.wwww, r15.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t1.xyzw, s0
                  max r8.w, cb2[2].w, l(0.000000)
                  min r11.w, r8.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                  mov r11.xyz, r11.xyzx  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 154 "DrawMesh_Phong.fx"
                  mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                  nop 
                  nop 
                
                #line 159
                  nop 
                  mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r15.xyzx, r15.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                  mov r13.xyz, -r9.xyzx
                  dp3 r8.w, r13.xyzx, r12.xyzx
                  mul r6.x, r8.w, cb1[r6.x + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                  mov r6.x, r6.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                  mul r6.yzw, r6.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  lt r8.w, l(0.000000), r6.x
                  if_nz r8.w
                    mul r6.x, r6.x, l(1.000000)
                    mul r7.xyz, r7.xyzx, r10.xyzx
                    mul r7.xyz, r6.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                    dp3 r6.x, r9.xyzx, r12.xyzx
                    add r6.x, r6.x, r6.x
                    mov r6.x, -r6.x
                    mul r10.xyz, r6.xxxx, r12.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                    rsq r6.x, r1.w
                    mul r10.xyz, r3.xyzx, r6.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                    dp3 r6.x, r9.xyzx, r10.xyzx
                    max r6.x, r6.x, l(0.000000)
                    itof r8.w, cb2[0].w
                    log r6.x, r6.x
                    mul r6.x, r6.x, r8.w
                    exp r6.x, r6.x
                    mul r6.x, r6.x, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                    mul r6.x, r6.x, l(1.000000)
                    mul r8.xyz, r8.xyzx, cb2[2].xyzx
                    mul r8.xyz, r6.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                  else 
                    mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 187
                  add r6.xyz, r6.yzwy, r7.xyzx
                  mov r7.xyz, -r6.xyzx
                  add r7.xyz, r7.xyzx, r11.xyzx
                  mul r7.xyz, r7.xyzx, r11.wwww
                  add r6.xyz, r6.xyzx, r7.xyzx
                  add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                  mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 93
                mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].y
                  breakc_z r6.w
                
                #line 96
                  nop 
                
                #line 133
                  nop 
                
                #line 222
                  imul null, r6.w, r5.w, l(4)
                  mov r7.xyz, cb1[r6.w + 40].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 41].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 42].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 43].xyzx  // light<12,13,14>
                  mov r7.w, cb1[r6.w + 40].w  // light<3>
                  mov r8.w, cb1[r6.w + 42].w  // light<11>
                  mov r9.w, cb1[r6.w + 43].w  // light<15>
                
                #line 225
                  mov r10.xyz, -r10.xyzx
                  add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r11.x, r10.w
                  mul r10.xyz, r10.xyzx, r11.xxxx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                  sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                  lt r11.xy, r9.wwww, r10.wwww
                  if_nz r11.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 234
                  not r11.y, r11.y
                  not r11.z, r11.x
                  and r11.y, r11.y, r11.z
                  not r11.z, r11.y
                  if_nz r11.y
                    mul r8.w, r8.w, r10.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 234
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.w, r11.z, r11.y
                  or r10.w, r11.x, r10.w
                
                #line 270
                  if_z r10.w
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t0.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                  mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r11.xz, r11.xxyx, cb2[1].wwww
                  mov r11.y, l(0)
                  add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r13.zxyz, r12.xyzx
                  mul r14.xyz, r13.zxyz, r10.wwww
                  mov r14.xyz, -r14.xyzx
                  add r12.xyz, r12.xyzx, r14.xyzx
                  dp3 r10.w, r12.xyzx, r12.xyzx
                  rsq r10.w, r10.w
                  mul r12.xyz, r10.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r12.yzxy, r13.zxyz
                  mul r15.xyz, r12.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r10.w, r14.xyzx, r14.xyzx
                  rsq r10.w, r10.w
                  mul r14.xyz, r10.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r11.w, l(1.000000)
                  mov r15.x, r12.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r12.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r12.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r10.w, r11.xyzx, r15.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r12.xyz, r10.wwww, r15.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t1.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r12.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r12.xyz, r12.xyzx  // albedo3<0,1,2>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r11.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r15.xyzx, r15.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r12.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r10.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r12.xyz, r6.wwww, r14.xyzx
                      add r10.xyz, r10.xyzx, r12.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r10.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r11.xyzx
                    mul r8.xyz, r8.xyzx, r11.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 96
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 99
                mov r5.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].z
                  breakc_z r6.w
                
                #line 102
                  nop 
                
                #line 133
                  nop 
                
                #line 244
                  imul null, r6.w, r5.w, l(5)
                  mov r7.xyz, cb1[r6.w + 80].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 81].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 82].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 83].xyzx  // light<12,13,14>
                  mov r11.xyz, cb1[r6.w + 84].xyzx  // light<16,17,18>
                  mov r7.w, cb1[r6.w + 80].w  // light<3>
                  mov r8.w, cb1[r6.w + 82].w  // light<11>
                  mov r9.w, cb1[r6.w + 83].w  // light<15>
                  mov r10.w, cb1[r6.w + 84].w  // light<19>
                
                #line 247
                  mov r11.xyz, -r11.xyzx
                  add r12.xyz, r2.xyzx, r11.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r11.w, r12.xyzx, r12.xyzx
                  rsq r12.w, r11.w
                  mul r12.xyz, r12.wwww, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                  sqrt r11.w, r11.w  // distanceFromLight<0:NaN:Inf>
                  add r10.xyz, r10.xyzx, r11.xyzx
                  dp3 r11.x, r10.xyzx, r10.xyzx
                  rsq r11.x, r11.x
                  mul r10.xyz, r10.xyzx, r11.xxxx
                  dp3 r10.x, r12.xyzx, r10.xyzx  // Cos_Theta<0:NaN:Inf>
                  lt r10.y, r10.w, r11.w
                  div r9.w, r9.w, l(2.000000)
                  sincos null, r9.w, r9.w
                  lt r9.w, r10.x, r9.w
                  or r10.xy, r9.wwww, r10.yyyy
                  if_nz r10.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 259
                  not r10.y, r10.y
                  not r10.z, r10.x
                  and r10.y, r10.y, r10.z
                  not r10.z, r10.y
                  if_nz r10.y
                    mul r8.w, r8.w, r11.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 259
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.y, r10.z, r10.y
                  or r10.x, r10.x, r10.y
                
                #line 270
                  if_z r10.x
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r12.xyz, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r10.xy, v4.xyxx, t0.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                  mov r10.xy, r10.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r10.xy, r10.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r10.xy, r10.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r10.xz, r10.xxyx, cb2[1].wwww
                  mov r10.y, l(0)
                  add r10.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r10.w, r10.w
                  mul r10.xyz, r10.wwww, r10.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r11.w, r13.xyzx, r13.xyzx
                  rsq r11.w, r11.w
                  mul r13.xyz, r11.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r11.w, r13.zxyz, r11.xyzx
                  mul r14.xyz, r13.zxyz, r11.wwww
                  mov r14.xyz, -r14.xyzx
                  add r11.xyz, r11.xyzx, r14.xyzx
                  dp3 r11.w, r11.xyzx, r11.xyzx
                  rsq r11.w, r11.w
                  mul r11.xyz, r11.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r11.yzxy, r13.zxyz
                  mul r15.xyz, r11.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r11.w, r14.xyzx, r14.xyzx
                  rsq r11.w, r11.w
                  mul r14.xyz, r11.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r10.w, l(1.000000)
                  mov r15.x, r11.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r10.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r11.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r10.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r11.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r10.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r10.xyz, -r10.xyzx
                  dp3 r10.w, r10.xyzx, r15.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r11.xyz, r10.wwww, r15.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t1.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 103 "DrawMesh_Common.fx"
                    mov r11.xyz, cb2[1].xyzx  // SampleFromDiffuseMap<0,1,2>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r11.xyz, r11.xyzx  // albedo3<0,1,2>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r10.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r12.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r15.xyzx, r15.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r11.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r12.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r11.xyz, r6.wwww, r14.xyzx
                      add r11.xyz, r12.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r11.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r8.xyzx, r10.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 102
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 86
                if_z r0.w
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r5.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  else 
                    mov r4.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 549 instruction slots used
                            
            };
        }

        pass perPixel_15
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 17 "DrawMesh_Phong.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 29
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawMeshWithPixelLighting<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DrawMeshWithPixelLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DrawMeshWithPixelLighting<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DrawMeshWithPixelLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DrawMeshWithPixelLighting<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerSubset                       cbuffer      NA          NA    2        1
                // cbAtmosphere                      cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[131], dynamicIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_constantbuffer cb3[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 17
                
                #line 39 "DrawMesh_Phong.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[130].w
                if_z r0.x
                  mov r0.xyzw, v1.xyzw  // psOutput<0,1,2,3>
                  mov o0.xyzw, r0.xyzw  // PS_DrawMeshWithPixelLighting<0,1,2,3>
                  ret 
                
                #line 39
                endif 
                
                #line 45
                dp3 r0.x, v3.xyzx, v3.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.zxyz  // input<13:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                dp3 r0.w, v5.xyzx, v5.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v5.yzxy  // input<17:NaN:Inf,18:NaN:Inf,16:NaN:Inf>
                
                #line 51
                nop 
                mov r0.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r2.xyz, v2.xyzx  // thisPoint<0,1,2>
                mov r1.xyz, r1.xyzx  // tangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                
                #line 64
                mov r0.xyz, r0.xyzx  // renderProc<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r3.xyz, -r2.xyzx
                add r3.xyz, r3.xyzx, cb0[12].xyzx  // renderProc<5:Inf,6:Inf,7:Inf>
                mov r2.xyz, r2.xyzx  // renderProc<8,9,10>
                mov r1.xyz, r1.xyzx  // renderProc<12:NaN:Inf,13:NaN:Inf,11:NaN:Inf>
                
                #line 52
                nop 
                
                #line 79
                ieq r0.w, cb3[0].w, l(1)
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r2.w, r1.w
                lt r3.w, cb3[1].y, r2.w
                and r0.w, r0.w, r3.w
                if_nz r0.w
                  mov r4.xyz, cb3[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                else 
                  mov r4.xyzw, l(0,0,0,1.000000)  // outColor4<0: 0f,1: 0f,2: 0f,3: 1f>
                endif 
                
                #line 87
                mov r3.w, l(0)  // i<0: 0>
                mov r5.xyz, r4.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.x, r5.w, cb1[130].x
                  breakc_z r6.x
                
                #line 90
                  nop 
                
                #line 133
                  nop 
                
                #line 206
                  imul null, r6.x, r5.w, l(4)
                  mov r6.yzw, cb1[r6.x + 0].xxyz  // light<0,1,2>
                  mov r7.xyz, cb1[r6.x + 1].xyzx  // light<4,5,6>
                  mov r8.xyz, cb1[r6.x + 2].xyzx  // light<8,9,10>
                  mov r7.w, cb1[r6.x + 0].w  // light<3>
                  mov r9.xyz, cb1[r6.x + 3].xyzx  // light<12,13,14>
                
                #line 209
                  mov r9.xyz, r9.xyzx  // lightVecW<0,1,2>
                  dp3 r8.w, r9.xyzx, r9.xyzx
                  rsq r8.w, r8.w
                  mul r9.xyz, r8.wwww, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 133
                  mov r9.xyz, r9.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // lightAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 150
                  nop 
                
                #line 98 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r10.xyz, v4.xyxx, t0.xyzw, s0
                  mov r10.xyz, r10.xyzx  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                  mov r10.xyz, r10.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                  nop 
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t1.xyzw, s0
                  mov r11.xy, r11.xyxx  // normSampleColor<0:Inf,2:Inf>
                  mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r11.xz, r11.xxyx, cb2[1].wwww
                  mov r11.y, l(0)
                  add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r8.w, r11.xyzx, r11.xyzx
                  rsq r8.w, r8.w
                  mul r11.xyz, r8.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 152 "DrawMesh_Phong.fx"
                  nop 
                  nop 
                  mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r8.w, r13.xyzx, r13.xyzx
                  rsq r8.w, r8.w
                  mul r13.xyz, r8.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r8.w, r13.zxyz, r12.xyzx
                  mul r14.xyz, r13.zxyz, r8.wwww
                  mov r14.xyz, -r14.xyzx
                  add r12.xyz, r12.xyzx, r14.xyzx
                  dp3 r8.w, r12.xyzx, r12.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r12.yzxy, r13.zxyz
                  mul r15.xyz, r12.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r8.w, r14.xyzx, r14.xyzx
                  rsq r8.w, r8.w
                  mul r14.xyz, r8.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r11.w, l(1.000000)
                  mov r15.x, r12.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r12.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r12.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r8.w, r11.xyzx, r15.xyzx
                  add r8.w, r8.w, r8.w
                  mov r8.w, -r8.w
                  mul r12.xyz, r8.wwww, r15.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t2.xyzw, s0
                  max r8.w, cb2[2].w, l(0.000000)
                  min r11.w, r8.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                  mov r11.xyz, r11.xyzx  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 154 "DrawMesh_Phong.fx"
                  mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                  nop 
                  nop 
                
                #line 159
                  nop 
                  mov r9.xyz, r9.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r15.xyzx, r15.xyzx
                  rsq r8.w, r8.w
                  mul r12.xyz, r8.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 278
                  mov r13.xyz, -r9.xyzx
                  dp3 r8.w, r13.xyzx, r12.xyzx
                  mul r6.x, r8.w, cb1[r6.x + 1].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                  mov r6.x, r6.x  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                  mul r6.yzw, r6.yyzw, cb2[0].xxyz  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                  lt r8.w, l(0.000000), r6.x
                  if_nz r8.w
                    mul r6.x, r6.x, l(1.000000)
                    mul r7.xyz, r7.xyzx, r10.xyzx
                    mul r7.xyz, r6.xxxx, r7.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                    dp3 r6.x, r9.xyzx, r12.xyzx
                    add r6.x, r6.x, r6.x
                    mov r6.x, -r6.x
                    mul r10.xyz, r6.xxxx, r12.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                    rsq r6.x, r1.w
                    mul r10.xyz, r3.xyzx, r6.xxxx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                    dp3 r6.x, r9.xyzx, r10.xyzx
                    max r6.x, r6.x, l(0.000000)
                    itof r8.w, cb2[0].w
                    log r6.x, r6.x
                    mul r6.x, r6.x, r8.w
                    exp r6.x, r6.x
                    mul r6.x, r6.x, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                    mul r6.x, r6.x, l(1.000000)
                    mul r8.xyz, r8.xyzx, cb2[2].xyzx
                    mul r8.xyz, r6.xxxx, r8.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                  else 
                    mov r7.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 187
                  add r6.xyz, r6.yzwy, r7.xyzx
                  mov r7.xyz, -r6.xyzx
                  add r7.xyz, r7.xyzx, r11.xyzx
                  mul r7.xyz, r7.xyzx, r11.wwww
                  add r6.xyz, r6.xyzx, r7.xyzx
                  add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                  mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 93
                mov r6.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].y
                  breakc_z r6.w
                
                #line 96
                  nop 
                
                #line 133
                  nop 
                
                #line 222
                  imul null, r6.w, r5.w, l(4)
                  mov r7.xyz, cb1[r6.w + 40].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 41].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 42].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 43].xyzx  // light<12,13,14>
                  mov r7.w, cb1[r6.w + 40].w  // light<3>
                  mov r8.w, cb1[r6.w + 42].w  // light<11>
                  mov r9.w, cb1[r6.w + 43].w  // light<15>
                
                #line 225
                  mov r10.xyz, -r10.xyzx
                  add r10.xyz, r2.xyzx, r10.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r11.x, r10.w
                  mul r10.xyz, r10.xyzx, r11.xxxx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 229
                  sqrt r10.w, r10.w  // distanceFromLight<0:NaN:Inf>
                  lt r11.xy, r9.wwww, r10.wwww
                  if_nz r11.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 234
                  not r11.y, r11.y
                  not r11.z, r11.x
                  and r11.y, r11.y, r11.z
                  not r11.z, r11.y
                  if_nz r11.y
                    mul r8.w, r8.w, r10.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 234
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.w, r11.z, r11.y
                  or r10.w, r11.x, r10.w
                
                #line 270
                  if_z r10.w
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r10.xyz, r10.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r11.xy, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                  mov r11.xy, r11.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r11.xy, r11.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r11.xy, r11.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r11.xz, r11.xxyx, cb2[1].wwww
                  mov r11.y, l(0)
                  add r11.xyz, r11.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r10.w, r11.xyzx, r11.xyzx
                  rsq r10.w, r10.w
                  mul r11.xyz, r10.wwww, r11.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r12.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r10.w, r10.w
                  mul r13.xyz, r10.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r13.zxyz, r12.xyzx
                  mul r14.xyz, r13.zxyz, r10.wwww
                  mov r14.xyz, -r14.xyzx
                  add r12.xyz, r12.xyzx, r14.xyzx
                  dp3 r10.w, r12.xyzx, r12.xyzx
                  rsq r10.w, r10.w
                  mul r12.xyz, r10.wwww, r12.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r12.yzxy, r13.zxyz
                  mul r15.xyz, r12.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r10.w, r14.xyzx, r14.xyzx
                  rsq r10.w, r10.w
                  mul r14.xyz, r10.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r11.w, l(1.000000)
                  mov r15.x, r12.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r11.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r12.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r11.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r12.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r11.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r11.xyz, -r11.xyzx
                  dp3 r10.w, r11.xyzx, r15.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r12.xyz, r10.wwww, r15.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t2.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r12.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r12.xyz, r12.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r11.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r10.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r15.xyzx, r15.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 41].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r12.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r10.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r12.xyz, r6.wwww, r14.xyzx
                      add r10.xyz, r10.xyzx, r12.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r10.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r11.xyzx
                    mul r8.xyz, r8.xyzx, r11.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 96
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 93
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 99
                mov r5.xyz, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.w, r3.w  // i<0>
                loop 
                  ilt r6.w, r5.w, cb1[130].z
                  breakc_z r6.w
                
                #line 102
                  nop 
                
                #line 133
                  nop 
                
                #line 244
                  imul null, r6.w, r5.w, l(5)
                  mov r7.xyz, cb1[r6.w + 80].xyzx  // light<0,1,2>
                  mov r8.xyz, cb1[r6.w + 81].xyzx  // light<4,5,6>
                  mov r9.xyz, cb1[r6.w + 82].xyzx  // light<8,9,10>
                  mov r10.xyz, cb1[r6.w + 83].xyzx  // light<12,13,14>
                  mov r11.xyz, cb1[r6.w + 84].xyzx  // light<16,17,18>
                  mov r7.w, cb1[r6.w + 80].w  // light<3>
                  mov r8.w, cb1[r6.w + 82].w  // light<11>
                  mov r9.w, cb1[r6.w + 83].w  // light<15>
                  mov r10.w, cb1[r6.w + 84].w  // light<19>
                
                #line 247
                  mov r11.xyz, -r11.xyzx
                  add r12.xyz, r2.xyzx, r11.xyzx  // lightVecW<0:Inf,1:Inf,2:Inf>
                  dp3 r11.w, r12.xyzx, r12.xyzx
                  rsq r12.w, r11.w
                  mul r12.xyz, r12.wwww, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                  sqrt r11.w, r11.w  // distanceFromLight<0:NaN:Inf>
                  add r10.xyz, r10.xyzx, r11.xyzx
                  dp3 r11.x, r10.xyzx, r10.xyzx
                  rsq r11.x, r11.x
                  mul r10.xyz, r10.xyzx, r11.xxxx
                  dp3 r10.x, r12.xyzx, r10.xyzx  // Cos_Theta<0:NaN:Inf>
                  lt r10.y, r10.w, r11.w
                  div r9.w, r9.w, l(2.000000)
                  sincos null, r9.w, r9.w
                  lt r9.w, r10.x, r9.w
                  or r10.xy, r9.wwww, r10.yyyy
                  if_nz r10.y
                    mov r9.w, l(-1)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: true>
                  endif 
                
                #line 259
                  not r10.y, r10.y
                  not r10.z, r10.x
                  and r10.y, r10.y, r10.z
                  not r10.z, r10.y
                  if_nz r10.y
                    mul r8.w, r8.w, r11.w
                    add r8.w, r8.w, l(1.000000)
                    div r8.w, l(1.000000), r8.w  // attenuation<0:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                    mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                    mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 259
                  else 
                    mov r7.xyz, l(0,0,0,0)  // lightAmbientColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.xyz, l(0,0,0,0)  // lightDiffuseColor3<0: 0f,1: 0f,2: 0f>
                    mov r9.xyz, l(0,0,0,0)  // lightSpecColor3<0: 0f,1: 0f,2: 0f>
                    mov r8.w, l(0)  // attenuation<0: 0f>
                    mov r7.w, l(1.000000)  // lightSpecIntensity<0: 1f>
                  endif 
                  and r10.y, r10.z, r10.y
                  or r10.x, r10.x, r10.y
                
                #line 270
                  if_z r10.x
                    mov r9.w, l(0)  // RenderProcess_Phong::mFunction_ComputeLightingVariables<0: false>
                  endif 
                
                #line 133
                  mov r12.xyz, r12.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.w, r8.w  // attenuation<0:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r7.w, r7.w  // lightSpecIntensity<0>
                
                #line 77 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r10.xy, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,2:Inf,1:Inf>
                  mov r10.xy, r10.xyxx  // tmpNormalTBN<0:Inf,2:Inf>
                
                #line 82
                  mul r10.xy, r10.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r10.xy, r10.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // tmpNormalTBN<0:Inf,2:Inf>
                  mul r10.xz, r10.xxyx, cb2[1].wwww
                  mov r10.y, l(0)
                  add r10.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r10.w, r10.w
                  mul r10.xyz, r10.wwww, r10.xyzx  // tmpNormalTBN<0:NaN:Inf,1:NaN,2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r11.xyz, r1.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mov r13.xyz, r0.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 56 "DrawMesh_Common.fx"
                  dp3 r11.w, r13.xyzx, r13.xyzx
                  rsq r11.w, r11.w
                  mul r13.xyz, r11.wwww, r13.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r11.w, r13.zxyz, r11.xyzx
                  mul r14.xyz, r13.zxyz, r11.wwww
                  mov r14.xyz, -r14.xyzx
                  add r11.xyz, r11.xyzx, r14.xyzx
                  dp3 r11.w, r11.xyzx, r11.xyzx
                  rsq r11.w, r11.w
                  mul r11.xyz, r11.wwww, r11.xyzx  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r14.xyz, r11.yzxy, r13.zxyz
                  mul r15.xyz, r11.xyzx, r13.xyzx
                  mov r15.xyz, -r15.xyzx
                  add r14.xyz, r14.xyzx, r15.xyzx
                  dp3 r11.w, r14.xyzx, r14.xyzx
                  rsq r11.w, r11.w
                  mul r14.xyz, r11.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  mov r10.w, l(1.000000)
                  mov r15.x, r11.z
                  mov r15.y, r13.y
                  mov r15.z, r14.x
                  mov r15.w, l(0)
                  dp4 r15.x, r10.xyzw, r15.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r16.x, r11.x
                  mov r16.y, r13.z
                  mov r16.z, r14.y
                  mov r16.w, l(0)
                  dp4 r15.y, r10.xyzw, r16.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r14.x, r11.y
                  mov r14.y, r13.x
                  mov r14.w, l(0)
                  dp4 r15.z, r10.xyzw, r14.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 153 "DrawMesh_Phong.fx"
                  mov r15.xyz, r15.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r3.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r15.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 127 "DrawMesh_Common.fx"
                  mov r10.xyz, -r10.xyzx
                  dp3 r10.w, r10.xyzx, r15.xyzx
                  add r10.w, r10.w, r10.w
                  mov r10.w, -r10.w
                  mul r11.xyz, r10.wwww, r15.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t2.xyzw, s0  // SampleFromEnvironmentMap<0:Inf,1:Inf,2:Inf>
                
                #line 141 "DrawMesh_Phong.fx"
                  if_z r9.w
                
                #line 150
                    nop 
                
                #line 98 "DrawMesh_Common.fx"
                    sample_indexable(texture2d)(float,float,float,float) r11.xyz, v4.xyxx, t0.xyzw, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 150 "DrawMesh_Phong.fx"
                    mov r11.xyz, r11.xyzx  // albedo3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                    nop 
                    nop 
                
                #line 127 "DrawMesh_Common.fx"
                    max r9.w, cb2[2].w, l(0.000000)
                    min r10.w, r9.w, l(1.000000)  // SampleFromEnvironmentMap<3:[0f,1f]>
                
                #line 154 "DrawMesh_Phong.fx"
                    mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                    nop 
                    nop 
                
                #line 159
                    nop 
                    mov r13.xyz, r12.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r9.w, r15.xyzx, r15.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r15.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 284
                    mov r13.xyz, -r13.xyzx
                    dp3 r9.w, r13.xyzx, r14.xyzx
                    mul r6.w, r9.w, cb1[r6.w + 81].w  // RenderProcess_Phong::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 159
                    mov r6.w, r6.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 166
                    mul r7.xyz, r7.xyzx, cb2[0].xyzx  // ambient4<0:Inf,1:Inf,2:Inf>
                
                #line 169
                    lt r9.w, l(0.000000), r6.w
                    if_nz r9.w
                      mul r6.w, r6.w, r8.w
                      mul r8.xyz, r8.xyzx, r11.xyzx
                      mul r8.xyz, r6.wwww, r8.xyzx  // diffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 174
                      dp3 r6.w, r12.xyzx, r14.xyzx
                      add r6.w, r6.w, r6.w
                      mov r6.w, -r6.w
                      mul r11.xyz, r6.wwww, r14.xyzx
                      add r11.xyz, r12.xyzx, r11.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                      rsq r6.w, r1.w
                      mul r12.xyz, r3.xyzx, r6.wwww  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      dp3 r6.w, r11.xyzx, r12.xyzx
                      max r6.w, r6.w, l(0.000000)
                      itof r9.w, cb2[0].w
                      log r6.w, r6.w
                      mul r6.w, r6.w, r9.w
                      exp r6.w, r6.w
                      mul r6.w, r6.w, r7.w  // SpecFactor<0:NaN:Inf>
                
                #line 183
                      mul r6.w, r6.w, r8.w
                      mul r9.xyz, r9.xyzx, cb2[2].xyzx
                      mul r9.xyz, r6.wwww, r9.xyzx  // specular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 169
                    else 
                      mov r8.xyz, l(0,0,0,0)  // diffuse4<0: 0f,1: 0f,2: 0f>
                      mov r9.xyz, l(0,0,0,0)  // specular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 187
                    add r7.xyz, r7.xyzx, r8.xyzx
                    mov r8.xyz, -r7.xyzx
                    add r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r8.xyzx, r10.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx
                    add r7.xyz, r9.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  else 
                    mov r7.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 102
                  mov r7.xyz, r7.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.xyz, r5.xyzx, r7.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                  iadd r5.w, r5.w, l(1)  // i<0>
                endloop 
                
                #line 86
                if_z r0.w
                
                #line 107
                  ine r0.x, l(0, 0, 0, 0), cb3[0].w
                  if_nz r0.x
                    mov r0.x, -cb3[1].x
                    add r0.y, r0.x, r2.w
                    add r0.x, r0.x, cb3[1].y
                    div r0.x, r0.y, r0.x
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r0.yzw, -r5.xxyz
                    add r0.yzw, r0.yyzw, cb3[0].xxyz
                    mul r0.xyz, r0.yzwy, r0.xxxx
                    add r4.xyz, r0.xyzx, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                  else 
                    mov r4.xyz, r5.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  endif 
                
                #line 114
                  max r0.x, cb2[3].x, l(0.000000)
                  min r4.w, r0.x, l(1.000000)  // outColor4<3:[0f,1f]>
                
                #line 86
                endif 
                
                #line 52
                mov r4.xyzw, r4.xyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithPixelLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:[0f,1f]>
                ret 
                // Approximately 550 instruction slots used
                            
            };
        }

        pass perVertex_disableDiffMap
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                // cbPerFrame                        cbuffer      NA          NA    2        1
                // cbPerSubset                       cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // COLOR                    1   xyzw        2     NONE  float   xyzw
                // COLOR                    2   xyzw        3     NONE  float   xyzw
                // POSITION                 0   xyz         4     NONE  float   xyz 
                // NORMAL                   0   xyz         5     NONE  float   xyz 
                // TEXCOORD                 0   xy          6     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[13], immediateIndexed
                dcl_constantbuffer cb2[131], dynamicIndexed
                dcl_constantbuffer cb3[3], immediateIndexed
                dcl_input v0.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_output o4.xyz
                dcl_output o5.xyz
                dcl_output o6.xy
                dcl_temps 19
                
                #line 17 "DrawMesh_Gouraud.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r0.x, r1.x  // output<16:NaN:Inf>
                mov r0.y, r1.y  // output<17:NaN:Inf>
                mov r0.z, r1.z  // output<18:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyz, v2.xyzx
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb0[4].xyzw  // output<19:NaN:Inf>
                dp4 r3.y, r2.xyzw, cb0[5].xyzw  // output<20:NaN:Inf>
                dp4 r3.z, r2.xyzw, cb0[6].xyzw  // output<21:NaN:Inf>
                mov r2.xy, v3.xyxx  // output<22,23>
                
                #line 30
                nop 
                mov r3.xyz, r3.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // posW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 67
                mov r4.xyz, l(0,0,0,0)  // outAmbient4<0: -0f,1: -0f,2: -0f>
                
                #line 72
                mov r5.xyz, r3.xyzx  // renderProc<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r0.xyzx  // renderProc<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r7.xyz, -r6.xyzx
                add r7.xyz, r7.xyzx, cb1[12].xyzx  // renderProc<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                
                #line 80
                ine r0.w, l(0, 0, 0, 0), cb2[130].w
                if_nz r0.w
                  mov r0.w, l(0)  // i<0: 0>
                  mov r8.xyz, r4.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r9.xyz, r4.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r4.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.z, r0.w  // i<0>
                  loop 
                    ilt r2.w, r2.z, cb2[130].x
                    breakc_z r2.w
                
                #line 87
                    nop 
                
                #line 167
                    nop 
                
                #line 208
                    imul null, r2.w, r2.z, l(4)
                    mov r11.xyz, cb2[r2.w + 0].xyzx  // light<0,1,2>
                    mov r12.xyz, cb2[r2.w + 1].xyzx  // light<4,5,6>
                    mov r13.xyz, cb2[r2.w + 2].xyzx  // light<8,9,10>
                    mov r3.w, cb2[r2.w + 0].w  // light<3>
                    mov r14.xyz, cb2[r2.w + 3].xyzx  // light<12,13,14>
                
                #line 211
                    mov r14.xyz, r14.xyzx  // lightVecW<0,1,2>
                    dp3 r4.w, r14.xyzx, r14.xyzx
                    rsq r4.w, r4.w
                    mul r14.xyz, r4.wwww, r14.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r11.xyzx  // lightAmbientColor3<0,1,2>
                    mov r12.xyz, r12.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r13.xyz, r13.xyzx  // lightSpecColor3<0,1,2>
                    mov r3.w, r3.w  // lightSpecIntensity<0>
                
                #line 167
                    mov r14.xyz, r14.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r11.xyzx  // lightAmbientColor3<0,1,2>
                    mov r12.xyz, r12.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r13.xyz, r13.xyzx  // lightSpecColor3<0,1,2>
                    mov r3.w, r3.w  // lightSpecIntensity<0>
                
                #line 174
                    nop 
                    mov r14.xyz, r14.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r4.w, r5.xyzx, r5.xyzx
                    rsq r4.w, r4.w
                    mul r15.xyz, r4.wwww, r5.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                    mov r16.xyz, -r14.xyzx
                    dp3 r4.w, r16.xyzx, r15.xyzx
                    mul r2.w, r4.w, cb2[r2.w + 1].w  // RenderProcess_Gouraud::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 174
                    mov r2.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 177
                    mul r11.xyz, r11.xyzx, cb3[0].xyzx  // outAmbient4<0:Inf,1:Inf,2:Inf>
                
                #line 180
                    lt r4.w, l(0.000000), r2.w
                    if_nz r4.w
                
                #line 183
                      mul r2.w, r2.w, l(1.000000)
                      mul r12.xyz, r12.xyzx, cb3[1].xyzx
                      mul r12.xyz, r2.wwww, r12.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 186
                      dp3 r2.w, r14.xyzx, r15.xyzx
                      add r2.w, r2.w, r2.w
                      mov r2.w, -r2.w
                      mul r15.xyz, r2.wwww, r15.xyzx
                      add r14.xyz, r14.xyzx, r15.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 189
                      dp3 r2.w, r7.xyzx, r7.xyzx
                      rsq r2.w, r2.w
                      mul r15.xyz, r2.wwww, r7.xyzx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 192
                      dp3 r2.w, r14.xyzx, r15.xyzx
                      max r2.w, r2.w, l(0.000000)
                      itof r4.w, cb3[0].w
                      log r2.w, r2.w
                      mul r2.w, r2.w, r4.w
                      exp r2.w, r2.w
                      mul r2.w, r2.w, r3.w  // SpecFactor<0:NaN:Inf>
                
                #line 195
                      mul r2.w, r2.w, l(1.000000)
                      mul r13.xyz, r13.xyzx, cb3[2].xyzx
                      mul r13.xyz, r2.wwww, r13.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                    else 
                      mov r12.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                      mov r13.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 87
                    mov r11.xyz, r11.xyzx  // amb<0:Inf,1:Inf,2:Inf>
                    mov r12.xyz, r12.xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r13.xyz, r13.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r8.xyz, r8.xyzx, r11.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r9.xyz, r9.xyzx, r12.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r10.xyz, r10.xyzx, r13.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 82
                    iadd r2.z, r2.z, l(1)  // i<0>
                  endloop 
                
                #line 92
                  mov r4.xyz, r8.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r9.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r10.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.z, r0.w  // i<0>
                  loop 
                    ilt r2.w, r2.z, cb2[130].y
                    breakc_z r2.w
                
                #line 97
                    nop 
                
                #line 167
                    nop 
                
                #line 224
                    imul null, r2.w, r2.z, l(4)
                    mov r13.xyz, cb2[r2.w + 40].xyzx  // light<0,1,2>
                    mov r14.xyz, cb2[r2.w + 41].xyzx  // light<4,5,6>
                    mov r15.xyz, cb2[r2.w + 42].xyzx  // light<8,9,10>
                    mov r16.xyz, cb2[r2.w + 43].xyzx  // light<12,13,14>
                    mov r3.w, cb2[r2.w + 40].w  // light<3>
                    mov r4.w, cb2[r2.w + 42].w  // light<11>
                    mov r5.w, cb2[r2.w + 43].w  // light<15>
                
                #line 227
                    mov r16.xyz, -r16.xyzx
                    add r16.xyz, r6.xyzx, r16.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r6.w, r16.xyzx, r16.xyzx
                    rsq r7.w, r6.w
                    mul r16.xyz, r7.wwww, r16.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231
                    sqrt r6.w, r6.w  // distanceFromLight<0:NaN:Inf>
                    lt r17.xy, r5.wwww, r6.wwww
                    if_nz r17.y
                      mov r5.w, l(-1)  // RenderProcess_Gouraud::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 236
                    not r7.w, r17.y
                    not r8.w, r17.x
                    and r7.w, r7.w, r8.w
                    not r8.w, r7.w
                    if_nz r7.w
                      mul r4.w, r4.w, r6.w
                      add r4.w, r4.w, l(1.000000)
                      div r4.w, l(1.000000), r4.w  // attenuation<0:NaN:Inf>
                      mov r13.xyz, r13.xyzx  // lightAmbientColor3<0,1,2>
                      mov r14.xyz, r14.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r15.xyz, r15.xyzx  // lightSpecColor3<0,1,2>
                      mov r3.w, r3.w  // lightSpecIntensity<0>
                
                #line 236
                    endif 
                    and r6.w, r7.w, r8.w
                    or r6.w, r17.x, r6.w
                
                #line 272
                    if_z r6.w
                      mov r5.w, l(0)  // RenderProcess_Gouraud::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 167
                    mov r16.xyz, r16.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // attenuation<0:NaN:Inf>
                    mov r13.xyz, r13.xyzx  // lightAmbientColor3<0:Inf,1:Inf,2:Inf>
                    mov r14.xyz, r14.xyzx  // lightDiffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r15.xyz, r15.xyzx  // lightSpecColor3<0:Inf,1:Inf,2:Inf>
                    mov r3.w, r3.w  // lightSpecIntensity<0:Inf>
                
                #line 174
                    if_z r5.w
                      nop 
                      mov r17.xyz, r16.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r5.w, r5.xyzx, r5.xyzx
                      rsq r5.w, r5.w
                      mul r18.xyz, r5.wwww, r5.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 287
                      mov r17.xyz, -r17.xyzx
                      dp3 r5.w, r17.xyzx, r18.xyzx
                      mul r2.w, r5.w, cb2[r2.w + 41].w  // RenderProcess_Gouraud::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 174
                      mov r2.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 177
                      mul r13.xyz, r13.xyzx, cb3[0].xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      lt r5.w, l(0.000000), r2.w
                      if_nz r5.w
                
                #line 183
                        mul r2.w, r2.w, r4.w
                        mul r14.xyz, r14.xyzx, cb3[1].xyzx
                        mul r14.xyz, r2.wwww, r14.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 186
                        dp3 r2.w, r16.xyzx, r18.xyzx
                        add r2.w, r2.w, r2.w
                        mov r2.w, -r2.w
                        mul r17.xyz, r2.wwww, r18.xyzx
                        add r16.xyz, r16.xyzx, r17.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 189
                        dp3 r2.w, r7.xyzx, r7.xyzx
                        rsq r2.w, r2.w
                        mul r17.xyz, r2.wwww, r7.xyzx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 192
                        dp3 r2.w, r16.xyzx, r17.xyzx
                        max r2.w, r2.w, l(0.000000)
                        itof r5.w, cb3[0].w
                        log r2.w, r2.w
                        mul r2.w, r2.w, r5.w
                        exp r2.w, r2.w
                        mul r2.w, r2.w, r3.w  // SpecFactor<0:NaN:Inf>
                
                #line 195
                        mul r2.w, r2.w, r4.w
                        mul r15.xyz, r15.xyzx, cb3[2].xyzx
                        mul r15.xyz, r2.wwww, r15.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      else 
                        mov r14.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                        mov r15.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 174
                    else 
                      mov r13.xyz, l(0,0,0,0)  // outAmbient4<0: 0f,1: 0f,2: 0f>
                      mov r14.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                      mov r15.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 97
                    mov r13.xyz, r13.xyzx  // amb<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r14.xyz, r14.xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r15.xyz, r15.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r13.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r11.xyz, r11.xyzx, r14.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r12.xyz, r12.xyzx, r15.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 92
                    iadd r2.z, r2.z, l(1)  // i<0>
                  endloop 
                
                #line 102
                  mov r8.xyz, r4.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r9.xyz, r11.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r12.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.z, r0.w  // i<0>
                  loop 
                    ilt r2.w, r2.z, cb2[130].z
                    breakc_z r2.w
                
                #line 107
                    nop 
                
                #line 167
                    nop 
                
                #line 246
                    imul null, r2.w, r2.z, l(5)
                    mov r13.xyz, cb2[r2.w + 80].xyzx  // light<0,1,2>
                    mov r14.xyz, cb2[r2.w + 81].xyzx  // light<4,5,6>
                    mov r15.xyz, cb2[r2.w + 82].xyzx  // light<8,9,10>
                    mov r16.xyz, cb2[r2.w + 83].xyzx  // light<12,13,14>
                    mov r17.xyz, cb2[r2.w + 84].xyzx  // light<16,17,18>
                    mov r3.w, cb2[r2.w + 80].w  // light<3>
                    mov r4.w, cb2[r2.w + 82].w  // light<11>
                    mov r5.w, cb2[r2.w + 83].w  // light<15>
                    mov r6.w, cb2[r2.w + 84].w  // light<19>
                
                #line 249
                    mov r17.xyz, -r17.xyzx
                    add r18.xyz, r6.xyzx, r17.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r18.xyzx, r18.xyzx
                    rsq r11.w, r7.w
                    mul r18.xyz, r11.wwww, r18.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                    sqrt r7.w, r7.w  // distanceFromLight<0:NaN:Inf>
                    add r16.xyz, r16.xyzx, r17.xyzx
                    dp3 r11.w, r16.xyzx, r16.xyzx
                    rsq r11.w, r11.w
                    mul r16.xyz, r11.wwww, r16.xyzx
                    dp3 r11.w, r18.xyzx, r16.xyzx  // Cos_Theta<0:NaN:Inf>
                    lt r6.w, r6.w, r7.w
                    div r5.w, r5.w, l(2.000000)
                    sincos null, r5.w, r5.w
                    lt r5.w, r11.w, r5.w
                    or r16.xy, r5.wwww, r6.wwww
                    if_nz r16.y
                      mov r5.w, l(-1)  // RenderProcess_Gouraud::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 261
                    not r6.w, r16.y
                    not r11.w, r16.x
                    and r6.w, r6.w, r11.w
                    not r11.w, r6.w
                    if_nz r6.w
                      mul r4.w, r4.w, r7.w
                      add r4.w, r4.w, l(1.000000)
                      div r4.w, l(1.000000), r4.w  // attenuation<0:NaN:Inf>
                      mov r13.xyz, r13.xyzx  // lightAmbientColor3<0,1,2>
                      mov r14.xyz, r14.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r15.xyz, r15.xyzx  // lightSpecColor3<0,1,2>
                      mov r3.w, r3.w  // lightSpecIntensity<0>
                
                #line 261
                    endif 
                    and r6.w, r6.w, r11.w
                    or r6.w, r16.x, r6.w
                
                #line 272
                    if_z r6.w
                      mov r5.w, l(0)  // RenderProcess_Gouraud::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 167
                    mov r18.xyz, r18.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // attenuation<0:NaN:Inf>
                    mov r13.xyz, r13.xyzx  // lightAmbientColor3<0:Inf,1:Inf,2:Inf>
                    mov r14.xyz, r14.xyzx  // lightDiffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r15.xyz, r15.xyzx  // lightSpecColor3<0:Inf,1:Inf,2:Inf>
                    mov r3.w, r3.w  // lightSpecIntensity<0:Inf>
                
                #line 174
                    if_z r5.w
                      nop 
                      mov r16.xyz, r18.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r5.w, r5.xyzx, r5.xyzx
                      rsq r5.w, r5.w
                      mul r17.xyz, r5.wwww, r5.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 293
                      mov r16.xyz, -r16.xyzx
                      dp3 r5.w, r16.xyzx, r17.xyzx
                      mul r2.w, r5.w, cb2[r2.w + 81].w  // RenderProcess_Gouraud::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 174
                      mov r2.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 177
                      mul r13.xyz, r13.xyzx, cb3[0].xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      lt r5.w, l(0.000000), r2.w
                      if_nz r5.w
                
                #line 183
                        mul r2.w, r2.w, r4.w
                        mul r14.xyz, r14.xyzx, cb3[1].xyzx
                        mul r14.xyz, r2.wwww, r14.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 186
                        dp3 r2.w, r18.xyzx, r17.xyzx
                        add r2.w, r2.w, r2.w
                        mov r2.w, -r2.w
                        mul r16.xyz, r2.wwww, r17.xyzx
                        add r16.xyz, r18.xyzx, r16.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 189
                        dp3 r2.w, r7.xyzx, r7.xyzx
                        rsq r2.w, r2.w
                        mul r17.xyz, r2.wwww, r7.xyzx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 192
                        dp3 r2.w, r16.xyzx, r17.xyzx
                        max r2.w, r2.w, l(0.000000)
                        itof r5.w, cb3[0].w
                        log r2.w, r2.w
                        mul r2.w, r2.w, r5.w
                        exp r2.w, r2.w
                        mul r2.w, r2.w, r3.w  // SpecFactor<0:NaN:Inf>
                
                #line 195
                        mul r2.w, r2.w, r4.w
                        mul r15.xyz, r15.xyzx, cb3[2].xyzx
                        mul r15.xyz, r2.wwww, r15.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      else 
                        mov r14.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                        mov r15.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 174
                    else 
                      mov r13.xyz, l(0,0,0,0)  // outAmbient4<0: 0f,1: 0f,2: 0f>
                      mov r14.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                      mov r15.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 107
                    mov r13.xyz, r13.xyzx  // amb<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r14.xyz, r14.xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r15.xyz, r15.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r8.xyz, r8.xyzx, r13.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r9.xyz, r9.xyzx, r14.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r10.xyz, r10.xyzx, r15.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 102
                    iadd r2.z, r2.z, l(1)  // i<0>
                  endloop 
                
                #line 80
                else 
                  mov r8.xyz, l(0,0,0,0)  // outAmbient4<0: 0f,1: 0f,2: 0f>
                  mov r9.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                  mov r10.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 30
                mov r8.xyz, r8.xyzx  // ambientLightingColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r8.w, l(1.000000)  // ambientLightingColor<3: 1f>
                mov r9.xyz, r9.xyzx  // diffuseLightingColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r9.w, l(1.000000)  // diffuseLightingColor<3: 1f>
                mov r10.xyz, r10.xyzx  // specularLightingColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r10.w, l(1.000000)  // specularLightingColor<3: 1f>
                
                #line 34
                mov r8.xyzw, r8.xyzw  // output<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7: 1f>
                mov r9.xyzw, r9.xyzw  // output<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf,11: 1f>
                mov r10.xyzw, r10.xyzw  // output<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15: 1f>
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithVertexLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r8.xyzw  // VS_DrawMeshWithVertexLighting<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7: 1f>
                mov o2.xyzw, r9.xyzw  // VS_DrawMeshWithVertexLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf,11: 1f>
                mov o3.xyzw, r10.xyzw  // VS_DrawMeshWithVertexLighting<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15: 1f>
                mov o4.xyz, r0.xyzx  // VS_DrawMeshWithVertexLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o5.xyz, r3.xyzx  // VS_DrawMeshWithVertexLighting<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
                mov o6.xy, r2.xyxx  // VS_DrawMeshWithVertexLighting<22,23>
                ret 
                // Approximately 344 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerSubset                       cbuffer      NA          NA    1        1
                // cbAtmosphere                      cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyz 
                // COLOR                    1   xyzw        2     NONE  float   xyz 
                // COLOR                    2   xyzw        3     NONE  float   xyz 
                // POSITION                 0   xyz         4     NONE  float   xyz 
                // NORMAL                   0   xyz         5     NONE  float       
                // TEXCOORD                 0   xy          6     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[2], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_output o0.xyzw
                dcl_temps 5
                
                #line 45 "DrawMesh_Gouraud.fx"
                nop 
                mov r0.xyz, v4.xyzx  // posW<0,1,2>
                mov r1.xyz, v1.xyzx  // ambient<0,1,2>
                mov r2.xyz, v2.xyzx  // diffuse<0,1,2>
                mov r3.xyz, v3.xyzx  // specular<0,1,2>
                
                #line 125
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, cb0[12].xyzx  // renderProc<6:Inf,7:Inf,8:Inf>
                
                #line 128
                ieq r0.w, cb2[0].w, l(1)
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x
                lt r0.y, cb2[1].y, r0.x
                and r0.y, r0.y, r0.w
                if_nz r0.y
                  mov r4.xyz, cb2[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                endif 
                
                #line 136
                if_z r0.y
                  nop 
                
                #line 103 "DrawMesh_Common.fx"
                  mov r0.yzw, cb1[1].xxyz  // SampleFromDiffuseMap<0,1,2>
                
                #line 136 "DrawMesh_Gouraud.fx"
                  mov r0.yzw, r0.yyzw  // albedo3<0,1,2>
                  mul r0.yzw, r2.xxyz, r0.yyzw
                  add r0.yzw, r0.yyzw, r1.xxyz
                  add r4.xyz, r3.xyzx, r0.yzwy  // outColor4<0:Inf,1:Inf,2:Inf>
                  mov r4.w, cb1[3].x  // outColor4<3>
                
                #line 141
                  ine r0.y, l(0, 0, 0, 0), cb2[0].w
                  if_nz r0.y
                    mov r0.y, -cb2[1].x
                    add r0.x, r0.y, r0.x
                    add r0.y, r0.y, cb2[1].y
                    div r0.x, r0.x, r0.y
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r1.xyzw, -r4.xyzw
                    mov r2.xyz, cb2[0].xyzx
                    mov r2.w, l(1.000000)
                    add r1.xyzw, r1.xyzw, r2.xyzw
                    mul r0.xyzw, r0.xxxx, r1.xyzw
                    add r4.xyzw, r0.xyzw, r4.xyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 141
                  endif 
                
                #line 136
                endif 
                
                #line 45
                mov r4.xyzw, r4.xyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 57
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithVertexLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 43 instruction slots used
                            
            };
        }

        pass perVertex_enableDiffMap
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                // cbPerFrame                        cbuffer      NA          NA    2        1
                // cbPerSubset                       cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // COLOR                    1   xyzw        2     NONE  float   xyzw
                // COLOR                    2   xyzw        3     NONE  float   xyzw
                // POSITION                 0   xyz         4     NONE  float   xyz 
                // NORMAL                   0   xyz         5     NONE  float   xyz 
                // TEXCOORD                 0   xy          6     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[13], immediateIndexed
                dcl_constantbuffer cb2[131], dynamicIndexed
                dcl_constantbuffer cb3[3], immediateIndexed
                dcl_input v0.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_output o4.xyz
                dcl_output o5.xyz
                dcl_output o6.xy
                dcl_temps 19
                
                #line 17 "DrawMesh_Gouraud.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r0.x, r1.x  // output<16:NaN:Inf>
                mov r0.y, r1.y  // output<17:NaN:Inf>
                mov r0.z, r1.z  // output<18:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyz, v2.xyzx
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb0[4].xyzw  // output<19:NaN:Inf>
                dp4 r3.y, r2.xyzw, cb0[5].xyzw  // output<20:NaN:Inf>
                dp4 r3.z, r2.xyzw, cb0[6].xyzw  // output<21:NaN:Inf>
                mov r2.xy, v3.xyxx  // output<22,23>
                
                #line 30
                nop 
                mov r3.xyz, r3.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // posW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 67
                mov r4.xyz, l(0,0,0,0)  // outAmbient4<0: -0f,1: -0f,2: -0f>
                
                #line 72
                mov r5.xyz, r3.xyzx  // renderProc<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r0.xyzx  // renderProc<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
                mov r7.xyz, -r6.xyzx
                add r7.xyz, r7.xyzx, cb1[12].xyzx  // renderProc<6:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                
                #line 80
                ine r0.w, l(0, 0, 0, 0), cb2[130].w
                if_nz r0.w
                  mov r0.w, l(0)  // i<0: 0>
                  mov r8.xyz, r4.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r9.xyz, r4.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r4.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.z, r0.w  // i<0>
                  loop 
                    ilt r2.w, r2.z, cb2[130].x
                    breakc_z r2.w
                
                #line 87
                    nop 
                
                #line 167
                    nop 
                
                #line 208
                    imul null, r2.w, r2.z, l(4)
                    mov r11.xyz, cb2[r2.w + 0].xyzx  // light<0,1,2>
                    mov r12.xyz, cb2[r2.w + 1].xyzx  // light<4,5,6>
                    mov r13.xyz, cb2[r2.w + 2].xyzx  // light<8,9,10>
                    mov r3.w, cb2[r2.w + 0].w  // light<3>
                    mov r14.xyz, cb2[r2.w + 3].xyzx  // light<12,13,14>
                
                #line 211
                    mov r14.xyz, r14.xyzx  // lightVecW<0,1,2>
                    dp3 r4.w, r14.xyzx, r14.xyzx
                    rsq r4.w, r4.w
                    mul r14.xyz, r4.wwww, r14.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r11.xyzx  // lightAmbientColor3<0,1,2>
                    mov r12.xyz, r12.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r13.xyz, r13.xyzx  // lightSpecColor3<0,1,2>
                    mov r3.w, r3.w  // lightSpecIntensity<0>
                
                #line 167
                    mov r14.xyz, r14.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r11.xyzx  // lightAmbientColor3<0,1,2>
                    mov r12.xyz, r12.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r13.xyz, r13.xyzx  // lightSpecColor3<0,1,2>
                    mov r3.w, r3.w  // lightSpecIntensity<0>
                
                #line 174
                    nop 
                    mov r14.xyz, r14.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r4.w, r5.xyzx, r5.xyzx
                    rsq r4.w, r4.w
                    mul r15.xyz, r4.wwww, r5.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 281
                    mov r16.xyz, -r14.xyzx
                    dp3 r4.w, r16.xyzx, r15.xyzx
                    mul r2.w, r4.w, cb2[r2.w + 1].w  // RenderProcess_Gouraud::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 174
                    mov r2.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 177
                    mul r11.xyz, r11.xyzx, cb3[0].xyzx  // outAmbient4<0:Inf,1:Inf,2:Inf>
                
                #line 180
                    lt r4.w, l(0.000000), r2.w
                    if_nz r4.w
                
                #line 183
                      mul r2.w, r2.w, l(1.000000)
                      mul r12.xyz, r12.xyzx, cb3[1].xyzx
                      mul r12.xyz, r2.wwww, r12.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 186
                      dp3 r2.w, r14.xyzx, r15.xyzx
                      add r2.w, r2.w, r2.w
                      mov r2.w, -r2.w
                      mul r15.xyz, r2.wwww, r15.xyzx
                      add r14.xyz, r14.xyzx, r15.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 189
                      dp3 r2.w, r7.xyzx, r7.xyzx
                      rsq r2.w, r2.w
                      mul r15.xyz, r2.wwww, r7.xyzx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 192
                      dp3 r2.w, r14.xyzx, r15.xyzx
                      max r2.w, r2.w, l(0.000000)
                      itof r4.w, cb3[0].w
                      log r2.w, r2.w
                      mul r2.w, r2.w, r4.w
                      exp r2.w, r2.w
                      mul r2.w, r2.w, r3.w  // SpecFactor<0:NaN:Inf>
                
                #line 195
                      mul r2.w, r2.w, l(1.000000)
                      mul r13.xyz, r13.xyzx, cb3[2].xyzx
                      mul r13.xyz, r2.wwww, r13.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                    else 
                      mov r12.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                      mov r13.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 87
                    mov r11.xyz, r11.xyzx  // amb<0:Inf,1:Inf,2:Inf>
                    mov r12.xyz, r12.xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r13.xyz, r13.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r8.xyz, r8.xyzx, r11.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r9.xyz, r9.xyzx, r12.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r10.xyz, r10.xyzx, r13.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 82
                    iadd r2.z, r2.z, l(1)  // i<0>
                  endloop 
                
                #line 92
                  mov r4.xyz, r8.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r9.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r10.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.z, r0.w  // i<0>
                  loop 
                    ilt r2.w, r2.z, cb2[130].y
                    breakc_z r2.w
                
                #line 97
                    nop 
                
                #line 167
                    nop 
                
                #line 224
                    imul null, r2.w, r2.z, l(4)
                    mov r13.xyz, cb2[r2.w + 40].xyzx  // light<0,1,2>
                    mov r14.xyz, cb2[r2.w + 41].xyzx  // light<4,5,6>
                    mov r15.xyz, cb2[r2.w + 42].xyzx  // light<8,9,10>
                    mov r16.xyz, cb2[r2.w + 43].xyzx  // light<12,13,14>
                    mov r3.w, cb2[r2.w + 40].w  // light<3>
                    mov r4.w, cb2[r2.w + 42].w  // light<11>
                    mov r5.w, cb2[r2.w + 43].w  // light<15>
                
                #line 227
                    mov r16.xyz, -r16.xyzx
                    add r16.xyz, r6.xyzx, r16.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r6.w, r16.xyzx, r16.xyzx
                    rsq r7.w, r6.w
                    mul r16.xyz, r7.wwww, r16.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231
                    sqrt r6.w, r6.w  // distanceFromLight<0:NaN:Inf>
                    lt r17.xy, r5.wwww, r6.wwww
                    if_nz r17.y
                      mov r5.w, l(-1)  // RenderProcess_Gouraud::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 236
                    not r7.w, r17.y
                    not r8.w, r17.x
                    and r7.w, r7.w, r8.w
                    not r8.w, r7.w
                    if_nz r7.w
                      mul r4.w, r4.w, r6.w
                      add r4.w, r4.w, l(1.000000)
                      div r4.w, l(1.000000), r4.w  // attenuation<0:NaN:Inf>
                      mov r13.xyz, r13.xyzx  // lightAmbientColor3<0,1,2>
                      mov r14.xyz, r14.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r15.xyz, r15.xyzx  // lightSpecColor3<0,1,2>
                      mov r3.w, r3.w  // lightSpecIntensity<0>
                
                #line 236
                    endif 
                    and r6.w, r7.w, r8.w
                    or r6.w, r17.x, r6.w
                
                #line 272
                    if_z r6.w
                      mov r5.w, l(0)  // RenderProcess_Gouraud::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 167
                    mov r16.xyz, r16.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // attenuation<0:NaN:Inf>
                    mov r13.xyz, r13.xyzx  // lightAmbientColor3<0:Inf,1:Inf,2:Inf>
                    mov r14.xyz, r14.xyzx  // lightDiffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r15.xyz, r15.xyzx  // lightSpecColor3<0:Inf,1:Inf,2:Inf>
                    mov r3.w, r3.w  // lightSpecIntensity<0:Inf>
                
                #line 174
                    if_z r5.w
                      nop 
                      mov r17.xyz, r16.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r5.w, r5.xyzx, r5.xyzx
                      rsq r5.w, r5.w
                      mul r18.xyz, r5.wwww, r5.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 287
                      mov r17.xyz, -r17.xyzx
                      dp3 r5.w, r17.xyzx, r18.xyzx
                      mul r2.w, r5.w, cb2[r2.w + 41].w  // RenderProcess_Gouraud::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 174
                      mov r2.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 177
                      mul r13.xyz, r13.xyzx, cb3[0].xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      lt r5.w, l(0.000000), r2.w
                      if_nz r5.w
                
                #line 183
                        mul r2.w, r2.w, r4.w
                        mul r14.xyz, r14.xyzx, cb3[1].xyzx
                        mul r14.xyz, r2.wwww, r14.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 186
                        dp3 r2.w, r16.xyzx, r18.xyzx
                        add r2.w, r2.w, r2.w
                        mov r2.w, -r2.w
                        mul r17.xyz, r2.wwww, r18.xyzx
                        add r16.xyz, r16.xyzx, r17.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 189
                        dp3 r2.w, r7.xyzx, r7.xyzx
                        rsq r2.w, r2.w
                        mul r17.xyz, r2.wwww, r7.xyzx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 192
                        dp3 r2.w, r16.xyzx, r17.xyzx
                        max r2.w, r2.w, l(0.000000)
                        itof r5.w, cb3[0].w
                        log r2.w, r2.w
                        mul r2.w, r2.w, r5.w
                        exp r2.w, r2.w
                        mul r2.w, r2.w, r3.w  // SpecFactor<0:NaN:Inf>
                
                #line 195
                        mul r2.w, r2.w, r4.w
                        mul r15.xyz, r15.xyzx, cb3[2].xyzx
                        mul r15.xyz, r2.wwww, r15.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      else 
                        mov r14.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                        mov r15.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 174
                    else 
                      mov r13.xyz, l(0,0,0,0)  // outAmbient4<0: 0f,1: 0f,2: 0f>
                      mov r14.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                      mov r15.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 97
                    mov r13.xyz, r13.xyzx  // amb<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r14.xyz, r14.xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r15.xyz, r15.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r4.xyz, r4.xyzx, r13.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r11.xyz, r11.xyzx, r14.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r12.xyz, r12.xyzx, r15.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 92
                    iadd r2.z, r2.z, l(1)  // i<0>
                  endloop 
                
                #line 102
                  mov r8.xyz, r4.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r9.xyz, r11.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r12.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.z, r0.w  // i<0>
                  loop 
                    ilt r2.w, r2.z, cb2[130].z
                    breakc_z r2.w
                
                #line 107
                    nop 
                
                #line 167
                    nop 
                
                #line 246
                    imul null, r2.w, r2.z, l(5)
                    mov r13.xyz, cb2[r2.w + 80].xyzx  // light<0,1,2>
                    mov r14.xyz, cb2[r2.w + 81].xyzx  // light<4,5,6>
                    mov r15.xyz, cb2[r2.w + 82].xyzx  // light<8,9,10>
                    mov r16.xyz, cb2[r2.w + 83].xyzx  // light<12,13,14>
                    mov r17.xyz, cb2[r2.w + 84].xyzx  // light<16,17,18>
                    mov r3.w, cb2[r2.w + 80].w  // light<3>
                    mov r4.w, cb2[r2.w + 82].w  // light<11>
                    mov r5.w, cb2[r2.w + 83].w  // light<15>
                    mov r6.w, cb2[r2.w + 84].w  // light<19>
                
                #line 249
                    mov r17.xyz, -r17.xyzx
                    add r18.xyz, r6.xyzx, r17.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r7.w, r18.xyzx, r18.xyzx
                    rsq r11.w, r7.w
                    mul r18.xyz, r11.wwww, r18.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 255
                    sqrt r7.w, r7.w  // distanceFromLight<0:NaN:Inf>
                    add r16.xyz, r16.xyzx, r17.xyzx
                    dp3 r11.w, r16.xyzx, r16.xyzx
                    rsq r11.w, r11.w
                    mul r16.xyz, r11.wwww, r16.xyzx
                    dp3 r11.w, r18.xyzx, r16.xyzx  // Cos_Theta<0:NaN:Inf>
                    lt r6.w, r6.w, r7.w
                    div r5.w, r5.w, l(2.000000)
                    sincos null, r5.w, r5.w
                    lt r5.w, r11.w, r5.w
                    or r16.xy, r5.wwww, r6.wwww
                    if_nz r16.y
                      mov r5.w, l(-1)  // RenderProcess_Gouraud::mFunction_ComputeLightingVariables<0: true>
                    endif 
                
                #line 261
                    not r6.w, r16.y
                    not r11.w, r16.x
                    and r6.w, r6.w, r11.w
                    not r11.w, r6.w
                    if_nz r6.w
                      mul r4.w, r4.w, r7.w
                      add r4.w, r4.w, l(1.000000)
                      div r4.w, l(1.000000), r4.w  // attenuation<0:NaN:Inf>
                      mov r13.xyz, r13.xyzx  // lightAmbientColor3<0,1,2>
                      mov r14.xyz, r14.xyzx  // lightDiffuseColor3<0,1,2>
                      mov r15.xyz, r15.xyzx  // lightSpecColor3<0,1,2>
                      mov r3.w, r3.w  // lightSpecIntensity<0>
                
                #line 261
                    endif 
                    and r6.w, r6.w, r11.w
                    or r6.w, r16.x, r6.w
                
                #line 272
                    if_z r6.w
                      mov r5.w, l(0)  // RenderProcess_Gouraud::mFunction_ComputeLightingVariables<0: false>
                    endif 
                
                #line 167
                    mov r18.xyz, r18.xyzx  // unitLightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // attenuation<0:NaN:Inf>
                    mov r13.xyz, r13.xyzx  // lightAmbientColor3<0:Inf,1:Inf,2:Inf>
                    mov r14.xyz, r14.xyzx  // lightDiffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r15.xyz, r15.xyzx  // lightSpecColor3<0:Inf,1:Inf,2:Inf>
                    mov r3.w, r3.w  // lightSpecIntensity<0:Inf>
                
                #line 174
                    if_z r5.w
                      nop 
                      mov r16.xyz, r18.xyzx  // lightVecW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r5.w, r5.xyzx, r5.xyzx
                      rsq r5.w, r5.w
                      mul r17.xyz, r5.wwww, r5.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 293
                      mov r16.xyz, -r16.xyzx
                      dp3 r5.w, r16.xyzx, r17.xyzx
                      mul r2.w, r5.w, cb2[r2.w + 81].w  // RenderProcess_Gouraud::mFunction_ComputeDiffuseCosineFactor<0:NaN:Inf>
                
                #line 174
                      mov r2.w, r2.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 177
                      mul r13.xyz, r13.xyzx, cb3[0].xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      lt r5.w, l(0.000000), r2.w
                      if_nz r5.w
                
                #line 183
                        mul r2.w, r2.w, r4.w
                        mul r14.xyz, r14.xyzx, cb3[1].xyzx
                        mul r14.xyz, r2.wwww, r14.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 186
                        dp3 r2.w, r18.xyzx, r17.xyzx
                        add r2.w, r2.w, r2.w
                        mov r2.w, -r2.w
                        mul r16.xyz, r2.wwww, r17.xyzx
                        add r16.xyz, r18.xyzx, r16.xyzx  // reflectedLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 189
                        dp3 r2.w, r7.xyzx, r7.xyzx
                        rsq r2.w, r2.w
                        mul r17.xyz, r2.wwww, r7.xyzx  // unitVecToCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 192
                        dp3 r2.w, r16.xyzx, r17.xyzx
                        max r2.w, r2.w, l(0.000000)
                        itof r5.w, cb3[0].w
                        log r2.w, r2.w
                        mul r2.w, r2.w, r5.w
                        exp r2.w, r2.w
                        mul r2.w, r2.w, r3.w  // SpecFactor<0:NaN:Inf>
                
                #line 195
                        mul r2.w, r2.w, r4.w
                        mul r15.xyz, r15.xyzx, cb3[2].xyzx
                        mul r15.xyz, r2.wwww, r15.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                      else 
                        mov r14.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                        mov r15.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                      endif 
                
                #line 174
                    else 
                      mov r13.xyz, l(0,0,0,0)  // outAmbient4<0: 0f,1: 0f,2: 0f>
                      mov r14.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                      mov r15.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                    endif 
                
                #line 107
                    mov r13.xyz, r13.xyzx  // amb<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r14.xyz, r14.xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r15.xyz, r15.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r8.xyz, r8.xyzx, r13.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r9.xyz, r9.xyzx, r14.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    add r10.xyz, r10.xyzx, r15.xyzx  // outSpecular4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 102
                    iadd r2.z, r2.z, l(1)  // i<0>
                  endloop 
                
                #line 80
                else 
                  mov r8.xyz, l(0,0,0,0)  // outAmbient4<0: 0f,1: 0f,2: 0f>
                  mov r9.xyz, l(0,0,0,0)  // outDiffuse4<0: 0f,1: 0f,2: 0f>
                  mov r10.xyz, l(0,0,0,0)  // outSpecular4<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 30
                mov r8.xyz, r8.xyzx  // ambientLightingColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r8.w, l(1.000000)  // ambientLightingColor<3: 1f>
                mov r9.xyz, r9.xyzx  // diffuseLightingColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r9.w, l(1.000000)  // diffuseLightingColor<3: 1f>
                mov r10.xyz, r10.xyzx  // specularLightingColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r10.w, l(1.000000)  // specularLightingColor<3: 1f>
                
                #line 34
                mov r8.xyzw, r8.xyzw  // output<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7: 1f>
                mov r9.xyzw, r9.xyzw  // output<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf,11: 1f>
                mov r10.xyzw, r10.xyzw  // output<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15: 1f>
                mov o0.xyzw, r1.xyzw  // VS_DrawMeshWithVertexLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r8.xyzw  // VS_DrawMeshWithVertexLighting<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf,7: 1f>
                mov o2.xyzw, r9.xyzw  // VS_DrawMeshWithVertexLighting<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf,11: 1f>
                mov o3.xyzw, r10.xyzw  // VS_DrawMeshWithVertexLighting<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15: 1f>
                mov o4.xyz, r0.xyzx  // VS_DrawMeshWithVertexLighting<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o5.xyz, r3.xyzx  // VS_DrawMeshWithVertexLighting<19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
                mov o6.xy, r2.xyxx  // VS_DrawMeshWithVertexLighting<22,23>
                ret 
                // Approximately 344 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPerSubset                       cbuffer      NA          NA    1        1
                // cbAtmosphere                      cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyz 
                // COLOR                    1   xyzw        2     NONE  float   xyz 
                // COLOR                    2   xyzw        3     NONE  float   xyz 
                // POSITION                 0   xyz         4     NONE  float   xyz 
                // NORMAL                   0   xyz         5     NONE  float       
                // TEXCOORD                 0   xy          6     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyz
                dcl_input_ps linear v6.xy
                dcl_output o0.xyzw
                dcl_temps 5
                
                #line 45 "DrawMesh_Gouraud.fx"
                nop 
                mov r0.xyz, v4.xyzx  // posW<0,1,2>
                mov r1.xyz, v1.xyzx  // ambient<0,1,2>
                mov r2.xyz, v2.xyzx  // diffuse<0,1,2>
                mov r3.xyz, v3.xyzx  // specular<0,1,2>
                
                #line 125
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, cb0[12].xyzx  // renderProc<6:Inf,7:Inf,8:Inf>
                
                #line 128
                ieq r0.w, cb2[0].w, l(1)
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x
                lt r0.y, cb2[1].y, r0.x
                and r0.y, r0.y, r0.w
                if_nz r0.y
                  mov r4.xyz, cb2[0].xyzx  // outColor4<0,1,2>
                  mov r4.w, l(1.000000)  // outColor4<3: 1f>
                endif 
                
                #line 136
                if_z r0.y
                  nop 
                
                #line 98 "DrawMesh_Common.fx"
                  sample_indexable(texture2d)(float,float,float,float) r0.yzw, v6.xyxx, t0.wxyz, s0  // SampleFromDiffuseMap<0:Inf,1:Inf,2:Inf>
                
                #line 136 "DrawMesh_Gouraud.fx"
                  mov r0.yzw, r0.yyzw  // albedo3<0:Inf,1:Inf,2:Inf>
                  mul r0.yzw, r2.xxyz, r0.yyzw
                  add r0.yzw, r0.yyzw, r1.xxyz
                  add r4.xyz, r3.xyzx, r0.yzwy  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.w, cb1[3].x  // outColor4<3>
                
                #line 141
                  ine r0.y, l(0, 0, 0, 0), cb2[0].w
                  if_nz r0.y
                    mov r0.y, -cb2[1].x
                    add r0.x, r0.y, r0.x
                    add r0.y, r0.y, cb2[1].y
                    div r0.x, r0.x, r0.y
                    max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                    mov r1.xyzw, -r4.xyzw
                    mov r2.xyz, cb2[0].xyzx
                    mov r2.w, l(1.000000)
                    add r1.xyzw, r1.xyzw, r2.xyzw
                    mul r0.xyzw, r0.xxxx, r1.xyzw
                    add r4.xyzw, r0.xyzw, r4.xyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 141
                  endif 
                
                #line 136
                endif 
                
                #line 45
                mov r4.xyzw, r4.xyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 57
                mov r4.xyzw, r4.xyzw  // psOutput<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // PS_DrawMeshWithVertexLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 43 instruction slots used
                            
            };
        }

    }

    technique11 DrawSolid2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 2
                
                #line 14 "Draw2D.fx"
                mov r0.xyz, v0.xyzx  // output<0,1,2>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov o0.xyzw, r0.xyzw  // VS_Solid2D<0,1,2,3: 1f>
                mov o1.xyzw, r1.xyzw  // VS_Solid2D<4,5,6,7>
                mov o2.xy, l(0,0,0,0)  // VS_Solid2D<8: 0f,9: 0f>
                ret 
                // Approximately 7 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 22 "Draw2D.fx"
                mov r0.xyzw, v1.xyzw  // output<0,1,2,3>
                mov o0.xyzw, r0.xyzw  // PS_Solid2D<0,1,2,3>
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

    technique11 DrawTextured2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                
                #line 31 "Draw2D.fx"
                mov r0.xyz, v0.xyzx  // output<0,1,2>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r2.xy, v2.xyxx  // output<8,9>
                mov o0.xyzw, r0.xyzw  // VS_Textured2D<0,1,2,3: 1f>
                mov o1.xyzw, r1.xyzw  // VS_Textured2D<4,5,6,7>
                mov o2.xy, r2.xyxx  // VS_Textured2D<8,9>
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDraw2D                     sampler      NA          NA    0        1
                // gColorMap2D                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float      w
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.w
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 40 "Draw2D.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0  // sampledColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mul r0.w, r0.w, v1.w  // output<3:NaN:Inf>
                mov r0.xyz, r0.xyzx  // output<0:Inf,1:Inf,2:Inf>
                mov o0.xyzw, r0.xyzw  // PS_Textured2D<0:Inf,1:Inf,2:Inf,3:NaN:Inf>
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

    }

    technique11 DrawText2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                
                #line 51 "Draw2D.fx"
                mov r0.xyz, v0.xyzx  // output<0,1,2>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r2.xy, v2.xyxx  // output<8,9>
                mov o0.xyzw, r0.xyzw  // VS_DrawText2D<0,1,2,3: 1f>
                mov o1.xyzw, r1.xyzw  // VS_DrawText2D<4,5,6,7>
                mov o2.xy, r2.xyxx  // VS_DrawText2D<8,9>
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbDrawText2D
                // {
                //
                //   float4 g2D_TextColor;              // Offset:    0 Size:    16
                //   float4 g2D_TextGlowColor;          // Offset:   16 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDraw2D                     sampler      NA          NA    0        1
                // gColorMap2D                       texture  float4          2d    0        1
                // cbDrawText2D                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 60 "Draw2D.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0  // sampledColor<0:Inf,1:Inf,2:Inf,3:Inf>
                ne r1.x, r0.w, l(0.000000)
                if_nz r1.x
                  mov r0.xyz, cb0[0].xyzx  // sampledColor<0,1,2>
                endif 
                mov r0.xyz, r0.xyzx  // output<0:Inf,1:Inf,2:Inf>
                mov r0.w, r0.w  // output<3:Inf>
                mov o0.xyzw, r0.xyzw  // PS_DrawText2D<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

    technique11 DrawSky
    {
        pass EmptySky
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 4
                
                #line 16 "DrawSky.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(0)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                mov r1.w, l(1.000000)
                dp4 r0.x, r1.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb0[3].xyzw
                mov r0.zw, r0.wwww  // output<2:NaN:Inf,3:NaN:Inf>
                mov r1.xyz, v0.xyzx  // output<8,9,10>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xy, v2.xyxx  // output<14,15>
                mov o0.xyzw, r0.xyzw  // VS_DrawSky<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawSky<4,5,6,7>
                mov o2.xyz, r1.xyzx  // VS_DrawSky<8,9,10>
                mov o4.xy, r3.xyxx  // VS_DrawSky<14,15>
                mov o3.xyz, l(0,0,0,0)  // VS_DrawSky<11: 0f,12: 0f,13: 0f>
                mov o5.xyz, l(0,0,0,0)  // VS_DrawSky<16: 0f,17: 0f,18: 0f>
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float       
                // NORMAL                   0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                // TANGENT                  0   xyz         5     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 30 "DrawSky.fx"
                mov r0.xyzw, v1.xyzw  // output<0,1,2,3>
                mov o0.xyzw, r0.xyzw  // PS_DrawSky<0,1,2,3>
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

        pass DrawSkyBox
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 4
                
                #line 16 "DrawSky.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(0)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                mov r1.w, l(1.000000)
                dp4 r0.x, r1.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb0[3].xyzw
                mov r0.zw, r0.wwww  // output<2:NaN:Inf,3:NaN:Inf>
                mov r1.xyz, v0.xyzx  // output<8,9,10>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xy, v2.xyxx  // output<14,15>
                mov o0.xyzw, r0.xyzw  // VS_DrawSky<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawSky<4,5,6,7>
                mov o2.xyz, r1.xyzx  // VS_DrawSky<8,9,10>
                mov o4.xy, r3.xyxx  // VS_DrawSky<14,15>
                mov o3.xyz, l(0,0,0,0)  // VS_DrawSky<11: 0f,12: 0f,13: 0f>
                mov o5.xyz, l(0,0,0,0)  // VS_DrawSky<16: 0f,17: 0f,18: 0f>
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12 [unused]
                //   int gFogEnabled;                   // Offset:   12 Size:     4 [unused]
                //   float gFogNear;                    // Offset:   16 Size:     4 [unused]
                //   float gFogFar;                     // Offset:   20 Size:     4 [unused]
                //   float gSkyBoxWidth;                // Offset:   24 Size:     4
                //   float gSkyBoxHeight;               // Offset:   28 Size:     4
                //   float gSkyBoxDepth;                // Offset:   32 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gCubeMap                          texture  float4        cube    0        1
                // cbAtmosphere                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float       
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                // TANGENT                  0   xyz         5     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 41 "DrawSky.fx"
                div r0.x, l(1.000000), cb0[1].z
                div r0.y, l(1.000000), cb0[1].w
                div r0.z, l(1.000000), cb0[2].x
                mul r0.xyz, r0.xyzx, v2.xyzx
                sample_indexable(texturecube)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0  // output<0:Inf,1:Inf,2:Inf,3:Inf>
                mov o0.xyzw, r0.xyzw  // PS_DrawSky<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

        pass DrawSkyDome
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 4
                
                #line 16 "DrawSky.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(0)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                mov r1.w, l(1.000000)
                dp4 r0.x, r1.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb0[3].xyzw
                mov r0.zw, r0.wwww  // output<2:NaN:Inf,3:NaN:Inf>
                mov r1.xyz, v0.xyzx  // output<8,9,10>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xy, v2.xyxx  // output<14,15>
                mov o0.xyzw, r0.xyzw  // VS_DrawSky<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawSky<4,5,6,7>
                mov o2.xyz, r1.xyzx  // VS_DrawSky<8,9,10>
                mov o4.xy, r3.xyxx  // VS_DrawSky<14,15>
                mov o3.xyz, l(0,0,0,0)  // VS_DrawSky<11: 0f,12: 0f,13: 0f>
                mov o5.xyz, l(0,0,0,0)  // VS_DrawSky<16: 0f,17: 0f,18: 0f>
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float       
                // POSITION                 0   xyz         2     NONE  float       
                // NORMAL                   0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 35 "DrawSky.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0  // output<0:Inf,1:Inf,2:Inf,3:Inf>
                mov o0.xyzw, r0.xyzw  // PS_DrawSky<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

    technique11 DrawSolid3D
    {
        pass EmptyTextureSky
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                
                #line 15 "DrawSolid3D.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                dp4 r1.w, r0.xyzw, cb0[7].xyzw
                dp4 r0.x, r1.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r0.z, r1.xyzw, cb0[2].xyzw  // output<2:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb0[3].xyzw  // output<3:NaN:Inf>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r2.xy, v2.xyxx  // output<8,9>
                mov o0.xyzw, r0.xyzw  // VS_Solid3D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r1.xyzw  // VS_Solid3D<4,5,6,7>
                mov o2.xy, r2.xyxx  // VS_Solid3D<8,9>
                ret 
                // Approximately 16 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 24 "DrawSolid3D.fx"
                mov r0.xyzw, v1.xyzw  // output<0,1,2,3>
                mov o0.xyzw, r0.xyzw  // PS_Solid3D<0,1,2,3>
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

    technique11 PickingIntersection
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float       
                // TANGENT                  0   xyz         4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 2
                
                #line 17 "Picking.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                dp4 r0.x, r1.xyzw, cb1[4].xyzw  // outputPosV<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb1[5].xyzw  // outputPosV<1:NaN:Inf>
                dp4 r0.z, r1.xyzw, cb1[6].xyzw  // outputPosV<2:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb1[7].xyzw  // outputPosV<3:NaN:Inf>
                mov o0.xyzw, r0.xyzw  // VS_Picking<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewInvMatrix;           // Offset:  128 Size:    64
                //   float3 gCamPos;                    // Offset:  192 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbPicking
                // {
                //
                //   float2 gPickingRayNormalizedDirXY; // Offset:    0 Size:     8
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPicking                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // m0:POSITION              0   xyz         0     NONE  float   xyz 
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input_siv v[3][0].xyzw, position
                dcl_temps 6
                dcl_inputprimitive triangle 
                dcl_stream m0
                dcl_outputtopology pointlist 
                dcl_output o0.xyz
                dcl_maxout 3
                
                #line 27 "Picking.fx"
                mov r0.x, cb0[0].x  // tanHalfFovX<0>
                mov r0.y, cb0[1].y  // tanHalfFovY<0>
                div r1.x, cb1[0].x, r0.x  // rayDir<0:NaN:Inf>
                div r1.y, cb1[0].y, r0.y  // rayDir<1:NaN:Inf>
                mov r1.z, l(1.000000)  // rayDir<2: 1f>
                
                #line 33
                nop 
                mov r1.xyz, r1.xyzx  // dir<0:NaN:Inf,1:NaN:Inf,2: 1f>
                mov r0.xyz, v[0][0].xyzx  // v0<0,1,2>
                mov r2.xyz, v[1][0].zxyz  // v1<2,0,1>
                mov r3.xyz, v[2][0].yzxy  // v2<1,2,0>
                
                #line 63
                mov r4.xyz, -r0.zxyz
                add r2.xyz, r2.xyzx, r4.xyzx  // edge1<2:Inf,0:Inf,1:Inf>
                mov r4.xyz, -r0.yzxy
                add r3.xyz, r3.xyzx, r4.xyzx  // edge2<1:Inf,2:Inf,0:Inf>
                mul r4.xyz, r1.yzxy, r3.yzxy
                mul r5.xyz, r1.zxyz, r3.xyzx
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx  // qvec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, r2.yzxy, r4.xyzx  // det<0:NaN:Inf>
                
                #line 69
                lt r1.w, r0.w, l(0.001000)
                lt r2.w, l(-0.001000), r0.w
                and r1.w, r1.w, r2.w
                if_nz r1.w
                  mov r2.w, l(0)  // IntersectTriangle<0: false>
                endif 
                if_z r1.w
                  div r0.w, l(1.000000), r0.w  // invdet<0:NaN:Inf>
                
                #line 73
                  mov r0.xyz, -r0.xyzx
                  add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // tvec<0,1,2>
                  dp3 r1.w, r0.xyzx, r4.xyzx  // u<0:NaN:Inf>
                  mul r1.w, r0.w, r1.w  // u<0:NaN:Inf>
                
                #line 79
                  lt r3.w, r1.w, l(0.000000)
                  lt r4.x, l(1.000000), r1.w
                  or r3.w, r3.w, r4.x
                  if_nz r3.w
                    mov r2.w, l(0)  // IntersectTriangle<0: false>
                  endif 
                  if_z r3.w
                    mul r4.xyz, r2.xyzx, r0.yzxy
                    mul r5.xyz, r2.zxyz, r0.zxyz
                    mov r5.xyz, -r5.xyzx
                    add r4.xyz, r4.xyzx, r5.xyzx  // pvec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 83
                    dp3 r3.w, r1.xyzx, r4.xyzx  // v<0:NaN:Inf>
                    mul r3.w, r0.w, r3.w  // v<0:NaN:Inf>
                    lt r4.x, r3.w, l(0.000000)
                    add r1.w, r1.w, r3.w
                    lt r1.w, l(1.000000), r1.w
                    or r1.w, r1.w, r4.x
                    if_nz r1.w
                      mov r2.w, l(0)  // IntersectTriangle<0: false>
                    endif 
                    if_z r1.w
                      mul r4.xyz, r2.zxyz, r3.yzxy
                      mul r2.xyz, r2.xyzx, r3.xyzx
                      mov r2.xyz, -r2.xyzx
                      add r2.xyz, r2.xyzx, r4.xyzx  // nvec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 90
                      dp3 r0.x, r0.xyzx, r2.xyzx  // t<0:NaN:Inf>
                      mul r0.x, r0.w, r0.x  // t<0:NaN:Inf>
                
                #line 87
                      mov r2.w, l(-1)  // IntersectTriangle<0: true>
                    else 
                      mov r0.x, l(0)  // t<0: 0f>
                    endif 
                
                #line 80
                  else 
                    mov r0.x, l(0)  // t<0: 0f>
                  endif 
                
                #line 70
                else 
                  mov r0.x, l(0)  // t<0: 0f>
                endif 
                
                #line 33
                mov r0.x, r0.x  // t<0:NaN:Inf>
                
                #line 36
                if_nz r2.w
                
                #line 42
                  mul r0.xyz, r1.xyzx, r0.xxxx  // intersectPointV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 45
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[8].xyzw  // intersectPointW<0:NaN:Inf>
                  dp4 r1.y, r0.xyzw, cb0[9].xyzw  // intersectPointW<1:NaN:Inf>
                  dp4 r1.z, r0.xyzw, cb0[10].xyzw  // intersectPointW<2:NaN:Inf>
                  mov r1.xyz, r1.xyzx  // outVert<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov o0.xyz, r1.xyzx  // pointStream<0,0,0>
                  emit_stream m0
                
                #line 36
                endif 
                
                #line 20 "Picking.hlsli"
                ret 
                // Approximately 80 instruction slots used
                            
            }
        /* Stream out decl: "POSITION0.xyz" */;
            PixelShader = NULL;
        }

    }

}

