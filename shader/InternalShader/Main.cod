//
// FX Version: fx_5_0
//
// 8 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWorldMatrix;              // Offset:    0, size:   64
    float4x4 gWorldInvTransposeMatrix;  // Offset:   64, size:   64
}

cbuffer cbPerFrame
{
    N_DirectionalLight gDirectionalLight_Dynamic[10];// Offset:    0, size:  640
    N_PointLight gPointLight_Dynamic[10];// Offset:  640, size:  640
    N_SpotLight gSpotLight_Dynamic[10]; // Offset: 1280, size:  800
    int     gDirectionalLightCount_Dynamic;// Offset: 2080, size:    4
    int     gPointLightCount_Dynamic;   // Offset: 2084, size:    4
    int     gSpotLightCount_Dynamic;    // Offset: 2088, size:    4
    int     gIsLightingEnabled_Dynamic; // Offset: 2092, size:    4
}

cbuffer cbPerSubset
{
    N_Material_Basic gMaterial;         // Offset:    0, size:   64
    int     gIsDiffuseMapValid;         // Offset:   64, size:    4
    int     gIsNormalMapValid;          // Offset:   68, size:    4
    int     gIsSpecularMapValid;        // Offset:   72, size:    4
    int     gIsEnvironmentMapVaild;     // Offset:   76, size:    4
}

cbuffer cbRarely
{
    N_DirectionalLight gDirectionalLight_Static[50];// Offset:    0, size: 3200
    N_PointLight gPointLight_Static[50];// Offset: 3200, size: 3200
    N_SpotLight gSpotLight_Static[50];  // Offset: 6400, size: 4000
    int     gDirectionalLightCount_Static;// Offset: 10400, size:    4
    int     gPointLightCount_Static;    // Offset: 10404, size:    4
    int     gSpotLightCount_Static;     // Offset: 10408, size:    4
    int     gIsLightingEnabled_Static;  // Offset: 10412, size:    4
}

cbuffer cbCameraInfo
{
    float4x4 gProjMatrix;               // Offset:    0, size:   64
    float4x4 gViewMatrix;               // Offset:   64, size:   64
    float4x4 gInvProjMatrix;            // Offset:  128, size:   64
    float4x4 gInvViewMatrix;            // Offset:  192, size:   64
    float3  gCamPos;                    // Offset:  256, size:   12
    float   mPad1;                      // Offset:  268, size:    4
}

cbuffer cbAtmosphere
{
    float3  gFogColor3;                 // Offset:    0, size:   12
    int     gFogEnabled;                // Offset:   12, size:    4
    float   gFogNear;                   // Offset:   16, size:    4
    float   gFogFar;                    // Offset:   20, size:    4
    int     gIsSkyDomeValid;            // Offset:   24, size:    4
    int     gIsSkyBoxValid;             // Offset:   28, size:    4
    float   gSkyBoxWidth;               // Offset:   32, size:    4
    float   gSkyBoxHeight;              // Offset:   36, size:    4
    float   gSkyBoxDepth;               // Offset:   40, size:    4
    float   mPad3;                      // Offset:   44, size:    4
}

cbuffer cbDrawText2D
{
    float4  g2D_TextColor;              // Offset:    0, size:   16
    float4  g2D_TextGlowColor;          // Offset:   16, size:   16
}

cbuffer cbPicking
{
    float2  gPickingRayNormalizedDirXY; // Offset:    0, size:    8
    float2  gPadPicking123;             // Offset:    8, size:    8
}

//
// 7 local object(s)
//
SamplerState samplerDefault
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
};
Texture2D gDiffuseMap;
Texture2D gNormalMap;
Texture2D gSpecularMap;
TextureCube gCubeMap;
SamplerState sampler2D_ANISOTROPIC
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(2);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
};
Texture2D g2D_DiffuseMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 7 technique(s)
    //
    technique11 DefaultDraw
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyz         4     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_input v4.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 6
                
                #line 20 "shader3D.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // output<8:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // output<9:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // output<10:NaN:Inf>
                mov r0.x, r1.x  // output<8:NaN:Inf>
                mov r0.y, r1.y  // output<9:NaN:Inf>
                mov r0.z, r1.z  // output<10:NaN:Inf>
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw
                dp4 r2.y, r1.xyzw, cb1[5].xyzw
                dp4 r2.z, r1.xyzw, cb1[6].xyzw
                dp4 r2.w, r1.xyzw, cb1[7].xyzw
                dp4 r1.x, r2.xyzw, cb1[0].xyzw  // output<0:NaN:Inf>
                dp4 r1.y, r2.xyzw, cb1[1].xyzw  // output<1:NaN:Inf>
                dp4 r1.z, r2.xyzw, cb1[2].xyzw  // output<2:NaN:Inf>
                dp4 r1.w, r2.xyzw, cb1[3].xyzw  // output<3:NaN:Inf>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xyz, v2.xyzx
                mov r3.w, l(1.000000)
                dp4 r4.x, r3.xyzw, cb0[4].xyzw  // output<11:NaN:Inf>
                dp4 r4.y, r3.xyzw, cb0[5].xyzw  // output<12:NaN:Inf>
                dp4 r4.z, r3.xyzw, cb0[6].xyzw  // output<13:NaN:Inf>
                mov r3.xyz, v4.xyzx
                mov r3.w, l(0)
                dp4 r5.x, r3.xyzw, cb0[0].xyzw  // output<16:NaN:Inf>
                dp4 r5.y, r3.xyzw, cb0[1].xyzw  // output<17:NaN:Inf>
                dp4 r5.z, r3.xyzw, cb0[2].xyzw  // output<18:NaN:Inf>
                mov r3.xy, v3.xyxx  // output<14,15>
                
                #line 32
                mov o0.xyzw, r1.xyzw  // VS_DefaultDraw<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DefaultDraw<4,5,6,7>
                mov o2.xyz, r0.xyzx  // VS_DefaultDraw<8:NaN:Inf,9:NaN:Inf,10:NaN:Inf>
                mov o3.xyz, r4.xyzx  // VS_DefaultDraw<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                mov o5.xyz, r5.xyzx  // VS_DefaultDraw<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                mov o4.xy, r3.xyxx  // VS_DefaultDraw<14,15>
                ret 
                // Approximately 36 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:  640
                //       float mSpecularIntensity;      // Offset:  652
                //       float3 mDiffuseColor;          // Offset:  656
                //       float mDiffuseIntensity;       // Offset:  668
                //       float3 mSpecularColor;         // Offset:  672
                //       float mAttenuationFactor;      // Offset:  684
                //       float3 mPosition;              // Offset:  688
                //       float mLightingRange;          // Offset:  700
                //
                //   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 1280
                //       float mSpecularIntensity;      // Offset: 1292
                //       float3 mDiffuseColor;          // Offset: 1296
                //       float mDiffuseIntensity;       // Offset: 1308
                //       float3 mSpecularColor;         // Offset: 1312
                //       float mAttenuationFactor;      // Offset: 1324
                //       float3 mLitAt;                 // Offset: 1328
                //       float mLightingAngle;          // Offset: 1340
                //       float3 mPosition;              // Offset: 1344
                //       float mLightingRange;          // Offset: 1356
                //
                //   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
                //   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
                //   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
                //   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
                //   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
                //
                // }
                //
                // cbuffer cbPerSubset
                // {
                //
                //   struct N_Material_Basic
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       int mSpecularSmoothLevel;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mNormalMapBumpIntensity; // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mEnvironmentMapTransparency;// Offset:   44
                //       float mTransparency;           // Offset:   48
                //       int pad1;                      // Offset:   52
                //       int pad2;                      // Offset:   56
                //       int pad3;                      // Offset:   60
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //   int gIsDiffuseMapValid;            // Offset:   64 Size:     4
                //   int gIsNormalMapValid;             // Offset:   68 Size:     4
                //   int gIsSpecularMapValid;           // Offset:   72 Size:     4
                //   int gIsEnvironmentMapVaild;        // Offset:   76 Size:     4
                //
                // }
                //
                // cbuffer cbRarely
                // {
                //
                //   struct N_DirectionalLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset:    0
                //       float mSpecularIntensity;      // Offset:   12
                //       float3 mDiffuseColor;          // Offset:   16
                //       float mDiffuseIntensity;       // Offset:   28
                //       float3 mSpecularColor;         // Offset:   32
                //       float mPad2;                   // Offset:   44
                //       float3 mDirection;             // Offset:   48
                //       float mPad3;                   // Offset:   60
                //
                //   } gDirectionalLight_Static[50];    // Offset:    0 Size:  3200
                //   
                //   struct N_PointLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 3200
                //       float mSpecularIntensity;      // Offset: 3212
                //       float3 mDiffuseColor;          // Offset: 3216
                //       float mDiffuseIntensity;       // Offset: 3228
                //       float3 mSpecularColor;         // Offset: 3232
                //       float mAttenuationFactor;      // Offset: 3244
                //       float3 mPosition;              // Offset: 3248
                //       float mLightingRange;          // Offset: 3260
                //
                //   } gPointLight_Static[50];          // Offset: 3200 Size:  3200
                //   
                //   struct N_SpotLight
                //   {
                //       
                //       float3 mAmbientColor;          // Offset: 6400
                //       float mSpecularIntensity;      // Offset: 6412
                //       float3 mDiffuseColor;          // Offset: 6416
                //       float mDiffuseIntensity;       // Offset: 6428
                //       float3 mSpecularColor;         // Offset: 6432
                //       float mAttenuationFactor;      // Offset: 6444
                //       float3 mLitAt;                 // Offset: 6448
                //       float mLightingAngle;          // Offset: 6460
                //       float3 mPosition;              // Offset: 6464
                //       float mLightingRange;          // Offset: 6476
                //
                //   } gSpotLight_Static[50];           // Offset: 6400 Size:  4000
                //   int gDirectionalLightCount_Static; // Offset: 10400 Size:     4
                //   int gPointLightCount_Static;       // Offset: 10404 Size:     4
                //   int gSpotLightCount_Static;        // Offset: 10408 Size:     4
                //   int gIsLightingEnabled_Static;     // Offset: 10412 Size:     4
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12
                //   int gFogEnabled;                   // Offset:   12 Size:     4
                //   float gFogNear;                    // Offset:   16 Size:     4
                //   float gFogFar;                     // Offset:   20 Size:     4
                //   int gIsSkyDomeValid;               // Offset:   24 Size:     4 [unused]
                //   int gIsSkyBoxValid;                // Offset:   28 Size:     4 [unused]
                //   float gSkyBoxWidth;                // Offset:   32 Size:     4 [unused]
                //   float gSkyBoxHeight;               // Offset:   36 Size:     4 [unused]
                //   float gSkyBoxDepth;                // Offset:   40 Size:     4 [unused]
                //   float mPad3;                       // Offset:   44 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gCubeMap                          texture  float4        cube    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerSubset                       cbuffer      NA          NA    1        1
                // cbRarely                          cbuffer      NA          NA    2        1
                // cbCameraInfo                      cbuffer      NA          NA    3        1
                // cbAtmosphere                      cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[131], dynamicIndexed
                dcl_constantbuffer cb1[5], immediateIndexed
                dcl_constantbuffer cb2[651], dynamicIndexed
                dcl_constantbuffer cb3[17], immediateIndexed
                dcl_constantbuffer cb4[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texturecube (float,float,float,float) t2
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_output o0.xyzw
                dcl_temps 23
                
                #line 38 "shader3D.fx"
                mov r0.xyz, l(0,0,0,0)  // finalColor4<0: 0f,1: 0f,2: 0f>
                
                #line 42
                ine r0.w, l(0, 0, 0, 0), cb0[130].w
                not r1.x, r0.w
                ine r1.y, l(0, 0, 0, 0), cb2[650].w
                not r1.z, r1.y
                and r1.x, r1.z, r1.x
                if_nz r1.x
                  mov o0.xyzw, v1.xyzw  // PS_DefaultDraw<0,1,2,3>
                  ret 
                endif 
                
                #line 48
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xzw, r1.xxxx, v3.xxyz  // input<11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                dp3 r2.x, v5.xyzx, v5.xyzx
                rsq r2.x, r2.x
                mul r2.xyz, r2.xxxx, v5.xyzx  // input<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf>
                
                #line 52
                mov r3.xyz, -v2.xyzx
                add r3.xyz, r3.xyzx, cb3[16].xyzx  // Vec_ToCam<0:Inf,1:Inf,2:Inf>
                mov r4.xyz, r3.xyzx  // Vec_ToCam<0:Inf,1:Inf,2:Inf>
                
                #line 57
                dp3 r2.w, r4.xyzx, r4.xyzx
                sqrt r2.w, r2.w  // Dist_CurrPointToCam<0:NaN:Inf>
                ieq r4.w, cb4[0].w, l(1)
                lt r5.x, cb4[1].y, r2.w
                and r4.w, r4.w, r5.x
                
                #line 68
                mov r5.x, l(0)  // i<0: 0>
                mov r5.yzw, r0.xxyz  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.x, r5.x  // i<0>
                loop 
                  ilt r6.y, r6.x, cb0[130].x
                  breakc_z r6.y
                  nop 
                  imul null, r6.y, r6.x, l(4)
                  mov r7.xyz, cb0[r6.y + 0].xyzx  // Light<0,1,2>
                  mov r8.xyz, cb0[r6.y + 1].xyzx  // Light<4,5,6>
                  mov r9.xyz, cb0[r6.y + 2].xyzx  // Light<8,9,10>
                  mov r10.xyz, cb0[r6.y + 3].xyzx  // Light<12,13,14>
                  mov r6.z, cb0[r6.y + 0].w  // Light<3>
                  mov r6.y, cb0[r6.y + 1].w  // Light<7>
                  mov r11.xyz, r1.xzwx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r4.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                  mov r13.xyz, r2.xyzx  // tangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236 "shader3D_defaultDraw.fx"
                  mov r10.xyz, r10.xyzx  // LightVec<0,1,2>
                  dp3 r6.w, r10.xyzx, r10.xyzx
                  rsq r6.w, r6.w
                  mul r10.xyz, r6.wwww, r10.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 250
                  nop 
                
                #line 88
                  sample_indexable(texture2d)(float,float,float,float) r14.xyz, v4.xyxx, t0.xyzw, s0  // diffSampleColor<0:Inf,1:Inf,2:Inf>
                  ine r6.w, l(0, 0, 0, 0), cb1[4].x
                  if_nz r6.w
                    mov r15.xyz, r14.xyzx  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                  else 
                
                #line 96
                    mov r15.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 89
                  endif 
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r16.xyz, v4.xyxx, t1.xyzw, s0
                  mov r16.xyz, r16.xyzx  // normSampleColor<0:Inf,1:Inf,2:Inf>
                  ine r6.w, l(0, 0, 0, 0), cb1[4].y
                  if_nz r6.w
                
                #line 105
                    mov r16.xyz, r16.xyzx  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mul r16.xyz, r16.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                    add r16.xyz, r16.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mov r6.w, -cb1[1].w
                    add r6.w, r6.w, l(1.000000)
                    max r6.w, r6.w, l(0.000000)
                    min r6.w, r6.w, l(1.000000)
                    mov r17.xyz, -r16.xyzx
                    add r17.xyz, r17.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                    mul r17.xyz, r6.wwww, r17.xyzx
                    add r16.xyz, r16.xyzx, r17.xyzx
                    dp3 r6.w, r16.xyzx, r16.xyzx
                    rsq r6.w, r6.w
                    mul r16.xyz, r6.wwww, r16.xyzx  // outNormalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 102
                  else 
                
                #line 113
                    mov r16.xyz, l(0,1.000000,0,0)  // outNormalTBN<0: 0f,1: 1f,2: 0f>
                
                #line 102
                  endif 
                
                #line 119
                  ine r6.w, l(0, 0, 0, 0), cb1[4].z
                  if_nz r6.w
                    mov r14.xyz, r14.xyzx  // outSpecColor3<0:Inf,1:Inf,2:Inf>
                  else 
                
                #line 126
                    mov r14.xyz, cb1[2].xyzx  // outSpecColor3<0,1,2>
                
                #line 119
                  endif 
                
                #line 250
                  mov r15.xyz, r15.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                  mov r17.xyz, r16.xyzx  // normalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r14.xyz, r14.xyzx  // specularColor3<0:Inf,1:Inf,2:Inf>
                  nop 
                  mov r13.xyz, r13.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r18.xyz, r11.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 201
                  dp3 r6.w, r18.xyzx, r18.xyzx
                  rsq r6.w, r6.w
                  mul r18.xyz, r6.wwww, r18.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r6.w, r18.yzxy, r13.xyzx
                  mul r19.xyz, r18.yzxy, r6.wwww
                  mov r19.xyz, -r19.xyzx
                  add r19.xyz, r13.xyzx, r19.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r19.w, r19.y, l(0.010000)  // TangentW<1:NaN:Inf>
                  dp3 r6.w, r19.xzwx, r19.xzwx
                  rsq r6.w, r6.w
                  mul r19.xyz, r6.wwww, r19.wzxw  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r20.xyz, r18.zxyz, r19.yzxy
                  mul r21.xyz, r18.xyzx, r19.xyzx
                  mov r21.xyz, -r21.xyzx
                  add r20.xyz, r20.xyzx, r21.xyzx
                  dp3 r6.w, r20.xyzx, r20.xyzx
                  rsq r6.w, r6.w
                  mul r20.xyz, r6.wwww, r20.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                  mov r16.w, l(1.000000)
                  mov r21.x, r19.z
                  mov r21.y, r18.y
                  mov r21.z, r20.x
                  mov r21.w, l(0)
                  dp4 r21.x, r16.xyzw, r21.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r22.x, r19.x
                  mov r22.y, r18.z
                  mov r22.z, r20.y
                  mov r22.w, l(0)
                  dp4 r21.y, r16.xyzw, r22.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r20.x, r19.y
                  mov r20.y, r18.x
                  mov r20.w, l(0)
                  dp4 r21.z, r16.xyzw, r20.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 251
                  mov r21.xyz, r21.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r12.xyz, r12.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r21.xyz, r21.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                  mov r12.xyz, -r12.xyzx
                  dp3 r6.w, r12.xyzx, r21.xyzx
                  add r6.w, r6.w, r6.w
                  mov r6.w, -r6.w
                  mul r16.xyz, r6.wwww, r21.xyzx
                  add r12.xyz, r12.xyzx, r16.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r12.xyz, r12.xyzx, t2.xyzw, s0  // sampleColor<0:Inf,1:Inf,2:Inf>
                  max r6.w, cb1[2].w, l(0.000000)
                  min r12.w, r6.w, l(1.000000)  // sampleColor<3:[0f,1f]>
                
                #line 139
                  ine r6.w, l(0, 0, 0, 0), cb1[4].w
                  if_nz r6.w
                
                #line 142
                    mov r12.xyzw, r12.xyzw  // outEnvMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                
                #line 139
                  else 
                
                #line 146
                    mov r12.xyzw, l(0,0,0,0)  // outEnvMapColor4<0: 0f,1: 0f,2: 0f,3: 0f>
                
                #line 139
                  endif 
                
                #line 252
                  mov r12.xyzw, r12.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[-0f,1f]>
                  nop 
                  mov r11.xyz, r11.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 167
                  dp3 r6.w, r11.xyzx, r11.xyzx
                  rsq r6.w, r6.w
                  mul r16.xyz, r6.wwww, r11.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r18.xyz, r16.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r7.w, r18.yzxy, r13.xyzx
                  mul r19.xyz, r18.yzxy, r7.wwww
                  mov r19.xyz, -r19.xyzx
                  add r19.xyz, r13.xyzx, r19.xyzx
                  dp3 r7.w, r19.xyzx, r19.xyzx
                  rsq r7.w, r7.w
                  mul r19.xyz, r7.wwww, r19.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r20.xyz, r19.yzxy  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r21.xyz, r18.zxyz, r20.yzxy
                  mul r18.xyz, r18.xyzx, r20.xyzx
                  mov r18.xyz, -r18.xyzx
                  add r18.xyz, r18.xyzx, r21.xyzx
                  dp3 r7.w, r18.xyzx, r18.xyzx
                  rsq r7.w, r7.w
                  mul r18.xyz, r7.wwww, r18.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mov r3.w, l(1.000000)
                  mov r19.w, l(0)
                  dp4 r19.x, r3.xyzw, r19.xyzw  // outVectorTBN<0:NaN:Inf>
                  mov r16.w, l(0)
                  dp4 r19.y, r3.xyzw, r16.xyzw  // outVectorTBN<1:NaN:Inf>
                  mov r18.w, l(0)
                  dp4 r19.z, r3.xyzw, r18.xyzw  // outVectorTBN<2:NaN:Inf>
                
                #line 253
                  mov r19.xyz, r19.xyzx  // Vec_toCamTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                
                #line 167
                  mul r11.xyz, r6.wwww, r11.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r16.xyz, r11.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r3.w, r16.yzxy, r13.xyzx
                  mul r18.xyz, r16.yzxy, r3.wwww
                  mov r18.xyz, -r18.xyzx
                  add r13.xyz, r13.xyzx, r18.xyzx
                  dp3 r3.w, r13.xyzx, r13.xyzx
                  rsq r3.w, r3.w
                  mul r13.xyz, r3.wwww, r13.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r18.xyz, r13.yzxy  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r20.xyz, r16.zxyz, r18.yzxy
                  mul r16.xyz, r16.xyzx, r18.xyzx
                  mov r16.xyz, -r16.xyzx
                  add r16.xyz, r16.xyzx, r20.xyzx
                  dp3 r3.w, r16.xyzx, r16.xyzx
                  rsq r3.w, r3.w
                  mul r16.xyz, r3.wwww, r16.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mov r10.w, l(1.000000)
                  mov r13.w, l(0)
                  dp4 r13.x, r10.xyzw, r13.xyzw  // outVectorTBN<0:NaN:Inf>
                  mov r11.w, l(0)
                  dp4 r13.y, r10.xyzw, r11.xyzw  // outVectorTBN<1:NaN:Inf>
                  mov r16.w, l(0)
                  dp4 r13.z, r10.xyzw, r16.xyzw  // outVectorTBN<2:NaN:Inf>
                
                #line 254
                  mov r13.xyz, r13.xyzx  // lightVecTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, -r13.xyzx
                  dp3 r3.w, r10.xyzx, r17.xyzx
                  mul r3.w, r3.w, r6.y  // diffuseCosFactor<0:NaN:Inf>
                
                #line 262
                  nop 
                  mov r3.w, r3.w  // diffuseCosFactor<0:NaN:Inf>
                  mov r6.z, r6.z  // lightSpecIntensity<0>
                  itof r6.y, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                  mov r10.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                  mov r7.xyz, r7.xyzx  // lightAmbientColor3<0,1,2>
                  mov r15.xyz, r15.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r14.xyz, r14.xyzx  // matSpecColor3<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // lightSpecColor3<0,1,2>
                  mov r19.xyz, r19.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r13.xyz, r13.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r17.xyz, r17.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 51
                  mul r7.xyz, r7.xyzx, r10.xyzx
                  mul r7.xyz, r15.xyzx, r7.xyzx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                  lt r6.w, l(0.000000), r3.w
                
                #line 59
                  mul r3.w, r3.w, l(1.000000)
                  mul r8.xyz, r8.xyzx, r15.xyzx
                  mul r8.xyz, r3.wwww, r8.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 62
                  dp3 r3.w, r17.xyzx, r17.xyzx
                  rsq r3.w, r3.w
                  mul r10.xyz, r3.wwww, r17.xyzx
                  dp3 r3.w, r13.xyzx, r10.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r10.xyz, r3.wwww, r10.xyzx
                  add r10.xyz, r13.xyzx, r10.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 65
                  dp3 r3.w, r19.xyzx, r19.xyzx
                  rsq r3.w, r3.w
                  mul r11.xyz, r3.wwww, r19.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  dp3 r3.w, r10.xyzx, r11.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r6.y
                  exp r3.w, r3.w
                  mul r3.w, r3.w, r6.z  // SpecFactor<0:NaN:Inf>
                
                #line 71
                  mul r3.w, r3.w, l(1.000000)
                  mul r9.xyz, r9.xyzx, r14.xyzx
                  mul r9.xyz, r3.wwww, r9.xyzx  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                  movc r8.xyz, r6.wwww, r8.xyzx, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r6.yzw, r6.wwww, r9.xxyz, l(0,0,0,0)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 262
                  mov r7.xyz, r7.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.xyz, r8.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.yzw, r6.yyzw  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 270
                  add r7.xyz, r7.xyzx, r8.xyzx
                  mov r8.xyz, -r7.xyzx
                  add r8.xyz, r8.xyzx, r12.xyzx
                  mul r8.xyz, r8.xyzx, r12.wwww
                  add r7.xyz, r7.xyzx, r8.xyzx
                  add r6.yzw, r6.yyzw, r7.xxyz  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 70 "shader3D.fx"
                  mov r6.yzw, r6.yyzw  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.yzw, r5.yyzw, r6.yyzw  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  iadd r6.x, r6.x, l(1)  // i<0>
                endloop 
                
                #line 73
                mov r0.xyz, r5.yzwy  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.x, r5.x  // i<0>
                loop 
                  ilt r3.y, r3.x, cb0[130].y
                  breakc_z r3.y
                  nop 
                  imul null, r3.y, r3.x, l(4)
                  mov r6.xyz, cb0[r3.y + 40].xyzx  // Light<0,1,2>
                  mov r7.xyz, cb0[r3.y + 41].xyzx  // Light<4,5,6>
                  mov r8.xyz, cb0[r3.y + 42].xyzx  // Light<8,9,10>
                  mov r9.xyz, cb0[r3.y + 43].xyzx  // Light<12,13,14>
                  mov r3.z, cb0[r3.y + 40].w  // Light<3>
                  mov r3.w, cb0[r3.y + 41].w  // Light<7>
                  mov r6.w, cb0[r3.y + 42].w  // Light<11>
                  mov r3.y, cb0[r3.y + 43].w  // Light<15>
                  mov r10.xyz, r1.xzwx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r4.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                  mov r12.xyz, v2.xyzx  // thisPoint<0,1,2>
                  mov r13.xyz, r2.xyzx  // tangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 287 "shader3D_defaultDraw.fx"
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r12.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                  dp3 r7.w, r9.xyzx, r9.xyzx
                  rsq r8.w, r7.w
                  mul r9.xyz, r8.wwww, r9.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r9.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291
                  sqrt r7.w, r7.w  // disFromLight<0:NaN:Inf>
                  mul r6.w, r6.w, r7.w
                  mul r6.w, r7.w, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, l(1.000000), r6.w  // Attenuation<0:NaN:Inf>
                
                #line 296
                  lt r3.y, r3.y, r7.w
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r14.xyz, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,1:Inf,2:Inf>
                  ine r7.w, l(0, 0, 0, 0), cb1[4].y
                  if_nz r7.w
                
                #line 105
                    mov r14.xyz, r14.xyzx  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mul r14.xyz, r14.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                    add r14.xyz, r14.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mov r7.w, -cb1[1].w
                    add r7.w, r7.w, l(1.000000)
                    max r7.w, r7.w, l(0.000000)
                    min r7.w, r7.w, l(1.000000)
                    mov r15.xyz, -r14.xyzx
                    add r15.xyz, r15.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                    mul r15.xyz, r7.wwww, r15.xyzx
                    add r14.xyz, r14.xyzx, r15.xyzx
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r14.xyz, r7.wwww, r14.xyzx  // outNormalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 102
                  else 
                
                #line 113
                    mov r14.xyz, l(0,1.000000,0,0)  // outNormalTBN<0: 0f,1: 1f,2: 0f>
                
                #line 102
                  endif 
                
                #line 313
                  mov r13.xyz, r13.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r10.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 201
                  dp3 r7.w, r15.xyzx, r15.xyzx
                  rsq r7.w, r7.w
                  mul r15.xyz, r7.wwww, r15.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r7.w, r15.yzxy, r13.xyzx
                  mul r16.xyz, r15.yzxy, r7.wwww
                  mov r16.xyz, -r16.xyzx
                  add r16.xyz, r13.xyzx, r16.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r16.w, r16.y, l(0.010000)  // TangentW<1:NaN:Inf>
                  dp3 r7.w, r16.xzwx, r16.xzwx
                  rsq r7.w, r7.w
                  mul r16.xyz, r7.wwww, r16.wzxw  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r17.xyz, r15.zxyz, r16.yzxy
                  mul r18.xyz, r15.xyzx, r16.xyzx
                  mov r18.xyz, -r18.xyzx
                  add r17.xyz, r17.xyzx, r18.xyzx
                  dp3 r7.w, r17.xyzx, r17.xyzx
                  rsq r7.w, r7.w
                  mul r17.xyz, r7.wwww, r17.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                  mov r14.w, l(1.000000)
                  mov r18.x, r16.z
                  mov r18.y, r15.y
                  mov r18.z, r17.x
                  mov r18.w, l(0)
                  dp4 r18.x, r14.xyzw, r18.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r19.x, r16.x
                  mov r19.y, r15.z
                  mov r19.z, r17.y
                  mov r19.w, l(0)
                  dp4 r18.y, r14.xyzw, r19.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r17.x, r16.y
                  mov r17.y, r15.x
                  mov r17.w, l(0)
                  dp4 r18.z, r14.xyzw, r17.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 313
                  mov r18.xyz, r18.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r11.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r18.xyz, r18.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                  mov r11.xyz, -r11.xyzx
                  dp3 r7.w, r11.xyzx, r18.xyzx
                  add r7.w, r7.w, r7.w
                  mov r7.w, -r7.w
                  mul r15.xyz, r7.wwww, r18.xyzx
                  add r11.xyz, r11.xyzx, r15.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t2.xyzw, s0  // sampleColor<0:Inf,1:Inf,2:Inf>
                
                #line 304
                  if_z r3.y
                
                #line 312
                    nop 
                
                #line 88
                    sample_indexable(texture2d)(float,float,float,float) r15.xyz, v4.xyxx, t0.xyzw, s0  // diffSampleColor<0:Inf,1:Inf,2:Inf>
                    ine r3.y, l(0, 0, 0, 0), cb1[4].x
                    if_nz r3.y
                      mov r16.xyz, r15.xyzx  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                    else 
                
                #line 96
                      mov r16.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 89
                    endif 
                
                #line 119
                    ine r3.y, l(0, 0, 0, 0), cb1[4].z
                    if_nz r3.y
                      mov r15.xyz, r15.xyzx  // outSpecColor3<0:Inf,1:Inf,2:Inf>
                    else 
                
                #line 126
                      mov r15.xyz, cb1[2].xyzx  // outSpecColor3<0,1,2>
                
                #line 119
                    endif 
                
                #line 312
                    mov r16.xyz, r16.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r14.xyz, r14.xyzx  // normalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r15.xyz, r15.xyzx  // specularColor3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                
                #line 136
                    max r3.y, cb1[2].w, l(0.000000)
                    min r11.w, r3.y, l(1.000000)  // sampleColor<3:[0f,1f]>
                
                #line 139
                    ine r3.y, l(0, 0, 0, 0), cb1[4].w
                    if_nz r3.y
                
                #line 142
                      mov r11.xyzw, r11.xyzw  // outEnvMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                
                #line 139
                    else 
                
                #line 146
                      mov r11.xyzw, l(0,0,0,0)  // outEnvMapColor4<0: 0f,1: 0f,2: 0f,3: 0f>
                
                #line 139
                    endif 
                
                #line 314
                    mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[-0f,1f]>
                    nop 
                    mov r17.xyz, r10.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 167
                    dp3 r3.y, r17.xyzx, r17.xyzx
                    rsq r3.y, r3.y
                    mul r18.xyz, r3.yyyy, r17.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r19.xyz, r18.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r7.w, r19.yzxy, r13.xyzx
                    mul r20.xyz, r19.yzxy, r7.wwww
                    mov r20.xyz, -r20.xyzx
                    add r20.xyz, r13.xyzx, r20.xyzx
                    dp3 r7.w, r20.xyzx, r20.xyzx
                    rsq r7.w, r7.w
                    mul r20.xyz, r7.wwww, r20.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r21.xyz, r20.yzxy  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r22.xyz, r19.zxyz, r21.yzxy
                    mul r19.xyz, r19.xyzx, r21.xyzx
                    mov r19.xyz, -r19.xyzx
                    add r19.xyz, r19.xyzx, r22.xyzx
                    dp3 r7.w, r19.xyzx, r19.xyzx
                    rsq r7.w, r7.w
                    mul r19.xyz, r7.wwww, r19.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                    mov r21.xyz, r4.xyzx
                    mov r21.w, l(1.000000)
                    mov r20.w, l(0)
                    dp4 r20.x, r21.xyzw, r20.xyzw  // outVectorTBN<0:NaN:Inf>
                    mov r18.w, l(0)
                    dp4 r20.y, r21.xyzw, r18.xyzw  // outVectorTBN<1:NaN:Inf>
                    mov r19.w, l(0)
                    dp4 r20.z, r21.xyzw, r19.xyzw  // outVectorTBN<2:NaN:Inf>
                
                #line 315
                    mov r20.xyz, r20.xyzx  // Vec_toCamTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                
                #line 167
                    mul r17.xyz, r3.yyyy, r17.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r18.xyz, r17.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r3.y, r18.yzxy, r13.xyzx
                    mul r19.xyz, r18.yzxy, r3.yyyy
                    mov r19.xyz, -r19.xyzx
                    add r13.xyz, r13.xyzx, r19.xyzx
                    dp3 r3.y, r13.xyzx, r13.xyzx
                    rsq r3.y, r3.y
                    mul r13.xyz, r3.yyyy, r13.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r19.xyz, r13.yzxy  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r21.xyz, r18.zxyz, r19.yzxy
                    mul r18.xyz, r18.xyzx, r19.xyzx
                    mov r18.xyz, -r18.xyzx
                    add r18.xyz, r18.xyzx, r21.xyzx
                    dp3 r3.y, r18.xyzx, r18.xyzx
                    rsq r3.y, r3.y
                    mul r18.xyz, r3.yyyy, r18.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                    mov r9.w, l(1.000000)
                    mov r13.w, l(0)
                    dp4 r13.x, r9.xyzw, r13.xyzw  // outVectorTBN<0:NaN:Inf>
                    mov r17.w, l(0)
                    dp4 r13.y, r9.xyzw, r17.xyzw  // outVectorTBN<1:NaN:Inf>
                    mov r18.w, l(0)
                    dp4 r13.z, r9.xyzw, r18.xyzw  // outVectorTBN<2:NaN:Inf>
                
                #line 316
                    mov r13.xyz, r13.xyzx  // lightVecTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 319
                    mov r9.xyz, -r12.xyzx
                    dp3 r3.y, r9.xyzx, r10.xyzx
                    mul r3.y, r3.y, r3.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 325
                    nop 
                    mov r3.y, r3.y  // diffuseCosFactor<0:NaN:Inf>
                    mov r3.z, r3.z  // lightSpecIntensity<0>
                    itof r3.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                    mov r6.w, r6.w  // Attenuation<0:NaN:Inf>
                    mov r9.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r16.xyz, r16.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r15.xyz, r15.xyzx  // matSpecColor3<0:Inf,1:Inf,2:Inf>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r20.xyz, r20.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r13.xyz, r13.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r14.xyz, r14.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 51
                    mul r6.xyz, r6.xyzx, r9.xyzx
                    mul r6.xyz, r16.xyzx, r6.xyzx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                    lt r7.w, l(0.000000), r3.y
                
                #line 59
                    mul r3.y, r3.y, r6.w
                    mul r7.xyz, r7.xyzx, r16.xyzx
                    mul r7.xyz, r3.yyyy, r7.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 62
                    dp3 r3.y, r14.xyzx, r14.xyzx
                    rsq r3.y, r3.y
                    mul r9.xyz, r3.yyyy, r14.xyzx
                    dp3 r3.y, r13.xyzx, r9.xyzx
                    add r3.y, r3.y, r3.y
                    mov r3.y, -r3.y
                    mul r9.xyz, r3.yyyy, r9.xyzx
                    add r9.xyz, r13.xyzx, r9.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 65
                    dp3 r3.y, r20.xyzx, r20.xyzx
                    rsq r3.y, r3.y
                    mul r10.xyz, r3.yyyy, r20.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    dp3 r3.y, r9.xyzx, r10.xyzx
                    max r3.y, r3.y, l(0.000000)
                    log r3.y, r3.y
                    mul r3.y, r3.y, r3.w
                    exp r3.y, r3.y
                    mul r3.y, r3.y, r3.z  // SpecFactor<0:NaN:Inf>
                
                #line 71
                    mul r3.y, r3.y, r6.w
                    mul r8.xyz, r8.xyzx, r15.xyzx
                    mul r3.yzw, r3.yyyy, r8.xxyz  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                    movc r7.xyz, r7.wwww, r7.xyzx, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    movc r3.yzw, r7.wwww, r3.yyzw, l(0,0,0,0)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 325
                    mov r6.xyz, r6.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r3.yzw, r3.yyzw  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 333
                    add r6.xyz, r6.xyzx, r7.xyzx
                    mov r7.xyz, -r6.xyzx
                    add r7.xyz, r7.xyzx, r11.xyzx
                    mul r7.xyz, r7.xyzx, r11.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r3.yzw, r3.yyzw, r6.xxyz  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 304
                  else 
                    mov r3.yzw, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 75 "shader3D.fx"
                  mov r3.yzw, r3.yyzw  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r0.xyz, r0.xyzx, r3.yzwy  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 73
                  iadd r3.x, r3.x, l(1)  // i<0>
                endloop 
                
                #line 78
                mov r3.xyz, r0.xyzx  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.w, r5.x  // i<0>
                loop 
                  ilt r5.y, r3.w, cb0[130].z
                  breakc_z r5.y
                
                #line 81
                  nop 
                  imul null, r5.y, r3.w, l(5)
                  mov r6.xyz, cb0[r5.y + 80].xyzx  // Light<0,1,2>
                  mov r7.xyz, cb0[r5.y + 81].xyzx  // Light<4,5,6>
                  mov r8.xyz, cb0[r5.y + 82].xyzx  // Light<8,9,10>
                  mov r9.xyz, cb0[r5.y + 83].xyzx  // Light<12,13,14>
                  mov r10.xyz, cb0[r5.y + 84].xyzx  // Light<16,17,18>
                  mov r5.z, cb0[r5.y + 80].w  // Light<3>
                  mov r5.w, cb0[r5.y + 81].w  // Light<7>
                  mov r6.w, cb0[r5.y + 82].w  // Light<11>
                  mov r7.w, cb0[r5.y + 83].w  // Light<15>
                  mov r5.y, cb0[r5.y + 84].w  // Light<19>
                  mov r11.xyz, r1.xzwx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r4.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                  mov r13.xyz, v2.xyzx  // thisPoint<0,1,2>
                  mov r14.xyz, r2.xyzx  // tangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 349 "shader3D_defaultDraw.fx"
                  mov r10.xyz, -r10.xyzx
                  add r13.xyz, r10.xyzx, r13.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                  dp3 r8.w, r13.xyzx, r13.xyzx
                  rsq r9.w, r8.w
                  mul r13.xyz, r9.wwww, r13.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 353
                  sqrt r8.w, r8.w  // disFromLight<0:NaN:Inf>
                  mul r6.w, r6.w, r8.w
                  mul r6.w, r8.w, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, l(1.000000), r6.w  // Attenuation<0:NaN:Inf>
                
                #line 358
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r9.w, r9.xyzx, r9.xyzx
                  rsq r9.w, r9.w
                  mul r9.xyz, r9.wwww, r9.xyzx
                  dp3 r9.x, r13.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                
                #line 361
                  lt r5.y, r5.y, r8.w
                  div r7.w, r7.w, l(2.000000)
                  sincos null, r7.w, r7.w
                  lt r7.w, r9.x, r7.w
                  or r5.y, r5.y, r7.w
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r9.xyz, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,1:Inf,2:Inf>
                  ine r7.w, l(0, 0, 0, 0), cb1[4].y
                  if_nz r7.w
                
                #line 105
                    mov r9.xyz, r9.xyzx  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mul r9.xyz, r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                    add r9.xyz, r9.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mov r7.w, -cb1[1].w
                    add r7.w, r7.w, l(1.000000)
                    max r7.w, r7.w, l(0.000000)
                    min r7.w, r7.w, l(1.000000)
                    mov r10.xyz, -r9.xyzx
                    add r10.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                    mul r10.xyz, r7.wwww, r10.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx
                    dp3 r7.w, r9.xyzx, r9.xyzx
                    rsq r7.w, r7.w
                    mul r9.xyz, r7.wwww, r9.xyzx  // outNormalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 102
                  else 
                
                #line 113
                    mov r9.xyz, l(0,1.000000,0,0)  // outNormalTBN<0: 0f,1: 1f,2: 0f>
                
                #line 102
                  endif 
                
                #line 380
                  mov r14.xyz, r14.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r11.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 201
                  dp3 r7.w, r10.xyzx, r10.xyzx
                  rsq r7.w, r7.w
                  mul r10.xyz, r7.wwww, r10.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r7.w, r10.yzxy, r14.xyzx
                  mul r15.xyz, r10.yzxy, r7.wwww
                  mov r15.xyz, -r15.xyzx
                  add r15.xyz, r14.xyzx, r15.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r15.w, r15.y, l(0.010000)  // TangentW<1:NaN:Inf>
                  dp3 r7.w, r15.xzwx, r15.xzwx
                  rsq r7.w, r7.w
                  mul r15.xyz, r7.wwww, r15.wzxw  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r16.xyz, r10.zxyz, r15.yzxy
                  mul r17.xyz, r10.xyzx, r15.xyzx
                  mov r17.xyz, -r17.xyzx
                  add r16.xyz, r16.xyzx, r17.xyzx
                  dp3 r7.w, r16.xyzx, r16.xyzx
                  rsq r7.w, r7.w
                  mul r16.xyz, r7.wwww, r16.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                  mov r9.w, l(1.000000)
                  mov r17.x, r15.z
                  mov r17.y, r10.y
                  mov r17.z, r16.x
                  mov r17.w, l(0)
                  dp4 r17.x, r9.xyzw, r17.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r18.x, r15.x
                  mov r18.y, r10.z
                  mov r18.z, r16.y
                  mov r18.w, l(0)
                  dp4 r17.y, r9.xyzw, r18.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r16.x, r15.y
                  mov r16.y, r10.x
                  mov r16.w, l(0)
                  dp4 r17.z, r9.xyzw, r16.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 380
                  mov r17.xyz, r17.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r12.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r17.xyz, r17.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                  mov r10.xyz, -r12.xyzx
                  dp3 r7.w, r10.xyzx, r17.xyzx
                  add r7.w, r7.w, r7.w
                  mov r7.w, -r7.w
                  mul r12.xyz, r7.wwww, r17.xyzx
                  add r10.xyz, r10.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t2.xyzw, s0  // sampleColor<0:Inf,1:Inf,2:Inf>
                
                #line 371
                  if_z r5.y
                
                #line 379
                    nop 
                
                #line 88
                    sample_indexable(texture2d)(float,float,float,float) r12.xyz, v4.xyxx, t0.xyzw, s0  // diffSampleColor<0:Inf,1:Inf,2:Inf>
                    ine r5.y, l(0, 0, 0, 0), cb1[4].x
                    if_nz r5.y
                      mov r15.xyz, r12.xyzx  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                    else 
                
                #line 96
                      mov r15.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 89
                    endif 
                
                #line 119
                    ine r5.y, l(0, 0, 0, 0), cb1[4].z
                    if_nz r5.y
                      mov r12.xyz, r12.xyzx  // outSpecColor3<0:Inf,1:Inf,2:Inf>
                    else 
                
                #line 126
                      mov r12.xyz, cb1[2].xyzx  // outSpecColor3<0,1,2>
                
                #line 119
                    endif 
                
                #line 379
                    mov r15.xyz, r15.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r9.xyz, r9.xyzx  // normalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r12.xyz, r12.xyzx  // specularColor3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                
                #line 136
                    max r5.y, cb1[2].w, l(0.000000)
                    min r10.w, r5.y, l(1.000000)  // sampleColor<3:[0f,1f]>
                
                #line 139
                    ine r5.y, l(0, 0, 0, 0), cb1[4].w
                    if_nz r5.y
                
                #line 142
                      mov r10.xyzw, r10.xyzw  // outEnvMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                
                #line 139
                    else 
                
                #line 146
                      mov r10.xyzw, l(0,0,0,0)  // outEnvMapColor4<0: 0f,1: 0f,2: 0f,3: 0f>
                
                #line 139
                    endif 
                
                #line 381
                    mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[-0f,1f]>
                    nop 
                    mov r16.xyz, r11.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 167
                    dp3 r5.y, r16.xyzx, r16.xyzx
                    rsq r5.y, r5.y
                    mul r16.xyz, r5.yyyy, r16.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r17.xyz, r16.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r5.y, r17.yzxy, r14.xyzx
                    mul r18.xyz, r17.yzxy, r5.yyyy
                    mov r18.xyz, -r18.xyzx
                    add r14.xyz, r14.xyzx, r18.xyzx
                    dp3 r5.y, r14.xyzx, r14.xyzx
                    rsq r5.y, r5.y
                    mul r14.xyz, r5.yyyy, r14.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r18.xyz, r14.yzxy  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r19.xyz, r17.zxyz, r18.yzxy
                    mul r17.xyz, r17.xyzx, r18.xyzx
                    mov r17.xyz, -r17.xyzx
                    add r17.xyz, r17.xyzx, r19.xyzx
                    dp3 r5.y, r17.xyzx, r17.xyzx
                    rsq r5.y, r5.y
                    mul r17.xyz, r5.yyyy, r17.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                    mov r18.xyz, r4.xyzx
                    mov r18.w, l(1.000000)
                    mov r14.w, l(0)
                    dp4 r14.x, r18.xyzw, r14.xyzw  // outVectorTBN<0:NaN:Inf>
                    mov r16.w, l(0)
                    dp4 r14.y, r18.xyzw, r16.xyzw  // outVectorTBN<1:NaN:Inf>
                    mov r17.w, l(0)
                    dp4 r14.z, r18.xyzw, r17.xyzw  // outVectorTBN<2:NaN:Inf>
                
                #line 382
                    mov r14.xyz, r14.xyzx  // Vec_toCamTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                
                #line 386
                    mov r16.xyz, -r13.xyzx
                    dp3 r5.y, r16.xyzx, r11.xyzx
                    mul r5.y, r5.y, r5.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 389
                    nop 
                    mov r5.y, r5.y  // diffuseCosFactor<0:NaN:Inf>
                    mov r5.z, r5.z  // lightSpecIntensity<0>
                    itof r5.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                    mov r6.w, r6.w  // Attenuation<0:NaN:Inf>
                    mov r11.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r15.xyz, r15.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r12.xyz, r12.xyzx  // matSpecColor3<0:Inf,1:Inf,2:Inf>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r14.xyz, r14.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r13.xyz, r13.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 51
                    mul r6.xyz, r6.xyzx, r11.xyzx
                    mul r6.xyz, r15.xyzx, r6.xyzx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                    lt r7.w, l(0.000000), r5.y
                
                #line 59
                    mul r5.y, r5.y, r6.w
                    mul r7.xyz, r7.xyzx, r15.xyzx
                    mul r7.xyz, r5.yyyy, r7.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 62
                    dp3 r5.y, r9.xyzx, r9.xyzx
                    rsq r5.y, r5.y
                    mul r9.xyz, r5.yyyy, r9.xyzx
                    dp3 r5.y, r13.xyzx, r9.xyzx
                    add r5.y, r5.y, r5.y
                    mov r5.y, -r5.y
                    mul r9.xyz, r5.yyyy, r9.xyzx
                    add r9.xyz, r13.xyzx, r9.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 65
                    dp3 r5.y, r14.xyzx, r14.xyzx
                    rsq r5.y, r5.y
                    mul r11.xyz, r5.yyyy, r14.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    dp3 r5.y, r9.xyzx, r11.xyzx
                    max r5.y, r5.y, l(0.000000)
                    log r5.y, r5.y
                    mul r5.y, r5.y, r5.w
                    exp r5.y, r5.y
                    mul r5.y, r5.y, r5.z  // SpecFactor<0:NaN:Inf>
                
                #line 71
                    mul r5.y, r5.y, r6.w
                    mul r8.xyz, r8.xyzx, r12.xyzx
                    mul r5.yzw, r5.yyyy, r8.xxyz  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                    movc r7.xyz, r7.wwww, r7.xyzx, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    movc r5.yzw, r7.wwww, r5.yyzw, l(0,0,0,0)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 389
                    mov r6.xyz, r6.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.yzw, r5.yyzw  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 397
                    add r6.xyz, r6.xyzx, r7.xyzx
                    mov r7.xyz, -r6.xyzx
                    add r7.xyz, r7.xyzx, r10.xyzx
                    mul r7.xyz, r7.xyzx, r10.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r5.yzw, r5.yyzw, r6.xxyz  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 371
                  else 
                    mov r5.yzw, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 81 "shader3D.fx"
                  mov r5.yzw, r5.yyzw  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r3.xyz, r3.xyzx, r5.yzwy  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 78
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 66
                if_z r0.w
                  mov r3.xyz, l(0,0,0,0)  // finalColor4<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 89
                mov r0.xyz, r3.xyzx  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r5.x  // i<0>
                loop 
                  ilt r3.w, r0.w, cb2[650].x
                  breakc_z r3.w
                  nop 
                  imul null, r3.w, r0.w, l(4)
                  mov r5.yzw, cb2[r3.w + 0].xxyz  // Light<0,1,2>
                  mov r6.xyz, cb2[r3.w + 1].xyzx  // Light<4,5,6>
                  mov r7.xyz, cb2[r3.w + 2].xyzx  // Light<8,9,10>
                  mov r8.xyz, cb2[r3.w + 3].xyzx  // Light<12,13,14>
                  mov r6.w, cb2[r3.w + 0].w  // Light<3>
                  mov r3.w, cb2[r3.w + 1].w  // Light<7>
                  mov r9.xyz, r1.xzwx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r4.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                  mov r11.xyz, r2.xyzx  // tangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236 "shader3D_defaultDraw.fx"
                  mov r8.xyz, r8.xyzx  // LightVec<0,1,2>
                  dp3 r7.w, r8.xyzx, r8.xyzx
                  rsq r7.w, r7.w
                  mul r8.xyz, r7.wwww, r8.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 250
                  nop 
                
                #line 88
                  sample_indexable(texture2d)(float,float,float,float) r12.xyz, v4.xyxx, t0.xyzw, s0  // diffSampleColor<0:Inf,1:Inf,2:Inf>
                  ine r7.w, l(0, 0, 0, 0), cb1[4].x
                  if_nz r7.w
                    mov r13.xyz, r12.xyzx  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                  else 
                
                #line 96
                    mov r13.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 89
                  endif 
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r14.xyz, v4.xyxx, t1.xyzw, s0
                  mov r14.xyz, r14.xyzx  // normSampleColor<0:Inf,1:Inf,2:Inf>
                  ine r7.w, l(0, 0, 0, 0), cb1[4].y
                  if_nz r7.w
                
                #line 105
                    mov r14.xyz, r14.xyzx  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mul r14.xyz, r14.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                    add r14.xyz, r14.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mov r7.w, -cb1[1].w
                    add r7.w, r7.w, l(1.000000)
                    max r7.w, r7.w, l(0.000000)
                    min r7.w, r7.w, l(1.000000)
                    mov r15.xyz, -r14.xyzx
                    add r15.xyz, r15.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                    mul r15.xyz, r7.wwww, r15.xyzx
                    add r14.xyz, r14.xyzx, r15.xyzx
                    dp3 r7.w, r14.xyzx, r14.xyzx
                    rsq r7.w, r7.w
                    mul r14.xyz, r7.wwww, r14.xyzx  // outNormalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 102
                  else 
                
                #line 113
                    mov r14.xyz, l(0,1.000000,0,0)  // outNormalTBN<0: 0f,1: 1f,2: 0f>
                
                #line 102
                  endif 
                
                #line 119
                  ine r7.w, l(0, 0, 0, 0), cb1[4].z
                  if_nz r7.w
                    mov r12.xyz, r12.xyzx  // outSpecColor3<0:Inf,1:Inf,2:Inf>
                  else 
                
                #line 126
                    mov r12.xyz, cb1[2].xyzx  // outSpecColor3<0,1,2>
                
                #line 119
                  endif 
                
                #line 250
                  mov r13.xyz, r13.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                  mov r15.xyz, r14.xyzx  // normalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r12.xyzx  // specularColor3<0:Inf,1:Inf,2:Inf>
                  nop 
                  mov r11.xyz, r11.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r16.xyz, r9.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 201
                  dp3 r7.w, r16.xyzx, r16.xyzx
                  rsq r7.w, r7.w
                  mul r16.xyz, r7.wwww, r16.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r7.w, r16.yzxy, r11.xyzx
                  mul r17.xyz, r16.yzxy, r7.wwww
                  mov r17.xyz, -r17.xyzx
                  add r17.xyz, r11.xyzx, r17.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r17.w, r17.y, l(0.010000)  // TangentW<1:NaN:Inf>
                  dp3 r7.w, r17.xzwx, r17.xzwx
                  rsq r7.w, r7.w
                  mul r17.xyz, r7.wwww, r17.wzxw  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r18.xyz, r16.zxyz, r17.yzxy
                  mul r19.xyz, r16.xyzx, r17.xyzx
                  mov r19.xyz, -r19.xyzx
                  add r18.xyz, r18.xyzx, r19.xyzx
                  dp3 r7.w, r18.xyzx, r18.xyzx
                  rsq r7.w, r7.w
                  mul r18.xyz, r7.wwww, r18.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                  mov r14.w, l(1.000000)
                  mov r19.x, r17.z
                  mov r19.y, r16.y
                  mov r19.z, r18.x
                  mov r19.w, l(0)
                  dp4 r19.x, r14.xyzw, r19.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r20.x, r17.x
                  mov r20.y, r16.z
                  mov r20.z, r18.y
                  mov r20.w, l(0)
                  dp4 r19.y, r14.xyzw, r20.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r18.x, r17.y
                  mov r18.y, r16.x
                  mov r18.w, l(0)
                  dp4 r19.z, r14.xyzw, r18.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 251
                  mov r19.xyz, r19.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r10.xyz, r10.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r19.xyz, r19.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                  mov r10.xyz, -r10.xyzx
                  dp3 r7.w, r10.xyzx, r19.xyzx
                  add r7.w, r7.w, r7.w
                  mov r7.w, -r7.w
                  mul r14.xyz, r7.wwww, r19.xyzx
                  add r10.xyz, r10.xyzx, r14.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t2.xyzw, s0  // sampleColor<0:Inf,1:Inf,2:Inf>
                  max r7.w, cb1[2].w, l(0.000000)
                  min r10.w, r7.w, l(1.000000)  // sampleColor<3:[0f,1f]>
                
                #line 139
                  ine r7.w, l(0, 0, 0, 0), cb1[4].w
                  if_nz r7.w
                
                #line 142
                    mov r10.xyzw, r10.xyzw  // outEnvMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                
                #line 139
                  else 
                
                #line 146
                    mov r10.xyzw, l(0,0,0,0)  // outEnvMapColor4<0: 0f,1: 0f,2: 0f,3: 0f>
                
                #line 139
                  endif 
                
                #line 252
                  mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[-0f,1f]>
                  nop 
                  mov r9.xyz, r9.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 167
                  dp3 r7.w, r9.xyzx, r9.xyzx
                  rsq r7.w, r7.w
                  mul r14.xyz, r7.wwww, r9.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r16.xyz, r14.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r9.w, r16.yzxy, r11.xyzx
                  mul r17.xyz, r16.yzxy, r9.wwww
                  mov r17.xyz, -r17.xyzx
                  add r17.xyz, r11.xyzx, r17.xyzx
                  dp3 r9.w, r17.xyzx, r17.xyzx
                  rsq r9.w, r9.w
                  mul r17.xyz, r9.wwww, r17.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r18.xyz, r17.yzxy  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r19.xyz, r16.zxyz, r18.yzxy
                  mul r16.xyz, r16.xyzx, r18.xyzx
                  mov r16.xyz, -r16.xyzx
                  add r16.xyz, r16.xyzx, r19.xyzx
                  dp3 r9.w, r16.xyzx, r16.xyzx
                  rsq r9.w, r9.w
                  mul r16.xyz, r9.wwww, r16.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mov r18.xyz, r4.xyzx
                  mov r18.w, l(1.000000)
                  mov r17.w, l(0)
                  dp4 r17.x, r18.xyzw, r17.xyzw  // outVectorTBN<0:NaN:Inf>
                  mov r14.w, l(0)
                  dp4 r17.y, r18.xyzw, r14.xyzw  // outVectorTBN<1:NaN:Inf>
                  mov r16.w, l(0)
                  dp4 r17.z, r18.xyzw, r16.xyzw  // outVectorTBN<2:NaN:Inf>
                
                #line 253
                  mov r17.xyz, r17.xyzx  // Vec_toCamTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                
                #line 167
                  mul r9.xyz, r7.wwww, r9.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r14.xyz, r9.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r7.w, r14.yzxy, r11.xyzx
                  mul r16.xyz, r14.yzxy, r7.wwww
                  mov r16.xyz, -r16.xyzx
                  add r11.xyz, r11.xyzx, r16.xyzx
                  dp3 r7.w, r11.xyzx, r11.xyzx
                  rsq r7.w, r7.w
                  mul r11.xyz, r7.wwww, r11.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r16.xyz, r11.yzxy  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r18.xyz, r14.zxyz, r16.yzxy
                  mul r14.xyz, r14.xyzx, r16.xyzx
                  mov r14.xyz, -r14.xyzx
                  add r14.xyz, r14.xyzx, r18.xyzx
                  dp3 r7.w, r14.xyzx, r14.xyzx
                  rsq r7.w, r7.w
                  mul r14.xyz, r7.wwww, r14.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mov r8.w, l(1.000000)
                  mov r11.w, l(0)
                  dp4 r11.x, r8.xyzw, r11.xyzw  // outVectorTBN<0:NaN:Inf>
                  mov r9.w, l(0)
                  dp4 r11.y, r8.xyzw, r9.xyzw  // outVectorTBN<1:NaN:Inf>
                  mov r14.w, l(0)
                  dp4 r11.z, r8.xyzw, r14.xyzw  // outVectorTBN<2:NaN:Inf>
                
                #line 254
                  mov r11.xyz, r11.xyzx  // lightVecTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r8.xyz, -r11.xyzx
                  dp3 r7.w, r8.xyzx, r15.xyzx
                  mul r3.w, r3.w, r7.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 262
                  nop 
                  mov r3.w, r3.w  // diffuseCosFactor<0:NaN:Inf>
                  mov r6.w, r6.w  // lightSpecIntensity<0>
                  itof r7.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                  mov r8.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                  mov r5.yzw, r5.yyzw  // lightAmbientColor3<0,1,2>
                  mov r13.xyz, r13.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                  mov r6.xyz, r6.xyzx  // lightDiffuseColor3<0,1,2>
                  mov r12.xyz, r12.xyzx  // matSpecColor3<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // lightSpecColor3<0,1,2>
                  mov r17.xyz, r17.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r11.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r15.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 51
                  mul r5.yzw, r5.yyzw, r8.xxyz
                  mul r5.yzw, r13.xxyz, r5.yyzw  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                  lt r8.x, l(0.000000), r3.w
                
                #line 59
                  mul r3.w, r3.w, l(1.000000)
                  mul r6.xyz, r6.xyzx, r13.xyzx
                  mul r6.xyz, r3.wwww, r6.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 62
                  dp3 r3.w, r15.xyzx, r15.xyzx
                  rsq r3.w, r3.w
                  mul r8.yzw, r3.wwww, r15.xxyz
                  dp3 r3.w, r11.xyzx, r8.yzwy
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r8.yzw, r3.wwww, r8.yyzw
                  add r8.yzw, r11.xxyz, r8.yyzw  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 65
                  dp3 r3.w, r17.xyzx, r17.xyzx
                  rsq r3.w, r3.w
                  mul r9.xyz, r3.wwww, r17.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                  dp3 r3.w, r8.yzwy, r9.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r7.w
                  exp r3.w, r3.w
                  mul r3.w, r3.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 71
                  mul r3.w, r3.w, l(1.000000)
                  mul r7.xyz, r7.xyzx, r12.xyzx
                  mul r7.xyz, r3.wwww, r7.xyzx  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                  movc r6.xyz, r8.xxxx, r6.xyzx, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r7.xyz, r8.xxxx, r7.xyzx, l(0,0,0,0)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 262
                  mov r5.yzw, r5.yyzw  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.xyz, r6.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 270
                  add r5.yzw, r5.yyzw, r6.xxyz
                  mov r6.xyz, -r5.yzwy
                  add r6.xyz, r6.xyzx, r10.xyzx
                  mul r6.xyz, r6.xyzx, r10.wwww
                  add r5.yzw, r5.yyzw, r6.xxyz
                  add r5.yzw, r7.xxyz, r5.yyzw  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 91 "shader3D.fx"
                  mov r5.yzw, r5.yyzw  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r0.xyz, r0.xyzx, r5.yzwy  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 89
                  iadd r0.w, r0.w, l(1)  // i<0>
                endloop 
                
                #line 94
                mov r5.yzw, r0.xxyz  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r5.x  // i<0>
                loop 
                  ilt r3.w, r0.w, cb2[650].y
                  breakc_z r3.w
                  nop 
                  imul null, r3.w, r0.w, l(4)
                  mov r6.xyz, cb2[r3.w + 200].xyzx  // Light<0,1,2>
                  mov r7.xyz, cb2[r3.w + 201].xyzx  // Light<4,5,6>
                  mov r8.xyz, cb2[r3.w + 202].xyzx  // Light<8,9,10>
                  mov r9.xyz, cb2[r3.w + 203].xyzx  // Light<12,13,14>
                  mov r6.w, cb2[r3.w + 200].w  // Light<3>
                  mov r7.w, cb2[r3.w + 201].w  // Light<7>
                  mov r8.w, cb2[r3.w + 202].w  // Light<11>
                  mov r3.w, cb2[r3.w + 203].w  // Light<15>
                  mov r10.xyz, r1.xzwx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r4.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                  mov r12.xyz, v2.xyzx  // thisPoint<0,1,2>
                  mov r13.xyz, r2.xyzx  // tangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 287 "shader3D_defaultDraw.fx"
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r12.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                  dp3 r9.w, r9.xyzx, r9.xyzx
                  rsq r10.w, r9.w
                  mul r12.xyz, r9.xyzx, r10.wwww  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r9.xyz, r12.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 291
                  sqrt r9.w, r9.w  // disFromLight<0:NaN:Inf>
                  mul r8.w, r8.w, r9.w
                  mul r8.w, r9.w, r8.w
                  add r8.w, r8.w, l(1.000000)
                  div r8.w, l(1.000000), r8.w  // Attenuation<0:NaN:Inf>
                
                #line 296
                  lt r3.w, r3.w, r9.w
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r14.xyz, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,1:Inf,2:Inf>
                  ine r9.w, l(0, 0, 0, 0), cb1[4].y
                  if_nz r9.w
                
                #line 105
                    mov r14.xyz, r14.xyzx  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mul r14.xyz, r14.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                    add r14.xyz, r14.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mov r9.w, -cb1[1].w
                    add r9.w, r9.w, l(1.000000)
                    max r9.w, r9.w, l(0.000000)
                    min r9.w, r9.w, l(1.000000)
                    mov r15.xyz, -r14.xyzx
                    add r15.xyz, r15.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                    mul r15.xyz, r9.wwww, r15.xyzx
                    add r14.xyz, r14.xyzx, r15.xyzx
                    dp3 r9.w, r14.xyzx, r14.xyzx
                    rsq r9.w, r9.w
                    mul r14.xyz, r9.wwww, r14.xyzx  // outNormalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 102
                  else 
                
                #line 113
                    mov r14.xyz, l(0,1.000000,0,0)  // outNormalTBN<0: 0f,1: 1f,2: 0f>
                
                #line 102
                  endif 
                
                #line 313
                  mov r13.xyz, r13.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r15.xyz, r10.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 201
                  dp3 r9.w, r15.xyzx, r15.xyzx
                  rsq r9.w, r9.w
                  mul r15.xyz, r9.wwww, r15.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r9.w, r15.yzxy, r13.xyzx
                  mul r16.xyz, r15.yzxy, r9.wwww
                  mov r16.xyz, -r16.xyzx
                  add r16.xyz, r13.xyzx, r16.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r16.w, r16.y, l(0.010000)  // TangentW<1:NaN:Inf>
                  dp3 r9.w, r16.xzwx, r16.xzwx
                  rsq r9.w, r9.w
                  mul r16.xyz, r9.wwww, r16.wzxw  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r17.xyz, r15.zxyz, r16.yzxy
                  mul r18.xyz, r15.xyzx, r16.xyzx
                  mov r18.xyz, -r18.xyzx
                  add r17.xyz, r17.xyzx, r18.xyzx
                  dp3 r9.w, r17.xyzx, r17.xyzx
                  rsq r9.w, r9.w
                  mul r17.xyz, r9.wwww, r17.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                  mov r14.w, l(1.000000)
                  mov r18.x, r16.z
                  mov r18.y, r15.y
                  mov r18.z, r17.x
                  mov r18.w, l(0)
                  dp4 r18.x, r14.xyzw, r18.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r19.x, r16.x
                  mov r19.y, r15.z
                  mov r19.z, r17.y
                  mov r19.w, l(0)
                  dp4 r18.y, r14.xyzw, r19.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r17.x, r16.y
                  mov r17.y, r15.x
                  mov r17.w, l(0)
                  dp4 r18.z, r14.xyzw, r17.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 313
                  mov r18.xyz, r18.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r11.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r18.xyz, r18.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                  mov r11.xyz, -r11.xyzx
                  dp3 r9.w, r11.xyzx, r18.xyzx
                  add r9.w, r9.w, r9.w
                  mov r9.w, -r9.w
                  mul r15.xyz, r9.wwww, r18.xyzx
                  add r11.xyz, r11.xyzx, r15.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t2.xyzw, s0  // sampleColor<0:Inf,1:Inf,2:Inf>
                
                #line 304
                  if_z r3.w
                
                #line 312
                    nop 
                
                #line 88
                    sample_indexable(texture2d)(float,float,float,float) r15.xyz, v4.xyxx, t0.xyzw, s0  // diffSampleColor<0:Inf,1:Inf,2:Inf>
                    ine r3.w, l(0, 0, 0, 0), cb1[4].x
                    if_nz r3.w
                      mov r16.xyz, r15.xyzx  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                    else 
                
                #line 96
                      mov r16.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 89
                    endif 
                
                #line 119
                    ine r3.w, l(0, 0, 0, 0), cb1[4].z
                    if_nz r3.w
                      mov r15.xyz, r15.xyzx  // outSpecColor3<0:Inf,1:Inf,2:Inf>
                    else 
                
                #line 126
                      mov r15.xyz, cb1[2].xyzx  // outSpecColor3<0,1,2>
                
                #line 119
                    endif 
                
                #line 312
                    mov r16.xyz, r16.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r14.xyz, r14.xyzx  // normalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r15.xyz, r15.xyzx  // specularColor3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                
                #line 136
                    max r3.w, cb1[2].w, l(0.000000)
                    min r11.w, r3.w, l(1.000000)  // sampleColor<3:[0f,1f]>
                
                #line 139
                    ine r3.w, l(0, 0, 0, 0), cb1[4].w
                    if_nz r3.w
                
                #line 142
                      mov r11.xyzw, r11.xyzw  // outEnvMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                
                #line 139
                    else 
                
                #line 146
                      mov r11.xyzw, l(0,0,0,0)  // outEnvMapColor4<0: 0f,1: 0f,2: 0f,3: 0f>
                
                #line 139
                    endif 
                
                #line 314
                    mov r11.xyzw, r11.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[-0f,1f]>
                    nop 
                    mov r17.xyz, r10.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 167
                    dp3 r3.w, r17.xyzx, r17.xyzx
                    rsq r3.w, r3.w
                    mul r18.xyz, r3.wwww, r17.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r19.xyz, r18.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r9.w, r19.yzxy, r13.xyzx
                    mul r20.xyz, r19.yzxy, r9.wwww
                    mov r20.xyz, -r20.xyzx
                    add r20.xyz, r13.xyzx, r20.xyzx
                    dp3 r9.w, r20.xyzx, r20.xyzx
                    rsq r9.w, r9.w
                    mul r20.xyz, r9.wwww, r20.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r21.xyz, r20.yzxy  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r22.xyz, r19.zxyz, r21.yzxy
                    mul r19.xyz, r19.xyzx, r21.xyzx
                    mov r19.xyz, -r19.xyzx
                    add r19.xyz, r19.xyzx, r22.xyzx
                    dp3 r9.w, r19.xyzx, r19.xyzx
                    rsq r9.w, r9.w
                    mul r19.xyz, r9.wwww, r19.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                    mov r21.xyz, r4.xyzx
                    mov r21.w, l(1.000000)
                    mov r20.w, l(0)
                    dp4 r20.x, r21.xyzw, r20.xyzw  // outVectorTBN<0:NaN:Inf>
                    mov r18.w, l(0)
                    dp4 r20.y, r21.xyzw, r18.xyzw  // outVectorTBN<1:NaN:Inf>
                    mov r19.w, l(0)
                    dp4 r20.z, r21.xyzw, r19.xyzw  // outVectorTBN<2:NaN:Inf>
                
                #line 315
                    mov r20.xyz, r20.xyzx  // Vec_toCamTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                
                #line 167
                    mul r17.xyz, r3.wwww, r17.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r18.xyz, r17.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r3.w, r18.yzxy, r13.xyzx
                    mul r19.xyz, r18.yzxy, r3.wwww
                    mov r19.xyz, -r19.xyzx
                    add r13.xyz, r13.xyzx, r19.xyzx
                    dp3 r3.w, r13.xyzx, r13.xyzx
                    rsq r3.w, r3.w
                    mul r13.xyz, r3.wwww, r13.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r19.xyz, r13.yzxy  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r21.xyz, r18.zxyz, r19.yzxy
                    mul r18.xyz, r18.xyzx, r19.xyzx
                    mov r18.xyz, -r18.xyzx
                    add r18.xyz, r18.xyzx, r21.xyzx
                    dp3 r3.w, r18.xyzx, r18.xyzx
                    rsq r3.w, r3.w
                    mul r18.xyz, r3.wwww, r18.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                    mov r12.w, l(1.000000)
                    mov r13.w, l(0)
                    dp4 r13.x, r12.xyzw, r13.xyzw  // outVectorTBN<0:NaN:Inf>
                    mov r17.w, l(0)
                    dp4 r13.y, r12.xyzw, r17.xyzw  // outVectorTBN<1:NaN:Inf>
                    mov r18.w, l(0)
                    dp4 r13.z, r12.xyzw, r18.xyzw  // outVectorTBN<2:NaN:Inf>
                
                #line 316
                    mov r13.xyz, r13.xyzx  // lightVecTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 319
                    mov r9.xyz, -r9.xyzx
                    dp3 r3.w, r9.xyzx, r10.xyzx
                    mul r3.w, r3.w, r7.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 325
                    nop 
                    mov r3.w, r3.w  // diffuseCosFactor<0:NaN:Inf>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                    itof r7.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                    mov r8.w, r8.w  // Attenuation<0:NaN:Inf>
                    mov r9.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r16.xyz, r16.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r15.xyz, r15.xyzx  // matSpecColor3<0:Inf,1:Inf,2:Inf>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r20.xyz, r20.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r13.xyz, r13.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r14.xyz, r14.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 51
                    mul r6.xyz, r6.xyzx, r9.xyzx
                    mul r6.xyz, r16.xyzx, r6.xyzx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                    lt r9.x, l(0.000000), r3.w
                
                #line 59
                    mul r3.w, r3.w, r8.w
                    mul r7.xyz, r7.xyzx, r16.xyzx
                    mul r7.xyz, r3.wwww, r7.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 62
                    dp3 r3.w, r14.xyzx, r14.xyzx
                    rsq r3.w, r3.w
                    mul r9.yzw, r3.wwww, r14.xxyz
                    dp3 r3.w, r13.xyzx, r9.yzwy
                    add r3.w, r3.w, r3.w
                    mov r3.w, -r3.w
                    mul r9.yzw, r3.wwww, r9.yyzw
                    add r9.yzw, r13.xxyz, r9.yyzw  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 65
                    dp3 r3.w, r20.xyzx, r20.xyzx
                    rsq r3.w, r3.w
                    mul r10.xyz, r3.wwww, r20.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    dp3 r3.w, r9.yzwy, r10.xyzx
                    max r3.w, r3.w, l(0.000000)
                    log r3.w, r3.w
                    mul r3.w, r3.w, r7.w
                    exp r3.w, r3.w
                    mul r3.w, r3.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 71
                    mul r3.w, r3.w, r8.w
                    mul r8.xyz, r8.xyzx, r15.xyzx
                    mul r8.xyz, r3.wwww, r8.xyzx  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                    movc r7.xyz, r9.xxxx, r7.xyzx, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    movc r8.xyz, r9.xxxx, r8.xyzx, l(0,0,0,0)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 325
                    mov r6.xyz, r6.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r8.xyz, r8.xyzx  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 333
                    add r6.xyz, r6.xyzx, r7.xyzx
                    mov r7.xyz, -r6.xyzx
                    add r7.xyz, r7.xyzx, r11.xyzx
                    mul r7.xyz, r7.xyzx, r11.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 304
                  else 
                    mov r6.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 96 "shader3D.fx"
                  mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r5.yzw, r5.yyzw, r6.xxyz  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 94
                  iadd r0.w, r0.w, l(1)  // i<0>
                endloop 
                
                #line 99
                mov r0.xyz, r5.yzwy  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r5.x  // i<0>
                loop 
                  ilt r3.w, r0.w, cb2[650].z
                  breakc_z r3.w
                  nop 
                  imul null, r3.w, r0.w, l(5)
                  mov r6.xyz, cb2[r3.w + 400].xyzx  // Light<0,1,2>
                  mov r7.xyz, cb2[r3.w + 401].xyzx  // Light<4,5,6>
                  mov r8.xyz, cb2[r3.w + 402].xyzx  // Light<8,9,10>
                  mov r9.xyz, cb2[r3.w + 403].xyzx  // Light<12,13,14>
                  mov r10.xyz, cb2[r3.w + 404].xyzx  // Light<16,17,18>
                  mov r6.w, cb2[r3.w + 400].w  // Light<3>
                  mov r7.w, cb2[r3.w + 401].w  // Light<7>
                  mov r8.w, cb2[r3.w + 402].w  // Light<11>
                  mov r9.w, cb2[r3.w + 403].w  // Light<15>
                  mov r3.w, cb2[r3.w + 404].w  // Light<19>
                  mov r11.xyz, r1.xzwx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r4.xyzx  // Vec_toCam<0:Inf,1:Inf,2:Inf>
                  mov r13.xyz, v2.xyzx  // thisPoint<0,1,2>
                  mov r14.xyz, r2.xyzx  // tangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 349 "shader3D_defaultDraw.fx"
                  mov r10.xyz, -r10.xyzx
                  add r13.xyz, r10.xyzx, r13.xyzx  // LightVec<0:Inf,1:Inf,2:Inf>
                  dp3 r10.w, r13.xyzx, r13.xyzx
                  rsq r11.w, r10.w
                  mul r13.xyz, r11.wwww, r13.xyzx  // Unit_LightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 353
                  sqrt r10.w, r10.w  // disFromLight<0:NaN:Inf>
                  mul r8.w, r8.w, r10.w
                  mul r8.w, r10.w, r8.w
                  add r8.w, r8.w, l(1.000000)
                  div r8.w, l(1.000000), r8.w  // Attenuation<0:NaN:Inf>
                
                #line 358
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r10.x, r9.xyzx, r9.xyzx
                  rsq r10.x, r10.x
                  mul r9.xyz, r9.xyzx, r10.xxxx
                  dp3 r9.x, r13.xyzx, r9.xyzx  // Cos_Theta<0:NaN:Inf>
                
                #line 361
                  lt r3.w, r3.w, r10.w
                  div r9.y, r9.w, l(2.000000)
                  sincos null, r9.y, r9.y
                  lt r9.x, r9.x, r9.y
                  or r3.w, r3.w, r9.x
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r9.xyz, v4.xyxx, t1.xyzw, s0  // normSampleColor<0:Inf,1:Inf,2:Inf>
                  ine r9.w, l(0, 0, 0, 0), cb1[4].y
                  if_nz r9.w
                
                #line 105
                    mov r9.xyz, r9.xyzx  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mul r9.xyz, r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                    add r9.xyz, r9.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // outNormalTBN<0:Inf,1:Inf,2:Inf>
                    mov r9.w, -cb1[1].w
                    add r9.w, r9.w, l(1.000000)
                    max r9.w, r9.w, l(0.000000)
                    min r9.w, r9.w, l(1.000000)
                    mov r10.xyz, -r9.xyzx
                    add r10.xyz, r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
                    mul r10.xyz, r9.wwww, r10.xyzx
                    add r9.xyz, r9.xyzx, r10.xyzx
                    dp3 r9.w, r9.xyzx, r9.xyzx
                    rsq r9.w, r9.w
                    mul r9.xyz, r9.wwww, r9.xyzx  // outNormalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 102
                  else 
                
                #line 113
                    mov r9.xyz, l(0,1.000000,0,0)  // outNormalTBN<0: 0f,1: 1f,2: 0f>
                
                #line 102
                  endif 
                
                #line 380
                  mov r14.xyz, r14.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r11.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 201
                  dp3 r10.w, r10.xyzx, r10.xyzx
                  rsq r10.w, r10.w
                  mul r10.xyz, r10.wwww, r10.xyzx  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  dp3 r10.w, r10.yzxy, r14.xyzx
                  mul r15.xyz, r10.yzxy, r10.wwww
                  mov r15.xyz, -r15.xyzx
                  add r15.xyz, r14.xyzx, r15.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r15.w, r15.y, l(0.010000)  // TangentW<1:NaN:Inf>
                  dp3 r10.w, r15.xzwx, r15.xzwx
                  rsq r10.w, r10.w
                  mul r15.xyz, r10.wwww, r15.wzxw  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                  mul r16.xyz, r10.zxyz, r15.yzxy
                  mul r17.xyz, r10.xyzx, r15.xyzx
                  mov r17.xyz, -r17.xyzx
                  add r16.xyz, r16.xyzx, r17.xyzx
                  dp3 r10.w, r16.xyzx, r16.xyzx
                  rsq r10.w, r10.w
                  mul r16.xyz, r10.wwww, r16.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                  mov r9.w, l(1.000000)
                  mov r17.x, r15.z
                  mov r17.y, r10.y
                  mov r17.z, r16.x
                  mov r17.w, l(0)
                  dp4 r17.x, r9.xyzw, r17.xyzw  // outVectorXYZ<0:NaN:Inf>
                  mov r18.x, r15.x
                  mov r18.y, r10.z
                  mov r18.z, r16.y
                  mov r18.w, l(0)
                  dp4 r17.y, r9.xyzw, r18.xyzw  // outVectorXYZ<1:NaN:Inf>
                  mov r16.x, r15.y
                  mov r16.y, r10.x
                  mov r16.w, l(0)
                  dp4 r17.z, r9.xyzw, r16.xyzw  // outVectorXYZ<2:NaN:Inf>
                
                #line 380
                  mov r17.xyz, r17.xyzx  // deviatedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r12.xyz, r12.xyzx  // VecToCamW<0:Inf,1:Inf,2:Inf>
                  mov r17.xyz, r17.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 136
                  mov r10.xyz, -r12.xyzx
                  dp3 r9.w, r10.xyzx, r17.xyzx
                  add r9.w, r9.w, r9.w
                  mov r9.w, -r9.w
                  mul r12.xyz, r9.wwww, r17.xyzx
                  add r10.xyz, r10.xyzx, r12.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t2.xyzw, s0  // sampleColor<0:Inf,1:Inf,2:Inf>
                
                #line 371
                  if_z r3.w
                
                #line 379
                    nop 
                
                #line 88
                    sample_indexable(texture2d)(float,float,float,float) r12.xyz, v4.xyxx, t0.xyzw, s0  // diffSampleColor<0:Inf,1:Inf,2:Inf>
                    ine r3.w, l(0, 0, 0, 0), cb1[4].x
                    if_nz r3.w
                      mov r15.xyz, r12.xyzx  // outDiffColor3<0:Inf,1:Inf,2:Inf>
                    else 
                
                #line 96
                      mov r15.xyz, cb1[1].xyzx  // outDiffColor3<0,1,2>
                
                #line 89
                    endif 
                
                #line 119
                    ine r3.w, l(0, 0, 0, 0), cb1[4].z
                    if_nz r3.w
                      mov r12.xyz, r12.xyzx  // outSpecColor3<0:Inf,1:Inf,2:Inf>
                    else 
                
                #line 126
                      mov r12.xyz, cb1[2].xyzx  // outSpecColor3<0,1,2>
                
                #line 119
                    endif 
                
                #line 379
                    mov r15.xyz, r15.xyzx  // diffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r9.xyz, r9.xyzx  // normalTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r12.xyz, r12.xyzx  // specularColor3<0:Inf,1:Inf,2:Inf>
                    nop 
                    nop 
                
                #line 136
                    max r3.w, cb1[2].w, l(0.000000)
                    min r10.w, r3.w, l(1.000000)  // sampleColor<3:[0f,1f]>
                
                #line 139
                    ine r3.w, l(0, 0, 0, 0), cb1[4].w
                    if_nz r3.w
                
                #line 142
                      mov r10.xyzw, r10.xyzw  // outEnvMapColor4<0:Inf,1:Inf,2:Inf,3:[0f,1f]>
                
                #line 139
                    else 
                
                #line 146
                      mov r10.xyzw, l(0,0,0,0)  // outEnvMapColor4<0: 0f,1: 0f,2: 0f,3: 0f>
                
                #line 139
                    endif 
                
                #line 381
                    mov r10.xyzw, r10.xyzw  // envMapColor4<0:Inf,1:Inf,2:Inf,3:[-0f,1f]>
                    nop 
                    mov r16.xyz, r11.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 167
                    dp3 r3.w, r16.xyzx, r16.xyzx
                    rsq r3.w, r3.w
                    mul r16.xyz, r3.wwww, r16.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r17.xyz, r16.zxyz  // NormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                    dp3 r3.w, r17.yzxy, r14.xyzx
                    mul r18.xyz, r17.yzxy, r3.wwww
                    mov r18.xyz, -r18.xyzx
                    add r14.xyz, r14.xyzx, r18.xyzx
                    dp3 r3.w, r14.xyzx, r14.xyzx
                    rsq r3.w, r3.w
                    mul r14.xyz, r3.wwww, r14.xyzx  // TangentW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r18.xyz, r14.yzxy  // TangentW<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                    mul r19.xyz, r17.zxyz, r18.yzxy
                    mul r17.xyz, r17.xyzx, r18.xyzx
                    mov r17.xyz, -r17.xyzx
                    add r17.xyz, r17.xyzx, r19.xyzx
                    dp3 r3.w, r17.xyzx, r17.xyzx
                    rsq r3.w, r3.w
                    mul r17.xyz, r3.wwww, r17.xyzx  // BinormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                    mov r18.xyz, r4.xyzx
                    mov r18.w, l(1.000000)
                    mov r14.w, l(0)
                    dp4 r14.x, r18.xyzw, r14.xyzw  // outVectorTBN<0:NaN:Inf>
                    mov r16.w, l(0)
                    dp4 r14.y, r18.xyzw, r16.xyzw  // outVectorTBN<1:NaN:Inf>
                    mov r17.w, l(0)
                    dp4 r14.z, r18.xyzw, r17.xyzw  // outVectorTBN<2:NaN:Inf>
                
                #line 382
                    mov r14.xyz, r14.xyzx  // Vec_toCamTBN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    nop 
                
                #line 386
                    mov r16.xyz, -r13.xyzx
                    dp3 r3.w, r16.xyzx, r11.xyzx
                    mul r3.w, r3.w, r7.w  // diffuseCosFactor<0:NaN:Inf>
                
                #line 389
                    nop 
                    mov r3.w, r3.w  // diffuseCosFactor<0:NaN:Inf>
                    mov r6.w, r6.w  // lightSpecIntensity<0>
                    itof r7.w, cb1[0].w  // matSpecSmoothLevel<0:[-2.14748e+009f,2.14748e+009f]>
                    mov r8.w, r8.w  // Attenuation<0:NaN:Inf>
                    mov r11.xyz, cb1[0].xyzx  // matAmbientColor3<0,1,2>
                    mov r6.xyz, r6.xyzx  // lightAmbientColor3<0,1,2>
                    mov r15.xyz, r15.xyzx  // matDiffuseColor3<0:Inf,1:Inf,2:Inf>
                    mov r7.xyz, r7.xyzx  // lightDiffuseColor3<0,1,2>
                    mov r12.xyz, r12.xyzx  // matSpecColor3<0:Inf,1:Inf,2:Inf>
                    mov r8.xyz, r8.xyzx  // lightSpecColor3<0,1,2>
                    mov r14.xyz, r14.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r13.xyz, r13.xyzx  // UnitLightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // Normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 51
                    mul r6.xyz, r6.xyzx, r11.xyzx
                    mul r6.xyz, r15.xyzx, r6.xyzx  // outAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                    lt r9.w, l(0.000000), r3.w
                
                #line 59
                    mul r3.w, r3.w, r8.w
                    mul r7.xyz, r7.xyzx, r15.xyzx
                    mul r7.xyz, r3.wwww, r7.xyzx  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 62
                    dp3 r3.w, r9.xyzx, r9.xyzx
                    rsq r3.w, r3.w
                    mul r9.xyz, r3.wwww, r9.xyzx
                    dp3 r3.w, r13.xyzx, r9.xyzx
                    add r3.w, r3.w, r3.w
                    mov r3.w, -r3.w
                    mul r9.xyz, r3.wwww, r9.xyzx
                    add r9.xyz, r13.xyzx, r9.xyzx  // tmpV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 65
                    dp3 r3.w, r14.xyzx, r14.xyzx
                    rsq r3.w, r3.w
                    mul r11.xyz, r3.wwww, r14.xyzx  // Vec_toCam<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 68
                    dp3 r3.w, r9.xyzx, r11.xyzx
                    max r3.w, r3.w, l(0.000000)
                    log r3.w, r3.w
                    mul r3.w, r3.w, r7.w
                    exp r3.w, r3.w
                    mul r3.w, r3.w, r6.w  // SpecFactor<0:NaN:Inf>
                
                #line 71
                    mul r3.w, r3.w, r8.w
                    mul r8.xyz, r8.xyzx, r12.xyzx
                    mul r8.xyz, r3.wwww, r8.xyzx  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 56
                    movc r7.xyz, r9.wwww, r7.xyzx, l(0,0,0,0)  // outDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    movc r8.xyz, r9.wwww, r8.xyzx, l(0,0,0,0)  // outSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 389
                    mov r6.xyz, r6.xyzx  // outAmbient4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r7.xyz, r7.xyzx  // outDiffuse4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r8.xyz, r8.xyzx  // outSpec4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 397
                    add r6.xyz, r6.xyzx, r7.xyzx
                    mov r7.xyz, -r6.xyzx
                    add r7.xyz, r7.xyzx, r10.xyzx
                    mul r7.xyz, r7.xyzx, r10.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx
                    add r6.xyz, r8.xyzx, r6.xyzx  // outColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 371
                  else 
                    mov r6.xyz, l(0,0,0,0)  // outColor4<0: 0f,1: 0f,2: 0f>
                  endif 
                
                #line 101 "shader3D.fx"
                  mov r6.xyz, r6.xyzx  // tmpColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r0.xyz, r0.xyzx, r6.xyzx  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 99
                  iadd r0.w, r0.w, l(1)  // i<0>
                endloop 
                
                #line 58
                if_nz r4.w
                  mov o0.xyz, cb4[0].xyzx  // PS_DefaultDraw<0,1,2>
                  mov o0.w, l(1.000000)  // PS_DefaultDraw<3: 1f>
                  ret 
                endif 
                
                #line 87
                if_nz r1.y
                  mov r3.xyz, r0.xyzx  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                endif 
                
                #line 107
                ine r0.x, l(0, 0, 0, 0), cb4[0].w
                if_nz r0.x
                  mov r0.x, -cb4[1].x
                  add r0.y, r0.x, r2.w
                  add r0.x, r0.x, cb4[1].y
                  div r0.x, r0.y, r0.x
                  max r0.x, r0.x, l(0.000000)  // fogInterpolationFactor<0:Inf:[-0f,1.#INFf]>
                  mov r0.yzw, -r3.xxyz
                  add r0.yzw, r0.yyzw, cb4[0].xxyz
                  mul r0.xyz, r0.yzwy, r0.xxxx
                  add r3.xyz, r0.xyzx, r3.xyzx  // finalColor4<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 107
                endif 
                
                #line 114
                max r0.x, cb1[3].x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // finalColor4<3:[0f,1f]>
                mov o0.xyz, r3.xyzx  // PS_DefaultDraw<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.x  // PS_DefaultDraw<3:[0f,1f]>
                ret 
                // Approximately 1444 instruction slots used
                            
            };
        }

    }

    technique11 DrawSolid3D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                
                #line 166 "shader3D.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                dp4 r1.w, r0.xyzw, cb0[7].xyzw
                dp4 r0.x, r1.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r0.z, r1.xyzw, cb0[2].xyzw  // output<2:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb0[3].xyzw  // output<3:NaN:Inf>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r2.xy, v2.xyxx  // output<8,9>
                mov o0.xyzw, r0.xyzw  // VS_Solid3D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r1.xyzw  // VS_Solid3D<4,5,6,7>
                mov o2.xy, r2.xyxx  // VS_Solid3D<8,9>
                ret 
                // Approximately 16 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                
                #line 174 "shader3D.fx"
                mov o0.xyzw, v1.xyzw  // PS_Solid3D<0,1,2,3>
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 DrawSolid2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 2
                
                #line 32 "shader2D.fx"
                mov r0.xyz, v0.xyzx  // output<0,1,2>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov o0.xyzw, r0.xyzw  // VS_Solid2D<0,1,2,3: 1f>
                mov o1.xyzw, r1.xyzw  // VS_Solid2D<4,5,6,7>
                mov o2.xy, l(0,0,0,0)  // VS_Solid2D<8: 0f,9: 0f>
                ret 
                // Approximately 7 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v1.xyzw
                dcl_output o0.xyzw
                
                #line 39 "shader2D.fx"
                mov o0.xyzw, v1.xyzw  // PS_Solid2D<0,1,2,3>
                ret 
                // Approximately 2 instruction slots used
                            
            };
        }

    }

    technique11 DrawTextured2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                
                #line 47 "shader2D.fx"
                mov r0.xyz, v0.xyzx  // output<0,1,2>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r2.xy, v2.xyxx  // output<8,9>
                mov o0.xyzw, r0.xyzw  // VS_Textured2D<0,1,2,3: 1f>
                mov o1.xyzw, r1.xyzw  // VS_Textured2D<4,5,6,7>
                mov o2.xy, r2.xyxx  // VS_Textured2D<8,9>
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // sampler2D_ANISOTROPIC             sampler      NA          NA    0        1
                // g2D_DiffuseMap                    texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float      w
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.w
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 55 "shader2D.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0  // sampledColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mul r0.w, r0.w, v1.w  // outputColor<3:NaN:Inf>
                mov r0.xyz, r0.xyzx  // outputColor<0:Inf,1:Inf,2:Inf>
                mov o0.xyzw, r0.xyzw  // PS_Textured2D<0:Inf,1:Inf,2:Inf,3:NaN:Inf>
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

    }

    technique11 DrawText2D
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_temps 3
                
                #line 66 "shader2D.fx"
                mov r0.xyz, v0.xyzx  // output<0,1,2>
                mov r0.w, l(1.000000)  // output<3: 1f>
                mov r1.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r2.xy, v2.xyxx  // output<8,9>
                mov o0.xyzw, r0.xyzw  // VS_DrawText2D<0,1,2,3: 1f>
                mov o1.xyzw, r1.xyzw  // VS_DrawText2D<4,5,6,7>
                mov o2.xy, r2.xyxx  // VS_DrawText2D<8,9>
                ret 
                // Approximately 8 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbDrawText2D
                // {
                //
                //   float4 g2D_TextColor;              // Offset:    0 Size:    16
                //   float4 g2D_TextGlowColor;          // Offset:   16 Size:    16 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // sampler2D_ANISOTROPIC             sampler      NA          NA    0        1
                // g2D_DiffuseMap                    texture  float4          2d    0        1
                // cbDrawText2D                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 74 "shader2D.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0  // sampledColor<0:Inf,1:Inf,2:Inf,3:Inf>
                ne r1.x, r0.w, l(0.000000)
                if_nz r1.x
                  mov r0.xyz, cb0[0].xyzx  // sampledColor<0,1,2>
                endif 
                mov r0.xyz, r0.xyzx  // outputColor<0:Inf,1:Inf,2:Inf>
                mov r0.w, r0.w  // outputColor<3:Inf>
                mov o0.xyzw, r0.xyzw  // PS_DrawText2D<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

    technique11 DrawSky
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_temps 4
                
                #line 128 "shader3D.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(0)
                dp4 r1.x, r0.xyzw, cb0[4].xyzw
                dp4 r1.y, r0.xyzw, cb0[5].xyzw
                dp4 r1.z, r0.xyzw, cb0[6].xyzw
                mov r1.w, l(1.000000)
                dp4 r0.x, r1.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb0[3].xyzw
                mov r0.zw, r0.wwww  // output<2:NaN:Inf,3:NaN:Inf>
                mov r1.xyz, v0.xyzx  // output<8,9,10>
                mov r2.xyzw, v1.xyzw  // output<4,5,6,7>
                mov r3.xy, v2.xyxx  // output<14,15>
                mov o0.xyzw, r0.xyzw  // VS_DrawSky<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r2.xyzw  // VS_DrawSky<4,5,6,7>
                mov o2.xyz, r1.xyzx  // VS_DrawSky<8,9,10>
                mov o4.xy, r3.xyxx  // VS_DrawSky<14,15>
                mov o3.xyz, l(0,0,0,0)  // VS_DrawSky<11: 0f,12: 0f,13: 0f>
                mov o5.xyz, l(0,0,0,0)  // VS_DrawSky<16: 0f,17: 0f,18: 0f>
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbAtmosphere
                // {
                //
                //   float3 gFogColor3;                 // Offset:    0 Size:    12 [unused]
                //   int gFogEnabled;                   // Offset:   12 Size:     4 [unused]
                //   float gFogNear;                    // Offset:   16 Size:     4 [unused]
                //   float gFogFar;                     // Offset:   20 Size:     4 [unused]
                //   int gIsSkyDomeValid;               // Offset:   24 Size:     4
                //   int gIsSkyBoxValid;                // Offset:   28 Size:     4
                //   float gSkyBoxWidth;                // Offset:   32 Size:     4
                //   float gSkyBoxHeight;               // Offset:   36 Size:     4
                //   float gSkyBoxDepth;                // Offset:   40 Size:     4
                //   float mPad3;                       // Offset:   44 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerDefault                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gCubeMap                          texture  float4        cube    1        1
                // cbAtmosphere                      cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // NORMAL                   0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TANGENT                  0   xyz         5     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[3], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texturecube (float,float,float,float) t1
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 137 "shader3D.fx"
                mov r0.xyzw, v1.xyzw  // outputColor<0,1,2,3>
                
                #line 140
                ine r1.x, l(0, 0, 0, 0), cb0[1].z
                not r1.y, r1.x
                ine r1.z, l(0, 0, 0, 0), cb0[1].w
                not r1.w, r1.z
                and r1.y, r1.w, r1.y
                if_nz r1.y
                  mov o0.xyzw, r0.xyzw  // PS_DrawSky<0,1,2,3>
                  ret 
                endif 
                
                #line 144
                if_nz r1.x
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // outputColor<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov o0.xyzw, r2.xyzw  // PS_DrawSky<0:Inf,1:Inf,2:Inf,3:Inf>
                  ret 
                
                #line 144
                endif 
                
                #line 149
                if_nz r1.z
                
                #line 152
                  div r1.x, l(1.000000), cb0[2].x
                  div r1.y, l(1.000000), cb0[2].y
                  div r1.z, l(1.000000), cb0[2].z
                  mul r1.xyz, r1.xyzx, v2.xyzx
                  sample_indexable(texturecube)(float,float,float,float) r1.xyzw, r1.xyzx, t1.xyzw, s0  // outputColor<0:Inf,1:Inf,2:Inf,3:Inf>
                  mov o0.xyzw, r1.xyzw  // PS_DrawSky<0:Inf,1:Inf,2:Inf,3:Inf>
                  ret 
                
                #line 149
                endif 
                
                #line 156
                mov o0.xyzw, r0.xyzw  // PS_DrawSky<0,1,2,3>
                ret 
                // Approximately 26 instruction slots used
                            
            };
        }

    }

    technique11 PickingIntersection
    {
        pass Pass0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorldMatrix;             // Offset:    0 Size:    64
                //   float4x4 gWorldInvTransposeMatrix; // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64 [unused]
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64 [unused]
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbCameraInfo                      cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float       
                // TANGENT                  0   xyz         4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[4], immediateIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_temps 2
                
                #line 21 "picking.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp4 r1.w, r0.xyzw, cb0[3].xyzw
                dp4 r0.x, r1.xyzw, cb1[4].xyzw  // outputPosV<0:NaN:Inf>
                dp4 r0.y, r1.xyzw, cb1[5].xyzw  // outputPosV<1:NaN:Inf>
                dp4 r0.z, r1.xyzw, cb1[6].xyzw  // outputPosV<2:NaN:Inf>
                dp4 r0.w, r1.xyzw, cb1[7].xyzw  // outputPosV<3:NaN:Inf>
                mov o0.xyzw, r0.xyzw  // VS_Picking<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 12 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbCameraInfo
                // {
                //
                //   float4x4 gProjMatrix;              // Offset:    0 Size:    64
                //   float4x4 gViewMatrix;              // Offset:   64 Size:    64 [unused]
                //   float4x4 gInvProjMatrix;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvViewMatrix;           // Offset:  192 Size:    64
                //   float3 gCamPos;                    // Offset:  256 Size:    12 [unused]
                //   float mPad1;                       // Offset:  268 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbPicking
                // {
                //
                //   float2 gPickingRayNormalizedDirXY; // Offset:    0 Size:     8
                //   float2 gPadPicking123;             // Offset:    8 Size:     8 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbCameraInfo                      cbuffer      NA          NA    0        1
                // cbPicking                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // m0:POSITION              0   xyz         0     NONE  float   xyz 
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input_siv v[3][0].xyzw, position
                dcl_temps 6
                dcl_inputprimitive triangle 
                dcl_stream m0
                dcl_outputtopology pointlist 
                dcl_output o0.xyz
                dcl_maxout 3
                
                #line 73 "picking.fx"
                mov r0.x, cb0[0].x  // tanHalfFovX<0>
                mov r0.y, cb0[1].y  // tanHalfFovY<0>
                div r1.x, cb1[0].x, r0.x  // rayDir<0:NaN:Inf>
                div r1.y, cb1[0].y, r0.y  // rayDir<1:NaN:Inf>
                mov r1.z, l(1.000000)  // rayDir<2: 1f>
                
                #line 79
                nop 
                mov r1.xyz, r1.xyzx  // dir<0:NaN:Inf,1:NaN:Inf,2: 1f>
                mov r0.xyz, v[0][0].xyzx  // v0<0,1,2>
                mov r2.xyz, v[1][0].zxyz  // v1<2,0,1>
                mov r3.xyz, v[2][0].yzxy  // v2<1,2,0>
                
                #line 35
                mov r4.xyz, -r0.zxyz
                add r2.xyz, r2.xyzx, r4.xyzx  // edge1<2:Inf,0:Inf,1:Inf>
                mov r4.xyz, -r0.yzxy
                add r3.xyz, r3.xyzx, r4.xyzx  // edge2<1:Inf,2:Inf,0:Inf>
                mul r4.xyz, r1.yzxy, r3.yzxy
                mul r5.xyz, r1.zxyz, r3.xyzx
                mov r5.xyz, -r5.xyzx
                add r4.xyz, r4.xyzx, r5.xyzx  // qvec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, r2.yzxy, r4.xyzx  // det<0:NaN:Inf>
                
                #line 41
                lt r1.w, r0.w, l(0.001000)
                lt r2.w, l(-0.001000), r0.w
                and r1.w, r1.w, r2.w
                if_nz r1.w
                  mov r2.w, l(0)  // IntersectTriangle<0: false>
                endif 
                if_z r1.w
                  div r0.w, l(1.000000), r0.w  // invdet<0:NaN:Inf>
                
                #line 45
                  mov r0.xyz, -r0.xyzx
                  add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // tvec<0,1,2>
                  dp3 r1.w, r0.xyzx, r4.xyzx  // u<0:NaN:Inf>
                  mul r1.w, r0.w, r1.w  // u<0:NaN:Inf>
                
                #line 51
                  lt r3.w, r1.w, l(0.000000)
                  lt r4.x, l(1.000000), r1.w
                  or r3.w, r3.w, r4.x
                  if_nz r3.w
                    mov r2.w, l(0)  // IntersectTriangle<0: false>
                  endif 
                  if_z r3.w
                    mul r4.xyz, r2.xyzx, r0.yzxy
                    mul r5.xyz, r2.zxyz, r0.zxyz
                    mov r5.xyz, -r5.xyzx
                    add r4.xyz, r4.xyzx, r5.xyzx  // pvec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 55
                    dp3 r3.w, r1.xyzx, r4.xyzx  // v<0:NaN:Inf>
                    mul r3.w, r0.w, r3.w  // v<0:NaN:Inf>
                    lt r4.x, r3.w, l(0.000000)
                    add r1.w, r1.w, r3.w
                    lt r1.w, l(1.000000), r1.w
                    or r1.w, r1.w, r4.x
                    if_nz r1.w
                      mov r2.w, l(0)  // IntersectTriangle<0: false>
                    endif 
                    if_z r1.w
                      mul r4.xyz, r2.zxyz, r3.yzxy
                      mul r2.xyz, r2.xyzx, r3.xyzx
                      mov r2.xyz, -r2.xyzx
                      add r2.xyz, r2.xyzx, r4.xyzx  // nvec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 62
                      dp3 r0.x, r0.xyzx, r2.xyzx  // t<0:NaN:Inf>
                      mul r0.x, r0.w, r0.x  // t<0:NaN:Inf>
                
                #line 59
                      mov r2.w, l(-1)  // IntersectTriangle<0: true>
                    else 
                      mov r0.x, l(0)  // t<0: 0f>
                    endif 
                
                #line 52
                  else 
                    mov r0.x, l(0)  // t<0: 0f>
                  endif 
                
                #line 42
                else 
                  mov r0.x, l(0)  // t<0: 0f>
                endif 
                
                #line 79
                mov r0.x, r0.x  // t<0:NaN:Inf>
                
                #line 82
                if_nz r2.w
                
                #line 88
                  mul r0.xyz, r1.xyzx, r0.xxxx  // intersectPointV<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 91
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[12].xyzw  // intersectPointW<0:NaN:Inf>
                  dp4 r1.y, r0.xyzw, cb0[13].xyzw  // intersectPointW<1:NaN:Inf>
                  dp4 r1.z, r0.xyzw, cb0[14].xyzw  // intersectPointW<2:NaN:Inf>
                  mov r1.xyz, r1.xyzx  // outVert<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov o0.xyz, r1.xyzx  // pointStream<0,0,0>
                  emit_stream m0
                
                #line 82
                endif 
                
                #line 70
                ret 
                // Approximately 80 instruction slots used
                            
            }
        /* Stream out decl: "POSITION0.xyz" */;
            PixelShader = NULL;
        }

    }

}

